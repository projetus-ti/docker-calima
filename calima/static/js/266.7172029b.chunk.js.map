{"version":3,"sources":["models/enumerated/mcg/contaFluxoCaixaDiretoEnum.ts","views/pages/mcg/contaFluxoCaixa/ContaFluxoCaixaDiretoTreeView.tsx","dependencies/grupoEmpresaConfigDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/Table.js"],"names":["ATIVIDADES_OPERACIONAIS","label","value","extraField","intValue","RECEBIMENTOS_OPERACIONAIS","RECEBIMENTO_VENDAS","CLIENTES","RECEITA_VENDAS","OUTROS_RECEBIMENTOS_OPERACIONAIS","PAGAMENTOS_OPERACIONAIS","FORNECEDORES","ESTOQUES","FORNECEDORES_PAGAR","OUTROS_PAGAMENTOS_OPERACIONAIS","ATIVIDADES_INVESTIMENTO","ATIVIDADE_FINANCIAMENTO","ContaFluxoCaixaDiretoTreeView","globalReducer","useSelector","state","_useState","useState","_useState2","Object","slicedToArray","showModalView","setShowModalView","_useState3","_useState4","listaContaFluxoCaixa","setListaContaFluxoCaixa","_useForm","useForm","mode","reset","formProps","objectWithoutProperties","formPropsConta","_useState5","_useState6","contaFluxoAtual","setContaFluxoAtual","_useState7","_useState8","tabela","setTabela","_useState9","_useState10","tabelaAtualizada","setTabelaAtualizada","_useState11","_useState12","renderizarArvore","setRenderizarArvore","_useState13","_useState14","listaDeNosPais","setListaDeNosPais","useEffect","montarTree","obterContasClassificacaoDireto","globalParameter","grupoPlanoConta","id","thenFunction","result","nos","forEach","item","index","tipo","children","filter","possivelFilho","push","listClassificacao","instanceOfFluxoCaixa","object","removerDaLista","element","planoConta","map","react_default","a","createElement","key","conta","codigoReduzido","descricao","analitica","Button","size","color","className","onClick","index_es","icon","UncontrolledTooltip","target","handleCloseModal","alertManager","emit","ACTION_EVENTS","SHOW","message","onOkClick","setValue","undefined","type","AlertType","WARNING_YES_NO","summer_esm","title","useGlobalParameter","dependencies","hasGrupoEmpresaConfig","wikiId","parentNodesIdList","listenerRenderTree","nodeList","labelFunc","node","labelClickFunc","e","preventDefault","contaFluxoCaixa","find","Modal","isOpen","backdrop","centered","toggle","ModalHeader","Form","Card","CardBody","hidden","Row","Col","objectSpread2","validation","required","isPrependLabel","PlanoContaIS","disabled","itemAtual","includes","controladorHabilitarPlanoConta","placeholder","getValues","ERROR","contaFluxoCaixaClassificacao","WARNING","Table","style","textAlign","hover","striped","bordered","width","ModalBody","ModalFooter","handleSubmit","replace","length","salvarClassificacaoDireto","showToast","SUCCESS","triggerValidation","handleClose","empresa","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","__webpack_require__","d","__webpack_exports__","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado","props","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","expressions","alias","conditionalGroup","fieldName","sintetica","filtro","searchViewId","InputType","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","string","cssModule","bool","borderless","dark","responsive","oneOfType","tag","responsiveTag","innerRef","func","Tag","ResponsiveTag","attributes","classes","table","ref","responsiveClassName","defaultProps"],"mappings":"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","file":"static/js/266.7172029b.chunk.js","sourcesContent":["export const ATIVIDADES_OPERACIONAIS = { label: 'Aceite', value: 'ATIVIDADES_OPERACIONAIS', extraField: { intValue: 0 } };\r\nexport const RECEBIMENTOS_OPERACIONAIS = { label: 'Aceite', value: 'RECEBIMENTOS_OPERACIONAIS', extraField: { intValue: 1 } };\r\nexport const RECEBIMENTO_VENDAS = { label: 'Atividades Operacionais', value: 'RECEBIMENTO_VENDAS', extraField: { intValue: 2 } };\r\nexport const CLIENTES = { label: 'Recebimentos Operacionais', value: 'CLIENTES', extraField: { intValue: 3 } };\r\nexport const RECEITA_VENDAS = { label: 'Recebimento de Vendas', value: 'RECEITA_VENDAS', extraField: { intValue: 4 } };\r\nexport const OUTROS_RECEBIMENTOS_OPERACIONAIS = {\r\n  extraField: { intValue: 5 },\r\n  label: 'Clientes',\r\n  value: 'OUTROS_RECEBIMENTOS_OPERACIONAIS',\r\n};\r\nexport const PAGAMENTOS_OPERACIONAIS = { label: 'Receita de Vendas', value: 'PAGAMENTOS_OPERACIONAIS', extraField: { intValue: 6 } };\r\nexport const FORNECEDORES = { label: 'Outros Recebimentos Operacionais', value: 'FORNECEDORES', extraField: { intValue: 7 } };\r\nexport const ESTOQUES = { label: 'Pagamentos Operacionais', value: 'ESTOQUES', extraField: { intValue: 8 } };\r\nexport const FORNECEDORES_PAGAR = { label: 'Fornecedores', value: 'FORNECEDORES_PAGAR', extraField: { intValue: 9 } };\r\nexport const OUTROS_PAGAMENTOS_OPERACIONAIS = { label: 'Estoques', value: 'OUTROS_PAGAMENTOS_OPERACIONAIS', extraField: { intValue: 10 } };\r\nexport const ATIVIDADES_INVESTIMENTO = { label: 'Fornecedores a Pagar', value: 'ATIVIDADES_INVESTIMENTO', extraField: { intValue: 11 } };\r\nexport const ATIVIDADE_FINANCIAMENTO = {\r\n  extraField: { intValue: 12 },\r\n  label: 'Outros Pagamentos Operacionais',\r\n  value: 'ATIVIDADE_FINANCIAMENTO',\r\n};\r\n\r\nexport const CONTA_FLUXO_CAIXA_DIRETO_ENUM_VALUES = [\r\n  ATIVIDADES_OPERACIONAIS,\r\n  RECEBIMENTOS_OPERACIONAIS,\r\n  RECEBIMENTO_VENDAS,\r\n  CLIENTES,\r\n  RECEITA_VENDAS,\r\n  OUTROS_RECEBIMENTOS_OPERACIONAIS,\r\n  PAGAMENTOS_OPERACIONAIS,\r\n  FORNECEDORES,\r\n  ESTOQUES,\r\n  FORNECEDORES_PAGAR,\r\n  OUTROS_PAGAMENTOS_OPERACIONAIS,\r\n  ATIVIDADES_INVESTIMENTO,\r\n  ATIVIDADE_FINANCIAMENTO,\r\n];\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button, Card, CardBody, Col, Form, Modal, ModalBody, ModalFooter, ModalHeader, Row, Table, UncontrolledTooltip } from 'reactstrap';\r\nimport { ACTION_EVENTS, alertManager, AlertType, Box, InputGroupInline, ProcessBar, showToast, SUCCESS, Tree, WindowComponent } from 'summer';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { ContaFluxoCaixa } from '../../../../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaClassificacao } from '../../../../models/dtos/mcg/contaFluxoCaixaClassificacao';\r\nimport {\r\n  ATIVIDADE_FINANCIAMENTO,\r\n  ATIVIDADES_INVESTIMENTO,\r\n  ATIVIDADES_OPERACIONAIS,\r\n  CLIENTES,\r\n  ESTOQUES,\r\n  FORNECEDORES,\r\n  FORNECEDORES_PAGAR,\r\n  OUTROS_PAGAMENTOS_OPERACIONAIS,\r\n  OUTROS_RECEBIMENTOS_OPERACIONAIS,\r\n  PAGAMENTOS_OPERACIONAIS,\r\n  RECEBIMENTO_VENDAS,\r\n  RECEBIMENTOS_OPERACIONAIS,\r\n  RECEITA_VENDAS,\r\n} from '../../../../models/enumerated/mcg/contaFluxoCaixaDiretoEnum';\r\nimport { obterContasClassificacaoDireto, salvarClassificacaoDireto } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\nconst ContaFluxoCaixaDiretoTreeView: FC<ContaFluxoCaixa> = () => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [showModalView, setShowModalView] = useState(false);\r\n  const [listaContaFluxoCaixa, setListaContaFluxoCaixa] = useState<ContaFluxoCaixa[]>([]);\r\n  const { reset, ...formProps } = useForm<ContaFluxoCaixa>({ mode: 'onBlur' });\r\n  const formPropsConta = useForm<ContaFluxoCaixaClassificacao>({ mode: 'onBlur' });\r\n  const [contaFluxoAtual, setContaFluxoAtual] = useState<ContaFluxoCaixa>();\r\n  const [tabela, setTabela] = useState();\r\n  const [tabelaAtualizada, setTabelaAtualizada] = useState();\r\n  const [renderizarArvore, setRenderizarArvore] = useState();\r\n  const [listaDeNosPais, setListaDeNosPais] = useState([]);\r\n\r\n  useEffect(\r\n    () => {\r\n      montarTree();\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const montarTree = () => {\r\n    obterContasClassificacaoDireto(globalReducer.globalParameter.grupoPlanoConta.id, {\r\n      thenFunction: (result: ContaFluxoCaixa[]) => {\r\n        const nos = [];\r\n        result.forEach((item, index) => {\r\n          switch (item.tipo) {\r\n            case RECEBIMENTO_VENDAS.value:\r\n              item.children = result.filter(possivelFilho => possivelFilho.tipo === CLIENTES.value || possivelFilho.tipo === RECEITA_VENDAS.value);\r\n              break;\r\n            case FORNECEDORES.value:\r\n              item.children = result.filter(\r\n                possivelFilho => possivelFilho.tipo === ESTOQUES.value || possivelFilho.tipo === FORNECEDORES_PAGAR.value\r\n              );\r\n              break;\r\n            case RECEBIMENTOS_OPERACIONAIS.value:\r\n              item.children = result.filter(\r\n                possivelFilho => possivelFilho.tipo === RECEBIMENTO_VENDAS.value || possivelFilho.tipo === OUTROS_RECEBIMENTOS_OPERACIONAIS.value\r\n              );\r\n              break;\r\n            case PAGAMENTOS_OPERACIONAIS.value:\r\n              item.children = result.filter(\r\n                possivelFilho => possivelFilho.tipo === FORNECEDORES.value || possivelFilho.tipo === OUTROS_PAGAMENTOS_OPERACIONAIS.value\r\n              );\r\n              break;\r\n            case ATIVIDADES_OPERACIONAIS.value:\r\n              nos.push(index);\r\n              item.children = result.filter(\r\n                possivelFilho => possivelFilho.tipo === RECEBIMENTOS_OPERACIONAIS.value || possivelFilho.tipo === PAGAMENTOS_OPERACIONAIS.value\r\n              );\r\n              break;\r\n            case ATIVIDADES_INVESTIMENTO.value:\r\n            case ATIVIDADE_FINANCIAMENTO.value:\r\n              nos.push(index);\r\n              item.children = item.listClassificacao;\r\n              break;\r\n            default:\r\n              item.children = item.listClassificacao;\r\n              break;\r\n          }\r\n        });\r\n        setListaContaFluxoCaixa(result);\r\n        setRenderizarArvore(!renderizarArvore);\r\n        setListaDeNosPais(nos);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    return (e, id) => {\r\n      e.preventDefault();\r\n      const contaFluxoCaixa = listaContaFluxoCaixa.find(element => element.id === id);\r\n      if (contaFluxoCaixa && instanceOfFluxoCaixa(contaFluxoCaixa)) {\r\n        reset(contaFluxoCaixa);\r\n        setContaFluxoAtual(contaFluxoCaixa);\r\n        setShowModalView(true);\r\n      }\r\n    };\r\n  };\r\n\r\n  const instanceOfFluxoCaixa = (object: any): object is ContaFluxoCaixa => {\r\n    return 'listClassificacao' in object;\r\n  };\r\n\r\n  const removerDaLista = (id: number) => {\r\n    return () => {\r\n      contaFluxoAtual.listClassificacao = contaFluxoAtual.listClassificacao.filter(element => element.planoConta.id !== id);\r\n      setTabelaAtualizada(!tabelaAtualizada);\r\n    };\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setTabela(\r\n        contaFluxoAtual ? (\r\n          contaFluxoAtual.listClassificacao.map((item, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <td>{item.planoConta.conta}</td>\r\n                <td>{item.planoConta.codigoReduzido}</td>\r\n                <td>{item.planoConta.descricao}</td>\r\n                <td>{item.planoConta.analitica ? 'Sim' : 'Não'}</td>\r\n                <td>\r\n                  <Button id=\"removeButton\" size=\"sm\" color=\"link\" className=\"text-danger\" onClick={removerDaLista(item.planoConta.id)}>\r\n                    <FontAwesomeIcon icon=\"trash\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"removeButton\">Clique aqui para remover</UncontrolledTooltip>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td />\r\n          </tr>\r\n        )\r\n      );\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [contaFluxoAtual, tabelaAtualizada]\r\n  );\r\n\r\n  const addNaLista = () => {\r\n    const { planoConta } = formPropsConta.getValues();\r\n\r\n    if (planoConta) {\r\n      if (contaFluxoAtual.listClassificacao.find(element => element.planoConta.id === planoConta.id)) {\r\n        alertManager.emit(ACTION_EVENTS.SHOW, {\r\n          message: 'Conta ' + planoConta.conta + ' - ' + planoConta.descricao + ' já foi adicionada na lista.',\r\n          type: AlertType.ERROR,\r\n        });\r\n      } else {\r\n        const contaFluxoCaixaClassificacao: ContaFluxoCaixaClassificacao = {\r\n          planoConta,\r\n        };\r\n        contaFluxoAtual.listClassificacao.push(contaFluxoCaixaClassificacao);\r\n        formPropsConta.setValue('planoConta', undefined);\r\n        setTabelaAtualizada(!tabelaAtualizada);\r\n      }\r\n    } else {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Selecione uma conta',\r\n        type: AlertType.WARNING,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // regex verifica se o campo descricao está vazio ou se contém somente espaços em branco\r\n    if (formProps.getValues().descricao.replace(/\\s/g, '').length) {\r\n      contaFluxoAtual.descricao = formProps.getValues().descricao;\r\n      salvarClassificacaoDireto(contaFluxoAtual, {\r\n        thenFunction: () => {\r\n          showToast('Registro alterado com sucesso!', SUCCESS);\r\n          setShowModalView(false);\r\n          formPropsConta.setValue('planoConta', undefined);\r\n          montarTree();\r\n        },\r\n      });\r\n    } else {\r\n      formProps.triggerValidation('descricao');\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: 'As alterações da página atual serão perdidas, deseja continuar?',\r\n      onOkClick: () => {\r\n        setShowModalView(false);\r\n        formPropsConta.setValue('planoConta', undefined);\r\n        montarTree();\r\n      },\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const controladorHabilitarPlanoConta = (itemAtual: ContaFluxoCaixa): boolean => {\r\n    let result: boolean;\r\n\r\n    const enumsDesabilitados = [\r\n      CLIENTES.value,\r\n      RECEITA_VENDAS.value,\r\n      OUTROS_RECEBIMENTOS_OPERACIONAIS.value,\r\n      ESTOQUES.value,\r\n      FORNECEDORES_PAGAR.value,\r\n      OUTROS_PAGAMENTOS_OPERACIONAIS.value,\r\n      ATIVIDADES_INVESTIMENTO.value,\r\n      ATIVIDADE_FINANCIAMENTO.value,\r\n    ];\r\n\r\n    result = !enumsDesabilitados.includes(itemAtual.tipo);\r\n\r\n    return result;\r\n  };\r\n\r\n  const retornoLabelFunc = () => {\r\n    return (node: any) => {\r\n      return (\r\n        <div className={node.planoConta ? null : 'font-weight-bold'}>\r\n          {node.planoConta ? node.planoConta.conta + ' -> ' + node.planoConta.descricao : node.descricao}\r\n        </div>\r\n      );\r\n    };\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Classificação das Contas de Fluxo de Caixa - Direto\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[() => hasGrupoEmpresaConfig(globalReducer.globalParameter)]}\r\n      wikiId={787}\r\n    >\r\n      <Box>\r\n        <Tree\r\n          parentNodesIdList={listaDeNosPais}\r\n          listenerRenderTree={renderizarArvore}\r\n          nodeList={listaContaFluxoCaixa}\r\n          labelFunc={retornoLabelFunc()}\r\n          labelClickFunc={handleOpenModal()}\r\n        />\r\n      </Box>\r\n      <Modal isOpen={showModalView} backdrop=\"static\" centered={true} toggle={handleCloseModal} size=\"lg\">\r\n        <ModalHeader toggle={handleCloseModal}>Fluxo de Caixa Direto - Classificação Contas</ModalHeader>\r\n        <Form>\r\n          <Card>\r\n            <CardBody>\r\n              <InputGroupInline id=\"id\" formProps={formProps} hidden={true} />\r\n              <Row>\r\n                <Col>\r\n                  <InputGroupInline\r\n                    formProps={{ ...formProps, validation: { required: true } }}\r\n                    id=\"descricao\"\r\n                    isPrependLabel={true}\r\n                    label=\"Descrição\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col className=\"col-10\">\r\n                  <PlanoContaIS\r\n                    disabled={contaFluxoAtual ? controladorHabilitarPlanoConta(contaFluxoAtual) : true}\r\n                    id=\"planoConta\"\r\n                    formProps={{ ...formPropsConta, validation: { required: true } }}\r\n                    label=\"Conta\"\r\n                    placeholder=\"Informe a Conta\"\r\n                  />\r\n                </Col>\r\n                <Col className=\"col-2\">\r\n                  <Button id=\"addButton\" size=\"lg\" color=\"link\" className=\"text-success\" onClick={addNaLista}>\r\n                    <FontAwesomeIcon icon=\"plus-circle\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"addButton\">Clique aqui para adicionar</UncontrolledTooltip>\r\n                </Col>\r\n              </Row>\r\n              <Table style={{ textAlign: 'center' }} hover={true} striped={true} bordered={true}>\r\n                <thead>\r\n                  <tr>\r\n                    <th style={{ width: '25%' }}>Conta</th>\r\n                    <th style={{ width: '15%' }}>C.R.</th>\r\n                    <th style={{ width: '30%' }}>Descrição</th>\r\n                    <th style={{ width: '15%' }}>Analítica</th>\r\n                    <th style={{ width: '15%' }}>Ações</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{tabela}</tbody>\r\n              </Table>\r\n            </CardBody>\r\n          </Card>\r\n        </Form>\r\n        <ModalBody />\r\n        <ModalFooter>\r\n          <Row>\r\n            <Col>\r\n              <ProcessBar handleSubmit={handleSubmit} handleClose={handleCloseModal} />\r\n            </Col>\r\n          </Row>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ContaFluxoCaixaDiretoTreeView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;"],"sourceRoot":""}