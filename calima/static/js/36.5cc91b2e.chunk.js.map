{"version":3,"sources":["models/enumerated/mcg/planoContaNaturezaContaEnum.ts","views/components/mcg/planoContaReferencialIS/PlanoContaReferencialIS.tsx","views/pages/mcg/planoConta/PlanoContaSearchView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","dependencies/grupoPlanoContasDependency.ts","models/dtos/mcg/planoContaReferencial.ts","../node_modules/reactstrap/es/CardDeck.js"],"names":["__webpack_require__","d","__webpack_exports__","PLANO_CONTA_NATUREZA_CONTA_ENUM_VALUES","label","value","PlanoContaReferencialIS","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","isPrependLabel","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","placeholder","type","InputType","INPUT_SEARCH","defaultSorted","order","OrderType","ASC","cellEditProps","blurToSave","mode","ClickEnum","CLICK","PlanoContaSearchView","globalReducer","useSelector","state","formProps","useForm","defaultValues","grupoPlanoConta","globalParameter","extraFormProps","_useState","useState","_useState2","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","selectedItems","setSelectedItems","_useState3","_useState4","selectedItemsModal","setSelectedItemsModal","_useState5","_useState6","showReferenciarConta","setShowReferenciarConta","_useState7","_useState8","showAlterarLote","setShowAlterarLote","_useState9","_useState10","listaContas","setListaContas","searchRef","useRef","editable","sort","boolColumn","columnsAlterarLote","enumColumn","remove","length","find","it","analitica","alertManager","emit","ACTION_EVENTS","SHOW","message","onNoClick","apagarContas","onOkClick","AlertType","WARNING_YES_NO","showToast","ERROR","apagarFilha","removeList","usuario","errorFunction","mensagem","thenFunction","current","notifySearchExpressionChange","INFORMATION","apagarContaMae","setTimeout","removerTodos","removerTodosPlanosConta","getValues","id","erros","replace","split","react__WEBPACK_IMPORTED_MODULE_3___default","summer__WEBPACK_IMPORTED_MODULE_16__","headerMessage","filter","index","selectRow","bgColor","SelectModeEnum","CHECKBOX","onSelect","row","isSelect","onSelectAll","rows","selectRowModal","clickToSelect","handleCloseReferenciarConta","handleOpenReferenciarConta","reset","isSubGrupo","onChangeSubGrupo","handleCloseAlterarLote","handleOpenAlterarLote","listSubGrupo","result","callReferenciarContas","ids","referenciarContas","planoContaReferencial","planoContaReferencialECF","showAlert","alterarLote","alterarPlanoContaNaturezaConfig","configGeralResultadoExercicio","removerReferencia","push","map","desvincularContas","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","hasGrupoPlanoContas","wikiId","className","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_24__","hideExtraFields","customHeaderContent","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","onClick","color","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__","icon","searchDataGridProps","useDefaultSelectRow","concat","formatter","cell","mcgPlanoConta","searchExpressionsFull","defaultExpressions","expressions","filtroContaResultado","fieldName","extraData","getExtraData","hideRemoveButton","ref","reactstrap__WEBPACK_IMPORTED_MODULE_10__","isOpen","backdrop","centered","toggle","size","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","_components_mcg_planoContaReferencialIS_PlanoContaReferencialIS__WEBPACK_IMPORTED_MODULE_26__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_25__","onChange","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_4___default","keyField","data","responsive","striped","bootstrap4","tabIndexCell","bordered","condensed","reactstrap__WEBPACK_IMPORTED_MODULE_15__","handleClose","handleSubmit","inputDropDownProps","optionsProvider","DROP_DOWN","empresa","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","listaPlanoConta","planoConta","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","enumPlanoContaNaturezaConta","prepararContaResultado","PlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","searchExpressions","alias","conditionalGroup","sintetica","forEach","filtro","GrupoPlanoContaIS","mascara","digitoAtivo","digitoPassivo","digitoReceita","digitoDespesa","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","CardDeck","Tag","attributes","classes","defaultProps"],"mappings":"gGAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAO,MAUMA,EAAyC,CAVhB,CAAEC,MAAO,yBAA0BC,MAAO,GACxC,CAAED,MAAO,gCAAiCC,MAAO,GAC5C,CAAED,MAAO,wCAAsCC,MAAO,GAC5D,CAAED,MAAO,0BAA2BC,MAAO,GAC1C,CAAED,MAAO,2BAA4BC,MAAO,GACnD,CAAED,MAAO,6BAAwBC,MAAO,GACjC,CAAED,MAAO,oCAA+BC,MAAO,IACxD,CAAED,MAAO,qBAAsBC,MAAO,IAC/C,CAAED,MAAO,SAAUC,MAAO,mFC+BjCC,IAnCiCC,IAE5CC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,GACMN,EADN,CAEEO,gBAAgB,EAChBC,iBAAgBH,OAAAI,EAAA,EAAAJ,QAAAI,EAAA,EAAAJ,CAAA,GACXL,EAAMQ,kBADK,IAEdE,QAAS,CACP,CACEC,UAAW,QACXC,KAAM,SAER,CACED,UAAW,YACXC,KAAM,mBAER,CACED,UAAW,YACXC,KAAM,gBAER,CACED,UAAW,0BACXC,KAAM,sBAGVC,aAAcC,IACdC,aAAc,oCAEhBlB,MAAOG,EAAMH,MAAQG,EAAMH,MAAQ,8BACnCmB,YAAahB,EAAMgB,YAAchB,EAAMgB,YAAc,wCACrDC,KAAMC,IAAUC,0TCmBtB,MAAMC,EAAoC,CACxC,CACET,UAAW,QACXU,MAAOC,IAAUC,MAIfC,EAA+B,CACnCC,YAAY,EACZC,KAAMC,IAAUC,OAkiBHC,UAhhB0E7B,KACvF,MAAM8B,EAAgBC,YAAmCC,GAASA,EAAMF,eAClEG,EAAYC,YAAoB,CAAEC,cAAe,CAAEC,gBAAiBN,EAAcO,gBAAgBD,iBAAmBV,KAAM,WAC3HY,EAAiBJ,YAA8B,CAAER,KAAM,WAHmCa,EAKtDC,mBAAuB,IAL+BC,EAAApC,OAAAqC,EAAA,EAAArC,CAAAkC,EAAA,GAKzFI,EALyFF,EAAA,GAK1EG,EAL0EH,EAAA,GAAAI,EAM5CL,mBAAuB,IANqBM,EAAAzC,OAAAqC,EAAA,EAAArC,CAAAwC,EAAA,GAMzFE,EANyFD,EAAA,GAMrEE,EANqEF,EAAA,GAAAG,EAOxCT,qBAPwCU,EAAA7C,OAAAqC,EAAA,EAAArC,CAAA4C,EAAA,GAOzFE,EAPyFD,EAAA,GAOnEE,EAPmEF,EAAA,GAAAG,EAQlDb,qBARkDc,EAAAjD,OAAAqC,EAAA,EAAArC,CAAAgD,EAAA,GAQzFE,EARyFD,EAAA,GAQxEE,EARwEF,EAAA,GAAAG,EAS1DjB,mBAAuB,IATmCkB,EAAArD,OAAAqC,EAAA,EAAArC,CAAAoD,EAAA,GASzFE,EATyFD,EAAA,GAS5EE,EAT4EF,EAAA,GAU1FG,GAAYC,mBAEZpD,GAA0B,CAC9B,CACEC,UAAW,QACXoD,UAAU,EACVC,MAAM,EACNpD,KAAM,SAERqD,aAAW,CACTtD,UAAW,YACXoD,UAAU,EACVC,MAAM,EACNpD,KAAM,iBAER,CACED,UAAW,iBACXoD,UAAU,EACVC,MAAM,EACNpD,KAAM,QAER,CACED,UAAW,YACXoD,UAAU,EACVC,MAAM,EACNpD,KAAM,oBAIJsD,GAAqC,CACzCC,aACE,CACExD,UAAW,8CACXC,KAAM,qBAERhB,MAyBEwE,GAAS,KACTzB,EAAc0B,OAAS,EACD1B,EAAc2B,KAAKC,IAAOA,EAAGC,WAGnDC,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QACE,qJACFC,UAAW,IAAMC,IAAa,GAC9BC,UAAW,IAAMD,IAAa,GAC9B9D,KAAMgE,IAAUC,iBAGlBH,IAAa,GAGfI,aAAU,mCAAoCC,MAI5CL,GAAgBM,IAChBA,EACFC,aAAW3C,GAAe,EAAMb,EAAcO,gBAAgBkD,QAAS,CACrEC,cAAeC,IACbhB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAASY,EACTxE,KAAMgE,IAAUG,SAGpBM,aAAc,KACZ7B,GAAU8B,QAAQC,+BAClBhD,EAAiB,IACjB6B,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,mCACT5D,KAAMgE,IAAUY,iBAKtBC,MAIEA,GAAiB,KACrBC,WAAW,KACTtB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,6FACTG,UAAW,KACTM,aAAW3C,GAAe,EAAOb,EAAcO,gBAAgBkD,QAAS,CACtEC,cAAeC,IACbhB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAASY,EACTxE,KAAMgE,IAAUG,SAGpBM,aAAc,KACZ7B,GAAU8B,QAAQC,+BAClBhD,EAAiB,IACjB6B,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,mCACT5D,KAAMgE,IAAUY,kBAKxB5E,KAAMgE,IAAUC,kBAEjB,IAGCc,GAAe,KACnBvB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,0GACTG,UAAW,IACTiB,aAAwBhE,EAAUiE,YAAY9D,gBAAgB+D,GAAIrE,EAAcO,gBAAgBkD,QAAS,CACvGC,cAAeC,IACb,MAAMW,EAAQX,EAASY,QAAQ,cAAe,IAAIC,MAAM,KACxD7B,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS0B,EAAArG,EAAAC,cAACqG,EAAA,EAAD,CAAUC,cAAeL,EAAM,GAAIA,MAAOA,EAAMM,OAAO,CAACnC,EAAIoC,IAAoB,IAAVA,KAC/E1F,KAAMgE,IAAUG,SAGpBM,aAAc,KACZ7B,GAAU8B,QAAQC,+BAClBhD,EAAiB,IACjB6B,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,mCACT5D,KAAMgE,IAAUY,iBAIxB5E,KAAMgE,IAAUC,kBAyCd0B,GAA4B,CAChCC,QAAS,UACTnF,KAAMoF,KAAeC,SACrBC,SAnBqB,CAACC,EAAKC,KAC3BtE,EAAiBsE,EAAW,IAAIvE,EAAesE,GAAOtE,EAAc+D,OAAOnC,GAAMA,EAAG4B,KAAOc,EAAId,MAoB/FgB,YAjBwB,CAACD,EAAUE,KACnCxE,EAAiBsE,EAAWE,EAAO,MAmB/BC,GAAiB,CACrBC,eAAe,EACf5F,KAAMoF,KAAeC,SACrBC,SAnB0B,CAACC,EAAKC,KAChClE,EAAsBkE,EAAW,IAAInE,EAAoBkE,GAAOlE,EAAmB2D,OAAOnC,GAAMA,EAAG4B,KAAOc,EAAId,MAmB9GgB,YAhB6B,CAACD,EAAUE,KACxCpE,EAAsBkE,EAAWE,EAAO,MAkBpCG,GAA8B,KAClCnE,GAAwB,IAGpBoE,GAA6B,KACjClF,EAAemF,MAAM,CAAEC,WAAY/E,EAAcA,EAAc0B,OAAS,KACxEsD,KACAvE,GAAwB,IAGpBwE,GAAyB,KAC7BpE,GAAmB,IAGfqE,GAAwB,KAC5BvF,EAAemF,MAAM,CAAEC,WAAY/E,EAAcA,EAAc0B,OAAS,KACxEsD,KACAnE,GAAmB,IAGfmE,GAAmB,KAAM,MACrBD,EAAepF,EAAe4D,YAA9BwB,WACJA,IAAeA,EAAWlD,UAC5BsD,YAAaJ,EAAY,CACvBhC,aAAcqC,IACZnE,EAAemE,MAInBnE,EAAe,KAiCboE,GAAyBC,IAC7BC,aACED,EACA3F,EAAe4D,YAAYiC,uBAAyB7F,EAAe4D,YAAYiC,sBAAsBhC,GACrG7D,EAAe4D,YAAYkC,0BAA4B9F,EAAe4D,YAAYkC,yBAAyBjC,GAC3G,CACEX,cAAeC,IACbN,aAAUM,EAAUL,MAEtBM,aAAc,KACZjB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,oCACT5D,KAAMgE,IAAUY,cAElBhC,GAAU8B,QAAQC,+BAClB2B,SA+BFc,GAAajC,IACjB3B,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS0B,EAAArG,EAAAC,cAACqG,EAAA,EAAD,CAAUJ,MAAOA,IAC1BnF,KAAMgE,IAAUG,SAIdkD,GAAeL,IACnBM,YAAgCN,EAAK3F,EAAe4D,YAAYsC,8BAA+B,CAC7FhD,cAAeC,IACbN,aAAUM,EAAUL,MAEtBM,aAAc,KACZjB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,oCACT5D,KAAMgE,IAAUY,cAElBhC,GAAU8B,QAAQC,+BAClBgC,SAeAa,GAAoB,KACxB,IAAIR,EAAgB,GAEhB3F,EAAe4D,YAAYwB,aACzBpF,EAAe4D,YAAYwB,WAAWlD,UACxCyD,EAAIS,KAAKpG,EAAe4D,YAAYwB,WAAWvB,IAE/C8B,EAAMlF,EAAmB4F,IAAIpE,GAAMA,EAAG4B,KAItC8B,EAAI5D,OAAS,GACfuE,YACEX,EACA3F,EAAe4D,YAAYiC,uBAAyB7F,EAAe4D,YAAYiC,sBAAsBhC,GACrG7D,EAAe4D,YAAYkC,0BAA4B9F,EAAe4D,YAAYkC,yBAAyBjC,GAC3G,CACEX,cAAeC,IACbN,aAAUM,EAAUL,MAEtBM,aAAc,KACZjB,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QAAS,wCACT5D,KAAMgE,IAAUY,cAElBhC,GAAU8B,QAAQC,mCAkB5B,OACEW,EAAArG,EAAAC,cAACqG,EAAA,GAAD,CACEqC,MAAM,qCACNC,oBAAoB,EACpBzG,gBAAiBP,EAAcO,gBAC/B0G,aAAc,CACZ,IAAMC,YAAWlH,EAAcO,iBAC/B,IAAM4G,YAAcnH,EAAcO,iBAClC,IAAM6G,YAAsBpH,EAAcO,iBAC1C,IAAM8G,YAAoBrH,EAAcO,kBAE1C+G,OAAQ,MAER7C,EAAArG,EAAAC,cAAA,OAAKkJ,UAAU,UACb9C,EAAArG,EAAAC,cAACmJ,EAAA,EAAD,CAAmBnD,GAAG,kBAAkBlE,UAAWA,KAErDsE,EAAArG,EAAAC,cAACqG,EAAA,EAADnG,OAAAC,OAAA,IACQN,EAAMuJ,iBAAmB,CAAEC,oBA3PnCjD,EAAArG,EAAAC,cAACsJ,EAAA,EAAD,KACElD,EAAArG,EAAAC,cAACuJ,EAAA,EAAD,KACEnD,EAAArG,EAAAC,cAACwJ,EAAA,EAAD,CAAQC,QAASxF,GAAQyF,MAAM,SAASR,UAAU,aAChD9C,EAAArG,EAAAC,cAAC2J,EAAA,EAAD,CAAiBC,KAAK,iBADxB,yBAGAxD,EAAArG,EAAAC,cAACwJ,EAAA,EAAD,CAAQC,QAAS5D,GAAc6D,MAAM,UAAUR,UAAU,aACvD9C,EAAArG,EAAAC,cAAC2J,EAAA,EAAD,CAAiBC,KAAK,cADxB,kBAGAxD,EAAArG,EAAAC,cAACwJ,EAAA,EAAD,CAAQC,QAASpC,GAA4BqC,MAAM,QAAQR,UAAU,aACnE9C,EAAArG,EAAAC,cAAC2J,EAAA,EAAD,CAAiBC,KAAK,QADxB,uBAGAxD,EAAArG,EAAAC,cAACwJ,EAAA,EAAD,CAAQC,QAAS/B,GAAuBgC,MAAM,UAAUR,UAAU,aAChE9C,EAAArG,EAAAC,cAAC2J,EAAA,EAAD,CAAiBC,KAAK,UADxB,uBAiPE/J,EACAA,EAAMgK,oBAHZ,CAIEnJ,aAAcC,MACRd,EAAMiK,qBAAuB,CAAErD,cALvC,CAMElG,QAASA,GAAQwJ,OAtXmB,CACxC,CACEvJ,UAAW,8BACXoD,UAAU,EACVoG,UAAW,CAACC,EAAMnD,IACTA,EAAIoD,eAAiBpD,EAAIoD,cAAclC,sBAAwB,OAAS,SAEjFnE,MAAM,EACNpD,KAAM,4CAER,CACED,UAAW,iCACXoD,UAAU,EACVoG,UAAW,CAACC,EAAMnD,IACTA,EAAIoD,eAAiBpD,EAAIoD,cAAcjC,yBAA2B,OAAS,SAEpFpE,MAAM,EACNpD,KAAM,qDAsWJY,cAAeA,EACfJ,cAAeA,EACfkJ,sBApCiBC,IACrB,MAAMC,EAAkC,IAAID,GAO5C,OANAC,EAAY9B,KAAK,CACf8B,YAAaxK,EAAMyK,qBAAuBzK,EAAMyK,qBAAuB,GACvEC,UAAW,qBACX5K,MAAOmC,EAAUiE,YAAY9D,gBAAgB+D,KAGxCqE,GA6BHG,UAAStK,OAAAI,EAAA,EAAAJ,QAAAI,EAAA,EAAAJ,CAAA,GAAOuK,aAAa5K,EAAO,qBAAsBc,MAAjD,IAA8D+J,kBAAkB,IACzFC,IAAKjH,MAOP0C,EAAArG,EAAAC,cAAC4K,EAAA,EAAD,CAAOC,OAAQ7H,EAAsB8H,SAAS,SAASC,UAAU,EAAMC,OAAQ5D,GAA6B6D,KAAK,MAC/G7E,EAAArG,EAAAC,cAACkL,EAAA,EAAD,CAAaF,OAAQ5D,IAArB,+BACAhB,EAAArG,EAAAC,cAACmL,EAAA,EAAD,KACE/E,EAAArG,EAAAC,cAACoL,EAAA,EAAD,KACEhF,EAAArG,EAAAC,cAACqL,EAAA,EAAD,KACEjF,EAAArG,EAAAC,cAACsL,EAAA,EAAD,CAAyBtF,GAAG,wBAAwBlE,UAAWK,EAAgBzC,MAAM,sCACrF0G,EAAArG,EAAAC,cAACsL,EAAA,EAAD,CACEtF,GAAG,2BACHlE,UAAWK,EACXzC,MAAM,iDAER0G,EAAArG,EAAAC,cAACuL,EAAA,EAAD,CACEvF,GAAG,aACHlE,UAAWK,EACXzC,MAAM,qCACNmB,YAAY,kBACZ2K,SAAUhE,KAEZpB,EAAArG,EAAAC,cAAA,OAAKkJ,UAAU,cACb9C,EAAArG,EAAAC,cAACyL,EAAA1L,EAAD,CACE2L,SAAS,KACTC,KAAMnI,EACNiD,UAAWS,GACX3G,QAASA,GACTqL,YAAY,EACZC,SAAS,EACTC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAW,KAGf7F,EAAArG,EAAAC,cAAA,WACAoG,EAAArG,EAAAC,cAAA,WACAoG,EAAArG,EAAAC,cAACkM,EAAA,EAAD,KACE9F,EAAArG,EAAAC,cAACwJ,EAAA,EAAD,CAAQC,QA1Ha,KACjCnF,KAAaC,KAAKC,IAAcC,KAAM,CACpCC,QACE,iPAEFG,UAAW,IAAMyD,KACjBxH,KAAMgE,IAAUC,kBAoHuC2E,MAAM,SACjDtD,EAAArG,EAAAC,cAAC2J,EAAA,EAAD,CAAiBC,KAAK,UADxB,iCAGAxD,EAAArG,EAAAC,cAACqG,EAAA,EAAD,CAAY8F,YAAa/E,GAA6BgF,aA/N/B,KACnC,MAAMnG,EAAQ,GACd,IAAI6B,EAAgB,GAEhB3F,EAAe4D,YAAYwB,WACzBpF,EAAe4D,YAAYwB,WAAWlD,UACxCyD,EAAIS,KAAKpG,EAAe4D,YAAYwB,WAAWvB,IAEb,IAA9BpD,EAAmBsB,OACrB+B,EAAMsC,KAAK,8DAEXT,EAAMlF,EAAmB4F,IAAIpE,GAAMA,EAAG4B,IAI1CC,EAAMsC,KAAK,sDAGRpG,EAAe4D,YAAYiC,uBAA0B7F,EAAe4D,YAAYkC,0BACnFhC,EAAMsC,KAAK,wEAGTtC,EAAM/B,OAAS,EACjBgE,GAAUjC,GAEV4B,GAAsBC,WA6MtB1B,EAAArG,EAAAC,cAAC4K,EAAA,EAAD,CAAOC,OAAQzH,EAAiB0H,SAAS,SAASC,UAAU,EAAMC,OAAQvD,GAAwBwD,KAAK,MACrG7E,EAAArG,EAAAC,cAACkL,EAAA,EAAD,CAAaF,OAAQvD,IAArB,mCACArB,EAAArG,EAAAC,cAACmL,EAAA,EAAD,KACE/E,EAAArG,EAAAC,cAACoL,EAAA,EAAD,KACEhF,EAAArG,EAAAC,cAACqL,EAAA,EAAD,KACEjF,EAAArG,EAAAC,cAACuL,EAAA,EAAD,CACEvF,GAAG,aACHlE,UAAWK,EACXzC,MAAM,qCACNmB,YAAY,kBACZ2K,SAAUhE,KAEZpB,EAAArG,EAAAC,cAACqG,EAAA,EAAD,CACEL,GAAG,gCACHtG,MAAM,wDACNU,gBAAgB,EAChB0B,UAAWK,EACXkK,mBAAoB,CAClBC,gBAAiB7M,KAEnBqB,KAAMC,IAAUwL,YAElBnG,EAAArG,EAAAC,cAAA,OAAKkJ,UAAU,cACb9C,EAAArG,EAAAC,cAACyL,EAAA1L,EAAD,CACE2L,SAAS,KACTxC,UAAU,eACVyC,KAAMnI,EACNiD,UAAWS,GACX3G,QAASA,GAAQwJ,OAAOhG,IACxB6H,YAAY,EACZC,SAAS,EACTC,YAAY,EACZC,cAAc,EACdC,UAAU,EACVC,WAAW,KAGf7F,EAAArG,EAAAC,cAACkM,EAAA,EAAD,KACE9F,EAAArG,EAAAC,cAACqG,EAAA,EAAD,CAAY8F,YAAa1E,GAAwB2E,aA1N/B,KAC9B,MAAMnG,EAAQ,GACd,IAAI6B,EAAgB,GAEhB3F,EAAe4D,YAAYwB,WACzBpF,EAAe4D,YAAYwB,WAAWlD,UACxCyD,EAAIS,KAAKpG,EAAe4D,YAAYwB,WAAWvB,IAEb,IAA9BpD,EAAmBsB,OACrB+B,EAAMsC,KAAK,8DAEXT,EAAMlF,EAAmB4F,IAAIpE,GAAMA,EAAG4B,IAI1CC,EAAMsC,KAAK,sDAGTtC,EAAM/B,OAAS,EACjBgE,GAAUjC,GAEVkC,GAAYL,gDC/YX,SAASe,EAAW3G,GACzB,IAAI0F,EAAS,KAIb,OAHK1F,EAAgBsK,UACnB5E,EAAS,kDAEJA,EALTtI,EAAAC,EAAAC,EAAA,sBAAAqJ,sCCAO,SAASE,EAAsB7G,GACpC,IAAI0F,EAAS,KAcb,OAPG1F,EAAgBsK,SAChBtK,EAAgBsK,QAAQC,iBAAiBC,oBACzCxK,EAAgBsK,QAAQG,aAAaD,qBAEtC9E,EARA,oLAWKA,EAfTtI,EAAAC,EAAAC,EAAA,sBAAAuJ,sCCAO,SAASD,EAAc5G,GAC5B,IAAI0F,EAAS,KAMb,OALK1F,EAAgB0K,aACnBhF,EACE,0LAGGA,EAPTtI,EAAAC,EAAAC,EAAA,sBAAAsJ,6lFC+DA,SAAS+D,IACP,OAAOC,aAAO,QAGT,SAASC,EAA+BC,EAA4CC,GACzFC,aAAKL,IAAaM,KAAkC,kCAAmCH,GAAuBC,GAGzG,SAASG,EAAuBC,EAAwDJ,GAC7FC,aAAKL,IAAaM,KAAkC,0BAA2BE,GAA4BJ,GAGtG,SAASK,EAAYC,EAA4BN,GACtDC,aAAKL,IAAaM,KAAuB,YAAaI,GAAgBN,GAGjE,SAASO,EAAsB7B,EAAoCsB,GACxE,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,aAAcC,OAAOjC,EAAKa,QAAQxG,KACtDyH,EAAaE,OAAO,qBAAsBC,OAAOjC,EAAKkC,qBACtDJ,EAAaE,OAAO,8BAA+BC,OAAOjC,EAAKmC,8BAJ2C,IAAAC,EAAAC,EAAA9N,OAAA+N,EAAA,EAAA/N,CAMpFyL,EAAKuC,UAN+E,IAM1G,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MAAqC,OAA1BC,EAA0BP,EAAApO,MACnC8N,EAAaE,OAAO,WAAYW,EAAQC,KAAMD,EAAQE,cAPkD,MAAAC,GAAAT,EAAAU,EAAAD,GAAA,QAAAT,EAAAW,IAU1GzB,aAAKL,IAAaM,KAAoB,yBAA0BM,GAAeR,GAG1E,SAAS2B,EAA4BjD,EAA0CsB,GACpF,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,aAAcC,OAAOjC,EAAKa,QAAQxG,KAFgE,IAAA6I,EAAAC,EAAA5O,OAAA+N,EAAA,EAAA/N,CAIhGyL,EAAKuC,UAJ2F,IAItH,IAAAY,EAAAX,MAAAU,EAAAC,EAAAV,KAAAC,MAAqC,OAA1BC,EAA0BO,EAAAlP,MACnC8N,EAAaE,OAAO,WAAYW,EAAQC,KAAMD,EAAQE,cAL8D,MAAAC,GAAAK,EAAAJ,EAAAD,GAAA,QAAAK,EAAAH,IAOtHzB,aAAKL,IAAaM,KAAoB,+BAAgCM,GAAeR,GAGhF,SAAS8B,EAAqBpD,EAAmCsB,GACtE,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,2BAA4BC,OAAOjC,EAAKqD,sBAAsBhJ,KAFsB,IAAAiJ,EAAAC,EAAAhP,OAAA+N,EAAA,EAAA/N,CAIlFyL,EAAKuC,UAJ6E,IAIxG,IAAAgB,EAAAf,MAAAc,EAAAC,EAAAd,KAAAC,MAAqC,OAA1BC,EAA0BW,EAAAtP,MACnC8N,EAAaE,OAAO,WAAYW,EAAQC,KAAMD,EAAQE,cALgD,MAAAC,GAAAS,EAAAR,EAAAD,GAAA,QAAAS,EAAAP,IAOxGzB,aAAKL,IAAaM,KAAoB,wBAAyBM,GAAeR,GAGzE,SAASkC,EAAsBxD,EAAoCsB,GACxE,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,YAAaC,OAAOjC,EAAKyD,YAC7C3B,EAAaE,OAAO,4BAA6BC,OAAOjC,EAAK0D,uBAAuBrJ,KAHsB,IAAAsJ,EAAAC,EAAArP,OAAA+N,EAAA,EAAA/N,CAKpFyL,EAAKuC,UAL+E,IAK1G,IAAAqB,EAAApB,MAAAmB,EAAAC,EAAAnB,KAAAC,MAAqC,OAA1BC,EAA0BgB,EAAA3P,MACnC8N,EAAaE,OAAO,WAAYW,EAAQC,KAAMD,EAAQE,cANkD,MAAAC,GAAAc,EAAAb,EAAAD,GAAA,QAAAc,EAAAZ,IAQ1GzB,aAAKL,IAAaM,KAAoB,yBAA0BM,GAAeR,GAG1E,SAASuC,EAAkBC,EAA0CxC,GAC1EC,aAAKL,IAAaM,KAAoB,qBAAsBsC,GAAsBxC,GAG7E,SAASyC,EAAmBC,EAAiD1C,GAClFC,aAAKL,IAAaM,KAAoB,sBAAuBwC,GAA4B1C,GAGpF,SAAS2C,EAA0BR,EAAmBnC,GAC3DC,aAAKL,IAAagD,IAAgB,8BAAgCT,GAAYnC,GAGzE,SAAS6C,EAAyBvC,EAAyCN,GAChFC,aAAKL,IAAaM,KAAqC,4BAA6BI,GAAgBN,GAG/F,SAAS8C,EACdC,EACAC,EACAhD,GAEAC,aACEL,IAAaM,KAAoC,kBAAmB,CAAE6C,6BAA4BC,UAClGhD,GAIG,SAASiD,EAA4BC,EAAsBlD,GAChEC,aAAKL,IAAagD,IAAU,gCAAkCM,GAAelD,GAGxE,SAASmD,EAAiCC,EAA8CpD,GAC7FC,aAAKL,IAAaM,KAAa,wCAAyCkD,GAAwBpD,GAG3F,SAASqD,EAAiCC,EAAsCtD,GACrFC,aAAKL,IAAaM,KAAc,oCAAqCoD,GAAoBtD,GAGpF,SAASuD,EAAoCC,EAA4CxD,GAC9FC,aAAKL,IAAaM,KAAc,uCAAwCsD,GAAuBxD,GAG1F,SAASyD,EAA2BC,EAAsD1D,GAC/FC,aAAKL,IAAaM,KAAc,8BAA+BwD,GAA4B1D,GAGtF,SAAS2D,EAAwBC,EAAgC5D,GACtEC,aAAKL,IAAaM,KAAa,2BAA4B0D,GAAe5D,GAGrE,SAAS6D,EAAgCC,EAA2B9D,GACzEC,aAAKL,IAAagD,IAAQ,oCAAsCkB,GAAoB9D,GAG/E,SAAS+D,EAASC,EAAchE,GACrCC,aAAKL,IAAaM,KAAa,YAAa8D,GAAQhE,GAG/C,SAASiE,EAAoBC,EAAwClE,GAC1EC,aAAKL,IAAaM,KAAoB,uBAAwBgE,GAAqBlE,GAG9E,SAASmE,EAAahM,EAAkB+L,EAAwClE,GACrFC,aACEmE,cAA2BlE,KAAa,gBAAiB,CAAE/H,UAAS+L,uBACpElE,GAIG,SAASqE,EAAyBC,EAA4DtE,GACnGC,aAAKL,IAAaM,KAAmB,4BAA6BoE,GAA+BtE,GAG5F,SAASuE,EAA0BD,EAA4DtE,GACpGC,aAAKL,IAAaM,KAAc,6BAA8BoE,GAA+BtE,GAGxF,SAASwE,EAAqBC,EAAqCzE,GACxEC,aAAKL,IAAaM,KAAe,wBAAyBuE,GAAqBzE,GAG1E,SAAS0E,EAAwBxB,EAAsBlD,GAC5DC,aAAKL,IAAagD,IAAa,4BAA8BM,GAAelD,GAGvE,SAAS2E,EAAiBzB,EAAsBlD,GACrDC,aAAKL,IAAagD,IAAU,qBAAuBM,GAAelD,GAG7D,SAAS4E,EAAgBC,EAAiD7E,GAC/EC,aAAKL,IAAaM,KAAkB,mBAAoB2E,GAAwB7E,GAG3E,SAAS8E,EAAqBD,EAAiD7E,GACpFC,aAAKL,IAAaM,KAAW,wBAAyB2E,GAAwB7E,GAGzE,SAAS+E,EAAe/L,EAAuBgH,GACpDC,aAAKL,IAAaM,KAAc,kBAAmBlH,GAAQgH,GAGtD,SAASgF,EAAkBC,EAAkCjF,GAClE,MAAMQ,EAAe,IAAIC,SAGzB,GAFAD,EAAaE,OAAO,aAAcC,OAAOsE,EAAY9M,QAAQY,KAEzDkM,EAAYC,kCAAmC,KAAAC,EAAAC,EAAAnS,OAAA+N,EAAA,EAAA/N,CAC3BgS,EAAYC,mCADe,IACjD,IAAAE,EAAAlE,MAAAiE,EAAAC,EAAAjE,KAAAC,MAAqE,OAA1DC,EAA0D8D,EAAAzS,MACnE8N,EAAaE,OAAO,oCAAqCW,EAAQC,KAAMD,EAAQE,cAFhC,MAAAC,GAAA4D,EAAA3D,EAAAD,GAAA,QAAA4D,EAAA1D,KAMnD,IAAK,MAAM2D,KAAuBJ,EAEN,sCAAxBI,GACwB,YAAxBA,GACqC,OAArCJ,EAAYI,IAEZ7E,EAAaE,OAAO2E,EAAqBJ,EAAYI,IAGzDpF,aAAKL,IAAaM,KAAa,qBAAsBM,GAAeR,GAG/D,SAASsF,EACdC,EACAvF,GAEAC,aAAKL,IAAaM,KAAiC,oCAAqCqF,GAA6BvF,GAGhH,SAASwF,EAAsBC,EAA8BzF,GAClEC,aAAKL,IAAaM,KAAwB,yBAA0BuF,GAAgBzF,GAG/E,SAAS0F,EAAsBC,EAAmC3F,GACvEC,aAAKL,IAAaM,KAA4B,yBAA0ByF,GAAW3F,GAG9E,SAAS4F,EAAiBH,EAA8BzF,GAC7DC,aAAKL,IAAaM,KAAa,oBAAqBuF,GAAgBzF,GAG/D,SAAS6F,EAAgBC,EAAgC9F,GAC9DC,aAAKL,IAAaM,KAAc,mBAAoB4F,GAAa9F,GAG5D,SAAS+F,EAAYD,EAAgC9F,GAC1DC,aAAKL,IAAaM,KAAW,eAAgB4F,GAAa9F,GAGrD,SAASgG,EAAwBF,EAAqC9F,GAC3EC,aAAKL,IAAaM,KAAa,2BAA4B4F,GAAa9F,GAGnE,SAASiG,EAAiCnC,EAA2B9D,GAC1EC,aAAKL,IAAagD,IAA+B,qCAAuCkB,GAAoB9D,GAGvG,SAASkG,EAA4BC,EAAkDnG,GAC5FC,aAAKL,IAAaM,KAAc,+BAAgCiG,GAA0BnG,GAGrF,SAASoG,EAA8BtC,EAA2B9D,GACvEC,aAAKL,IAAagD,IAAQ,kCAAoCkB,GAAoB9D,GAG7E,SAASqG,EAA+BC,EAAoDtG,GACjGC,aAAKL,IAAaM,KAAW,kCAAmCoG,GAA2BtG,GAGtF,SAASuG,EAAqBC,EAAgCxG,GACnEC,aAAKL,IAAaM,KAAW,wBAAyBsG,GAAiBxG,GAGlE,SAASyG,EAAsBD,EAAgCxG,GACpEC,aAAKL,IAAaM,KAAW,yBAA0BsG,GAAiBxG,GAGnE,SAAS0G,EAA+B5C,EAA2B9D,GACxEC,aAAKL,IAAagD,IAAuB,mCAAqCkB,GAAoB9D,GAG7F,SAAS2G,EAA0BC,EAAkC5G,GAC1EC,aAAKL,IAAaM,KAAc,6BAA8B0G,GAAkB5G,GAG3E,SAAS6G,EAAaC,EAAkD9G,GAC7EC,aAAKL,IAAaM,KAAU,gBAAiB4G,GAA0B9G,GAGlE,SAASnH,GAAwBiL,EAA2B3L,EAAkB6H,GACnFC,aACEL,IAAaM,KAAW,2BAA4B,CAAE4D,oBAAmB3L,YACzE6H,GAIG,SAAS9H,GAAW6O,EAA+B9O,EAAsBE,EAAkB6H,GAChGC,aACEL,IAAaM,KAAU,cAAe,CAAE6G,kBAAiB9O,cAAaE,YACtE6H,GAIG,SAAStF,GAAasM,EAAwBhH,GACnDC,aAAKL,IAAaM,KAAmB,gBAAiB8G,GAAahH,GAG9D,SAASlF,GACdmM,EACAC,EACAC,EACAnH,GAEAC,aACEL,IAAaM,KAAW,qBAAsB,CAAE+G,gBAAeC,0BAAyBC,+BACxFnH,GAIG,SAASxE,GACdyL,EACAC,EACAC,EACAnH,GAEAC,aACEL,IAAaM,KAAW,qBAAsB,CAAE+G,gBAAeC,0BAAyBC,+BACxFnH,GAIG,SAASoH,GAAiCC,EAAsBlF,EAAmBnC,GACxFC,aACEL,IAAaM,KAAc,oCAAqC,CAAEmH,eAAclF,cAChFnC,GAIG,SAASsH,GAAsB5I,EAAsCsB,GAC1E,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,eAAgBC,OAAOjC,EAAKwE,eAChD1C,EAAaE,OAAO,iBAAkBC,OAAOjC,EAAK6I,iBAClD/G,EAAaE,OAAO,cAAeC,OAAOjC,EAAK8I,cAC/ChH,EAAaE,OAAO,mBAAoBC,OAAOjC,EAAK+I,mBACpDjH,EAAaE,OAAO,UAAWhC,EAAK2C,QAAQ,GAAGC,KAAM5C,EAAK2C,QAAQ,GAAGE,cAEvC,IAA1B7C,EAAK+I,kBAA+BC,aAAQhJ,EAAKiJ,YAAeD,aAAQhJ,EAAKkJ,WAC/EpH,EAAaE,OAAO,YAAahC,EAAKiJ,WACtCnH,EAAaE,OAAO,UAAWhC,EAAKkJ,UAGtC3H,aAAKL,IAAaM,KAA8C,yBAA0BM,GAAeR,GAGpG,SAAS6H,GAAqBnJ,EAA8BsB,GACjE,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,aAAcC,OAAOjC,EAAKa,QAAQxG,KACtDyH,EAAaE,OAAO,aAAcC,OAAOjC,EAAKvG,QAAQY,KAH6C,IAAA+O,EAAAC,EAAA9U,OAAA+N,EAAA,EAAA/N,CAK7EyL,EAAKuC,UALwE,IAKnG,IAAA8G,EAAA7G,MAAA4G,EAAAC,EAAA5G,KAAAC,MAAqC,OAA1BC,EAA0ByG,EAAApV,MACnC8N,EAAaE,OAAO,WAAYW,EAAQC,KAAMD,EAAQE,cAN2C,MAAAC,GAAAuG,EAAAtG,EAAAD,GAAA,QAAAuG,EAAArG,IASnGzB,aAAKL,IAAaM,KAAoB,wBAAyBM,GAAeR,GAGzE,SAASgI,GAAmBtJ,EAAyBsB,GAC1D,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,aAAchC,EAAKuJ,YACvCzH,EAAaE,OAAO,WAAYhC,EAAKwJ,UACrC1H,EAAaE,OAAO,eAAgBC,OAAOjC,EAAKwE,eAChD1C,EAAaE,OAAO,aAAcC,OAAOjC,EAAKvG,QAAQY,KAEjD2O,aAAQhJ,EAAKyJ,aAChB3H,EAAaE,OAAO,aAAchC,EAAKyJ,WAAW,GAAG7G,KAAM5C,EAAKyJ,WAAW,GAAG5G,aAGhFtB,aAAKL,IAAaM,KAAa,sBAAuBM,GAAeR,GAGhE,SAASoI,GACdC,EACArI,GAEAC,aAAKL,IAAaM,KAAsC,6BAA8BmI,GAAiCrI,GAGlH,SAASsI,GACdC,EACAvI,GAEAC,aAAKL,IAAaM,KAA0C,iCAAkCqI,GAA+BvI,GAGxH,SAASwI,GAAmBC,EAAsCzI,GACvEC,aAAKL,IAAaM,KAAW,sBAAuBuI,GAAoBzI,GAGnE,SAAS0I,GAAyBC,EAAwCC,EAAY5I,GAC3F,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,aAAckI,GAElCpI,EAAaE,OAAO,qBAAsBiI,EAAmB,GAAGrH,KAAMqH,EAAmB,GAAGpH,aAE5FtB,aAAKL,IAAaM,KAAqB,4BAA6BM,GAAeR,GAG9E,SAAS6I,GACd/E,EACA3B,EACAyG,EACAjB,EACAC,EACA5H,GAEA,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,oBAAqBC,OAAOmD,IAChDtD,EAAaE,OAAO,YAAaC,OAAOwB,IACxC3B,EAAaE,OAAO,aAAcC,OAAOiI,IACzCpI,EAAaE,OAAO,YAAaC,OAAOgH,IACxCnH,EAAaE,OAAO,UAAWC,OAAOiH,IAEtC3H,aAAKL,IAAaM,KAA8B,wCAAyCM,GAAeR,GAGnG,SAAS8I,GAAyBrE,EAAqCzE,GAC5EC,aAAKL,IAAaM,KAAiB,4BAA6BuE,GAAqBzE,GAGhF,SAAS+I,GAA4BC,EAAgDhJ,GAC1FC,aAAKL,IAAaM,KAAa,+BAAgC8I,GAA0BhJ,GAGpF,SAASiJ,GAAmCC,EAAqClJ,GACtFC,aAAKL,IAAaM,KAAa,sCAAuCgJ,GAAelJ,GAGhF,SAASmJ,GAAkCD,EAA8BlJ,GAC9EC,aAAKL,IAAaM,KAAa,qCAAsCgJ,GAAelJ,GAE/E,SAASoJ,GACdtF,EACA3B,EACAwF,EACAC,EACAyB,EACAC,EACAC,EACAvJ,GAEA,MAAMQ,EAAe,IAAIC,SACzBD,EAAaE,OAAO,oBAAqBC,OAAOmD,IAChDtD,EAAaE,OAAO,YAAaC,OAAOwB,IACxC3B,EAAaE,OAAO,YAAaC,OAAOgH,IACxCnH,EAAaE,OAAO,UAAWC,OAAOiH,IACtCpH,EAAaE,OAAO,YAAaC,OAAO0I,IACxC7I,EAAaE,OAAO,QAASC,OAAO2I,IACpC9I,EAAaE,OAAO,wBAAyBC,OAAO4I,IAEpDtJ,aAAKL,IAAaM,KAA8B,gCAAiCM,GAAeR,GAG3F,SAASwJ,GAA0BC,EAAsCzJ,GAC9EC,aAAKL,IAAaM,KAAW,6BAA8BuJ,GAAmBzJ,GAGzE,SAAS0J,GAAiCC,EAA2C3J,GAC1FC,aAAKL,IAAaM,KAAW,oCAAqCyJ,GAAwB3J,GAGrF,SAAS4J,GAAc7Q,EAAYiH,GACxCC,aAAKL,IAAagD,IAAkB,kBAAoB7J,GAAKiH,GAGxD,SAAS6J,GAAa9Q,EAAYiH,GACvCC,aAAKL,IAAagD,IAAkB,iBAAmB7J,GAAKiH,GAGvD,SAAS8J,GAAehE,EAAuB9F,GACpDC,aAAKL,IAAaM,KAAa,kBAAmB4F,GAAa9F,GAG1D,SAAS+J,GAAgBjE,EAAuB9F,GACrDC,aAAKL,IAAaM,KAAa,mBAAoB4F,GAAa9F,GAG3D,SAASgK,GAAsBlE,EAAkC9F,GACtEC,aAAKL,IAAaM,KAAc,yBAA0B4F,GAAa9F,GAGlE,SAASiK,GAAwBnE,EAAkC9F,GACxEC,aAAKL,IAAaM,KAAc,2BAA4B4F,GAAa9F,GAGpE,SAASkK,GACdC,EACAnK,GAEAC,aAAKL,IAAaM,KAAuC,+BAAgCiK,GAA4BnK,GAGhH,SAASoK,GACdD,EACAE,EACArK,GAEAC,aACEL,IAAaM,KAAa,sBAAuB,CAAEiK,4BAA2BE,gBAC9ErK,GAIG,SAASsK,GAA0BxE,EAA6B9F,GACrEC,aAAKL,IAAaM,KAAc,6BAA8B4F,GAAa9F,GAGtE,SAAS7E,GAAgC8L,EAAyBsD,EAAqCvK,GAC5GC,aACEL,IAAaM,KAAW,mCAAoC,CAAE+G,gBAAesD,gCAC7EvK,GAIG,SAASwK,GAAuB1G,EAA2B9D,GAChEC,aAAKL,IAAagD,IAAU,2BAA6BkB,GAAoB9D,yFC1chEyK,IA/EsC7X,KACnD,MAAM8B,EAAgBC,YAAmCC,GAASA,EAAMF,eAqCxE,OACE7B,EAAAC,EAAAC,cAAC2X,EAAA,EAADzX,OAAAC,OAAA,GACMN,EADN,CAEEO,gBAAgB,EAChBwX,gBAAe1X,OAAAI,EAAA,EAAAJ,QAAAI,EAAA,EAAAJ,CAAA,GACVL,EAAM+X,iBADI,IAEbtN,qBAAsBzK,EAAMyK,qBAC5BlB,iBAAiB,EACjBU,qBAAqB,IAEvBzJ,iBAAgBH,OAAAI,EAAA,EAAAJ,QAAAI,EAAA,EAAAJ,CAAA,GACXL,EAAMQ,kBADK,IAEdE,QAAS,CACP,CACEC,UAAW,QACXC,KAAM,SAER,CACED,UAAW,YACXC,KAAM,gBAER,CACED,UAAW,iBACXC,KAAM,QAER,CACED,UAAW,YACXC,KAAM,oBAGVC,aAAcC,IACdkX,kBAlEsB,KAC1B,MAAMxN,EAAkC,GAwBxC,OAvBIxK,EAAMwE,WACRgG,EAAY9B,KAAK,CACfuP,MAAO,IACPC,iBAAkB,KAClBxN,UAAW,YACX5K,OAAO,IAGPE,EAAMmY,WACR3N,EAAY9B,KAAK,CACfuP,MAAO,IACPC,iBAAkB,KAClBxN,UAAW,YACX5K,OAAO,IAIPE,EAAMyK,sBACRzK,EAAMyK,qBAAqB2N,QAAQC,IACjC7N,EAAY9B,KAAK2P,KAId,CACL,CACEH,iBAAkB,KAClB1N,cACAE,UAAW,qBACX5K,MAAOE,EAAMkR,mBAAqBpP,EAAcO,gBAAgBD,gBAAgB+D,MAqChFpF,aAAc,yBAEhBlB,MAAOG,EAAMH,MAAQG,EAAMH,MAAQ,kBACnCmB,YAAahB,EAAMgB,YAAchB,EAAMgB,YAAc,4BACrDC,KAAMC,IAAUC,oDCvEtB1B,EAAAC,EAAAC,EAAA,sBAAAmB,IAAO,MAAMA,EAAa,+FCoB1BrB,EAAAC,EAAAC,EAAA,sBAAAmB,IAAO,MAAMA,EAAa,+ICNXwX,IA3B2BtY,IAEtCC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,GACMN,EADN,CAEEO,gBAAgB,EAChBC,iBAAgBH,OAAAI,EAAA,EAAAJ,QAAAI,EAAA,EAAAJ,CAAA,GACXL,EAAMQ,kBADK,IAEdE,QAAS,CACP,CACEC,UAAW,SACXC,KAAM,aAER,CACED,UAAW,YACXC,KAAM,oBAGVC,aAAcC,IACdC,aAAc,8BAEhBlB,MAAOG,EAAMH,MAAQG,EAAMH,MAAQ,2BACnCmB,YAAahB,EAAMgB,YAAchB,EAAMgB,YAAc,qCACrDC,KAAMC,IAAUC,mDCxBf,SAASgI,EAAoB9G,GAClC,IAAI0F,EAAS,KAmBb,OAXG1F,EAAgBwK,oBAChBxK,EAAgBD,iBAChBC,EAAgBD,gBAAgBmW,SAChClW,EAAgBD,gBAAgBoW,aAChCnW,EAAgBD,gBAAgBqW,eAChCpW,EAAgBD,gBAAgBsW,eAChCrW,EAAgBD,gBAAgBuW,gBAEjC5Q,EAbA,gQAgBKA,EApBTtI,EAAAC,EAAAC,EAAA,sBAAAwJ,sCCUA1J,EAAAC,EAAAC,EAAA,sBAAAmB,IAAO,MAAMA,EAAa,0GCZ1B,IAAA8X,EAAAnZ,EAAA,GAAAoZ,EAAApZ,EAAA,GAAAqZ,EAAArZ,EAAA,GAAAsZ,EAAAtZ,EAAA8O,EAAAuK,GAAAE,EAAAvZ,EAAA,GAAAwZ,EAAAxZ,EAAA8O,EAAAyK,GAAAE,EAAAzZ,EAAA,GAAA0Z,EAAA1Z,EAAA8O,EAAA2K,GAAAE,EAAA3Z,EAAA,GAMA4Z,EAAA,CACAC,IAAOF,EAAA,EACP/P,UAAa4P,EAAA/Y,EAASqZ,OACtBC,UAAaP,EAAA/Y,EAASuZ,QAMtBC,EAAA,SAAA1Z,GACA,IAAAqJ,EAAArJ,EAAAqJ,UACAmQ,EAAAxZ,EAAAwZ,UACAG,EAAA3Z,EAAAsZ,IACAM,EAAmBvZ,OAAAwY,EAAA,EAAAxY,CAA6BL,EAAA,iCAEhD6Z,EAAgBxZ,OAAA+Y,EAAA,EAAA/Y,CAAgB8Y,IAAU9P,EAAA,aAAAmQ,GAC1C,OAAST,EAAA7Y,EAAKC,cAAAwZ,EAAoBtZ,OAAAuY,EAAA,EAAAvY,CAAQ,GAAGuZ,EAAA,CAC7CvQ,UAAAwQ,MAIAH,EAAAL,YACAK,EAAAI,aAjBA,CACAR,IAAA,OAiBe3Z,EAAA","file":"static/js/36.5cc91b2e.chunk.js","sourcesContent":["export const GRUPO_ATIVO_CIRCULANTE = { label: 'Grupo Ativo Circulante', value: 1 };\r\nexport const GRUPO_RECEITA_FINANCEIRA = { label: 'Grupo de Receitas Financeiras', value: 2 };\r\nexport const GRUPO_RECEITA_NAO_OPERACIONAL = { label: 'Grupo de Receitas Não Operacionais', value: 3 };\r\nexport const GRUPO_ATIVO_IMOBILIZADO = { label: 'Grupo Ativo Imobilizado', value: 4 };\r\nexport const GRUPO_PASSIVO_CIRCULANTE = { label: 'Grupo Passivo Circulante', value: 5 };\r\nexport const CONTA_COMPENSACAO = { label: 'Conta de Compensação', value: 9 };\r\nexport const CONTA_PATRIMONIO_LIQUIDO = { label: 'Conta de Patrimônio Líquido', value: 10 };\r\nexport const CONTA_RESULTADO = { label: 'Conta de Resultado', value: 11 };\r\nexport const OUTRAS = { label: 'Outras', value: 12 };\r\n\r\nexport const PLANO_CONTA_NATUREZA_CONTA_ENUM_VALUES = [\r\n  GRUPO_ATIVO_CIRCULANTE,\r\n  GRUPO_RECEITA_FINANCEIRA,\r\n  GRUPO_RECEITA_NAO_OPERACIONAL,\r\n  GRUPO_ATIVO_IMOBILIZADO,\r\n  GRUPO_PASSIVO_CIRCULANTE,\r\n  CONTA_COMPENSACAO,\r\n  CONTA_PATRIMONIO_LIQUIDO,\r\n  CONTA_RESULTADO,\r\n  OUTRAS,\r\n];\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaReferencial';\r\n\r\nconst PlanoContaReferencialIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'instituicao.instituicao',\r\n            text: 'Instituição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaReferencialSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Referencial'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas Referencial'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaReferencialIS;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useRef, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button, Card, CardBody, CardDeck, Col, Form, Modal, ModalHeader, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertType,\r\n  boolColumn,\r\n  CellEditProps,\r\n  ClickEnum,\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  enumColumn,\r\n  ErroList,\r\n  ERROR,\r\n  getExtraData,\r\n  InputGroupInline,\r\n  InputType,\r\n  OrderType,\r\n  ProcessBar,\r\n  SearchDataGrid,\r\n  SearchDataGridRefProps,\r\n  SearchExpression,\r\n  SearchViewProps,\r\n  SelectModeEnum,\r\n  SelectRowProps,\r\n  showToast,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { hasGrupoPlanoContas } from '../../../../dependencies/grupoPlanoContasDependency';\r\nimport { CLASS_NAME, PlanoConta } from '../../../../models/dtos/ger/planoConta';\r\nimport { PlanoContaReferencial } from '../../../../models/dtos/mcg/planoContaReferencial';\r\nimport { PLANO_CONTA_NATUREZA_CONTA_ENUM_VALUES } from '../../../../models/enumerated/mcg/planoContaNaturezaContaEnum';\r\nimport {\r\n  alterarPlanoContaNaturezaConfig,\r\n  desvincularContas,\r\n  listSubGrupo,\r\n  referenciarContas,\r\n  removeList,\r\n  removerTodosPlanosConta,\r\n} from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport PlanoContaReferencialIS from '../../../components/mcg/planoContaReferencialIS/PlanoContaReferencialIS';\r\n\r\nconst defaultSorted: DefaultSortProps[] = [\r\n  {\r\n    dataField: 'conta',\r\n    order: OrderType.ASC,\r\n  },\r\n];\r\n\r\nconst cellEditProps: CellEditProps = {\r\n  blurToSave: false,\r\n  mode: ClickEnum.CLICK,\r\n};\r\n\r\nexport interface PlanoContaExtraViewProps {\r\n  disableInputIS?: boolean;\r\n  useDefaultSelectRow?: boolean;\r\n  hideExtraFields?: boolean;\r\n  defaultPaginationMode?: boolean;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nexport interface PlanoContaExtraProps {\r\n  configGeralResultadoExercicio?: number;\r\n  isSubGrupo?: PlanoConta;\r\n  planoContaReferencial?: PlanoContaReferencial;\r\n  planoContaReferencialECF?: PlanoContaReferencial;\r\n}\r\n\r\nconst PlanoContaSearchView: FC<SearchViewProps<PlanoConta> & PlanoContaExtraViewProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<PlanoConta>({ defaultValues: { grupoPlanoConta: globalReducer.globalParameter.grupoPlanoConta }, mode: 'onBlur' });\r\n  const extraFormProps = useForm<PlanoContaExtraProps>({ mode: 'onBlur' });\r\n\r\n  const [selectedItems, setSelectedItems] = useState<PlanoConta[]>([]);\r\n  const [selectedItemsModal, setSelectedItemsModal] = useState<PlanoConta[]>([]);\r\n  const [showReferenciarConta, setShowReferenciarConta] = useState();\r\n  const [showAlterarLote, setShowAlterarLote] = useState();\r\n  const [listaContas, setListaContas] = useState<PlanoConta[]>([]);\r\n  const searchRef = useRef<SearchDataGridRefProps>();\r\n\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'conta',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Conta',\r\n    },\r\n    boolColumn({\r\n      dataField: 'analitica',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Analítica',\r\n    }),\r\n    {\r\n      dataField: 'codigoReduzido',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'C.R.',\r\n    },\r\n    {\r\n      dataField: 'descricao',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Descrição',\r\n    },\r\n  ];\r\n\r\n  const columnsAlterarLote: ColumnsProps[] = [\r\n    enumColumn(\r\n      {\r\n        dataField: 'mcgPlanoConta.configGeralResultadoExercicio',\r\n        text: 'Natureza da Conta',\r\n      },\r\n      PLANO_CONTA_NATUREZA_CONTA_ENUM_VALUES\r\n    ),\r\n  ];\r\n\r\n  const columnsSearchView: ColumnsProps[] = [\r\n    {\r\n      dataField: 'planoContaReferencial.conta',\r\n      editable: false,\r\n      formatter: (cell, row) => {\r\n        return row.mcgPlanoConta && row.mcgPlanoConta.planoContaReferencial ? 'Sim ' : 'Não';\r\n      },\r\n      sort: false,\r\n      text: 'Referenciada no Plano de Contas do FCONT',\r\n    },\r\n    {\r\n      dataField: 'planoContaReferencialECF.conta',\r\n      editable: false,\r\n      formatter: (cell, row) => {\r\n        return row.mcgPlanoConta && row.mcgPlanoConta.planoContaReferencialECF ? 'Sim ' : 'Não';\r\n      },\r\n      sort: false,\r\n      text: 'Referenciada no Plano de Contas do SPED ECD/ECF',\r\n    },\r\n  ];\r\n\r\n  const remove = () => {\r\n    if (selectedItems.length > 0) {\r\n      const possuiAnalitica = selectedItems.find(it => !it.analitica);\r\n\r\n      if (possuiAnalitica) {\r\n        alertManager.emit(ACTION_EVENTS.SHOW, {\r\n          message:\r\n            'Ao Excluir as contas Sintéticas selecionadas todas as contas filhas também serão excluídas. Deseja realmente excluir as Contas Filhas?',\r\n          onNoClick: () => apagarContas(false),\r\n          onOkClick: () => apagarContas(true),\r\n          type: AlertType.WARNING_YES_NO,\r\n        });\r\n      } else {\r\n        apagarContas(false);\r\n      }\r\n    } else {\r\n      showToast('Selecione uma conta para remover', ERROR);\r\n    }\r\n  };\r\n\r\n  const apagarContas = (apagarFilha: boolean) => {\r\n    if (apagarFilha) {\r\n      removeList(selectedItems, true, globalReducer.globalParameter.usuario, {\r\n        errorFunction: mensagem => {\r\n          alertManager.emit(ACTION_EVENTS.SHOW, {\r\n            message: mensagem,\r\n            type: AlertType.ERROR,\r\n          });\r\n        },\r\n        thenFunction: () => {\r\n          searchRef.current.notifySearchExpressionChange();\r\n          setSelectedItems([]);\r\n          alertManager.emit(ACTION_EVENTS.SHOW, {\r\n            message: 'Contas excluídas com sucesso!',\r\n            type: AlertType.INFORMATION,\r\n          });\r\n        },\r\n      });\r\n    } else {\r\n      apagarContaMae();\r\n    }\r\n  };\r\n\r\n  const apagarContaMae = () => {\r\n    setTimeout(() => {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Você decidiu não apagar as Contas Filhas. Deseja mesmo assim excluir a Conta Mãe?',\r\n        onOkClick: () => {\r\n          removeList(selectedItems, false, globalReducer.globalParameter.usuario, {\r\n            errorFunction: mensagem => {\r\n              alertManager.emit(ACTION_EVENTS.SHOW, {\r\n                message: mensagem,\r\n                type: AlertType.ERROR,\r\n              });\r\n            },\r\n            thenFunction: () => {\r\n              searchRef.current.notifySearchExpressionChange();\r\n              setSelectedItems([]);\r\n              alertManager.emit(ACTION_EVENTS.SHOW, {\r\n                message: 'Contas excluídas com sucesso!',\r\n                type: AlertType.INFORMATION,\r\n              });\r\n            },\r\n          });\r\n        },\r\n        type: AlertType.WARNING_YES_NO,\r\n      });\r\n    }, 1);\r\n  };\r\n\r\n  const removerTodos = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: 'Este comando excluirá todas as contas que não possuem lançamento. Deseja realmente fazer isto?',\r\n      onOkClick: () =>\r\n        removerTodosPlanosConta(formProps.getValues().grupoPlanoConta.id, globalReducer.globalParameter.usuario, {\r\n          errorFunction: mensagem => {\r\n            const erros = mensagem.replace(/<(.|\\n)*?>/g, '').split('*');\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: <ErroList headerMessage={erros[0]} erros={erros.filter((it, index) => index !== 0)} />,\r\n              type: AlertType.ERROR,\r\n            });\r\n          },\r\n          thenFunction: () => {\r\n            searchRef.current.notifySearchExpressionChange();\r\n            setSelectedItems([]);\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: 'Contas excluídas com sucesso!',\r\n              type: AlertType.INFORMATION,\r\n            });\r\n          },\r\n        }),\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const customHeader = () => {\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Button onClick={remove} color=\"danger\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"times-circle\" /> Remover Selecionados\r\n          </Button>\r\n          <Button onClick={removerTodos} color=\"primary\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"trash-alt\" /> Remover Todos\r\n          </Button>\r\n          <Button onClick={handleOpenReferenciarConta} color=\"first\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"cog\" /> Referenciar Contas\r\n          </Button>\r\n          <Button onClick={handleOpenAlterarLote} color=\"warning\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"tasks\" /> Alterar em Lote\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    setSelectedItems(isSelect ? [...selectedItems, row] : selectedItems.filter(it => it.id !== row.id));\r\n  };\r\n\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    setSelectedItems(isSelect ? rows : []);\r\n  };\r\n\r\n  const handleOnSelectModal = (row, isSelect) => {\r\n    setSelectedItemsModal(isSelect ? [...selectedItemsModal, row] : selectedItemsModal.filter(it => it.id !== row.id));\r\n  };\r\n\r\n  const handleOnSelectAllModal = (isSelect, rows) => {\r\n    setSelectedItemsModal(isSelect ? rows : []);\r\n  };\r\n\r\n  const selectRow: SelectRowProps = {\r\n    bgColor: '#b3e6ff',\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleOnSelect,\r\n    // @ts-ignore\r\n    onSelectAll: handleOnSelectAll,\r\n  };\r\n\r\n  const selectRowModal = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleOnSelectModal,\r\n    onSelectAll: handleOnSelectAllModal,\r\n  };\r\n\r\n  const handleCloseReferenciarConta = () => {\r\n    setShowReferenciarConta(false);\r\n  };\r\n\r\n  const handleOpenReferenciarConta = () => {\r\n    extraFormProps.reset({ isSubGrupo: selectedItems[selectedItems.length - 1] });\r\n    onChangeSubGrupo();\r\n    setShowReferenciarConta(true);\r\n  };\r\n\r\n  const handleCloseAlterarLote = () => {\r\n    setShowAlterarLote(false);\r\n  };\r\n\r\n  const handleOpenAlterarLote = () => {\r\n    extraFormProps.reset({ isSubGrupo: selectedItems[selectedItems.length - 1] });\r\n    onChangeSubGrupo();\r\n    setShowAlterarLote(true);\r\n  };\r\n\r\n  const onChangeSubGrupo = () => {\r\n    const { isSubGrupo } = extraFormProps.getValues();\r\n    if (isSubGrupo && !isSubGrupo.analitica) {\r\n      listSubGrupo(isSubGrupo, {\r\n        thenFunction: result => {\r\n          setListaContas(result);\r\n        },\r\n      });\r\n    } else {\r\n      setListaContas([]);\r\n    }\r\n  };\r\n\r\n  const handleSubmitReferenciarConta = () => {\r\n    const erros = [];\r\n    let ids: number[] = [];\r\n\r\n    if (extraFormProps.getValues().isSubGrupo) {\r\n      if (extraFormProps.getValues().isSubGrupo.analitica) {\r\n        ids.push(extraFormProps.getValues().isSubGrupo.id);\r\n      } else {\r\n        if (selectedItemsModal.length === 0) {\r\n          erros.push('É necessário selecionar pelo menos 1 Plano de Conta.');\r\n        } else {\r\n          ids = selectedItemsModal.map(it => it.id);\r\n        }\r\n      }\r\n    } else {\r\n      erros.push('Campo Plano de Contas não pode estar em branco.');\r\n    }\r\n\r\n    if (!extraFormProps.getValues().planoContaReferencial && !extraFormProps.getValues().planoContaReferencialECF) {\r\n      erros.push('É necessário informar pelo menos 1 Plano de Conta referencial.');\r\n    }\r\n\r\n    if (erros.length > 0) {\r\n      showAlert(erros);\r\n    } else {\r\n      callReferenciarContas(ids);\r\n    }\r\n  };\r\n\r\n  const callReferenciarContas = (ids: number[]) => {\r\n    referenciarContas(\r\n      ids,\r\n      extraFormProps.getValues().planoContaReferencial && extraFormProps.getValues().planoContaReferencial.id,\r\n      extraFormProps.getValues().planoContaReferencialECF && extraFormProps.getValues().planoContaReferencialECF.id,\r\n      {\r\n        errorFunction: mensagem => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: () => {\r\n          alertManager.emit(ACTION_EVENTS.SHOW, {\r\n            message: 'Contas referenciadas com sucesso!',\r\n            type: AlertType.INFORMATION,\r\n          });\r\n          searchRef.current.notifySearchExpressionChange();\r\n          handleCloseReferenciarConta();\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const handleSubmitAlterarLote = () => {\r\n    const erros = [];\r\n    let ids: number[] = [];\r\n\r\n    if (extraFormProps.getValues().isSubGrupo) {\r\n      if (extraFormProps.getValues().isSubGrupo.analitica) {\r\n        ids.push(extraFormProps.getValues().isSubGrupo.id);\r\n      } else {\r\n        if (selectedItemsModal.length === 0) {\r\n          erros.push('É necessário selecionar pelo menos 1 Plano de Conta.');\r\n        } else {\r\n          ids = selectedItemsModal.map(it => it.id);\r\n        }\r\n      }\r\n    } else {\r\n      erros.push('Campo Plano de Contas não pode estar em branco.');\r\n    }\r\n\r\n    if (erros.length > 0) {\r\n      showAlert(erros);\r\n    } else {\r\n      alterarLote(ids);\r\n    }\r\n  };\r\n\r\n  const showAlert = (erros: any[]) => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: <ErroList erros={erros} />,\r\n      type: AlertType.ERROR,\r\n    });\r\n  };\r\n\r\n  const alterarLote = (ids: number[]) => {\r\n    alterarPlanoContaNaturezaConfig(ids, extraFormProps.getValues().configGeralResultadoExercicio, {\r\n      errorFunction: mensagem => {\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: () => {\r\n        alertManager.emit(ACTION_EVENTS.SHOW, {\r\n          message: 'Contas referenciadas com sucesso!',\r\n          type: AlertType.INFORMATION,\r\n        });\r\n        searchRef.current.notifySearchExpressionChange();\r\n        handleCloseAlterarLote();\r\n      },\r\n    });\r\n  };\r\n\r\n  const confirmarRemoverReferencia = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message:\r\n        'Ao escolher \"Sim\", todas as contas selecionadas que possuem conta referência FCONT e/ou SPED ECD/ECF iguais às preenchidas nos campos correspondentes terão suas referências removidas.' +\r\n        'Deseja realmente remover as referências?',\r\n      onOkClick: () => removerReferencia(),\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const removerReferencia = () => {\r\n    let ids: number[] = [];\r\n\r\n    if (extraFormProps.getValues().isSubGrupo) {\r\n      if (extraFormProps.getValues().isSubGrupo.analitica) {\r\n        ids.push(extraFormProps.getValues().isSubGrupo.id);\r\n      } else {\r\n        ids = selectedItemsModal.map(it => it.id);\r\n      }\r\n    }\r\n\r\n    if (ids.length > 0) {\r\n      desvincularContas(\r\n        ids,\r\n        extraFormProps.getValues().planoContaReferencial && extraFormProps.getValues().planoContaReferencial.id,\r\n        extraFormProps.getValues().planoContaReferencialECF && extraFormProps.getValues().planoContaReferencialECF.id,\r\n        {\r\n          errorFunction: mensagem => {\r\n            showToast(mensagem, ERROR);\r\n          },\r\n          thenFunction: () => {\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: 'Referências removidas com sucesso!',\r\n              type: AlertType.INFORMATION,\r\n            });\r\n            searchRef.current.notifySearchExpressionChange();\r\n          },\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const getExpressions = defaultExpressions => {\r\n    const expressions: SearchExpression[] = [...defaultExpressions];\r\n    expressions.push({\r\n      expressions: props.filtroContaResultado ? props.filtroContaResultado : [],\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: formProps.getValues().grupoPlanoConta.id,\r\n    });\r\n\r\n    return expressions;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n        () => hasGrupoPlanoContas(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={1346}\r\n    >\r\n      <div className=\"d-none\">\r\n        <GrupoPlanoContaIS id=\"grupoPlanoConta\" formProps={formProps} />\r\n      </div>\r\n      <SearchDataGrid\r\n        {...(!props.hideExtraFields && { customHeaderContent: customHeader() })}\r\n        {...props}\r\n        {...props.searchDataGridProps}\r\n        dtoClassName={CLASS_NAME}\r\n        {...(!props.useDefaultSelectRow && { selectRow })}\r\n        columns={columns.concat(columnsSearchView)}\r\n        cellEditProps={cellEditProps}\r\n        defaultSorted={defaultSorted}\r\n        searchExpressionsFull={getExpressions}\r\n        extraData={{ ...getExtraData(props, 'PlanoContaEditView', CLASS_NAME), hideRemoveButton: true }}\r\n        ref={searchRef}\r\n      />\r\n\r\n      {\r\n        // ReferenciarPlanoContaProcessView\r\n      }\r\n\r\n      <Modal isOpen={showReferenciarConta} backdrop=\"static\" centered={true} toggle={handleCloseReferenciarConta} size=\"xl\">\r\n        <ModalHeader toggle={handleCloseReferenciarConta}>Referenciar Plano de Contas</ModalHeader>\r\n        <CardDeck>\r\n          <Card>\r\n            <CardBody>\r\n              <PlanoContaReferencialIS id=\"planoContaReferencial\" formProps={extraFormProps} label=\"Plano de Contas Referencial FCONT\" />\r\n              <PlanoContaReferencialIS\r\n                id=\"planoContaReferencialECF\"\r\n                formProps={extraFormProps}\r\n                label=\"Plano de Contas Referencial SPED ECD/ECF/EFD\"\r\n              />\r\n              <PlanoContaIS\r\n                id=\"isSubGrupo\"\r\n                formProps={extraFormProps}\r\n                label=\"Plano de Contas ou Grupo de Contas\"\r\n                placeholder=\"Informe a Conta\"\r\n                onChange={onChangeSubGrupo}\r\n              />\r\n              <div className=\"table-area\">\r\n                <BootstrapTable\r\n                  keyField=\"id\"\r\n                  data={listaContas}\r\n                  selectRow={selectRowModal}\r\n                  columns={columns}\r\n                  responsive={true}\r\n                  striped={true}\r\n                  bootstrap4={true}\r\n                  tabIndexCell={true}\r\n                  bordered={true}\r\n                  condensed={true}\r\n                />\r\n              </div>\r\n              <br />\r\n              <br />\r\n              <Form>\r\n                <Button onClick={confirmarRemoverReferencia} color=\"first\">\r\n                  <FontAwesomeIcon icon=\"trash\" /> Remover contas referenciadas\r\n                </Button>\r\n                <ProcessBar handleClose={handleCloseReferenciarConta} handleSubmit={handleSubmitReferenciarConta} />\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </CardDeck>\r\n      </Modal>\r\n\r\n      <Modal isOpen={showAlterarLote} backdrop=\"static\" centered={true} toggle={handleCloseAlterarLote} size=\"xl\">\r\n        <ModalHeader toggle={handleCloseAlterarLote}>Alterar em Lote Plano de Contas</ModalHeader>\r\n        <CardDeck>\r\n          <Card>\r\n            <CardBody>\r\n              <PlanoContaIS\r\n                id=\"isSubGrupo\"\r\n                formProps={extraFormProps}\r\n                label=\"Plano de Contas ou Grupo de Contas\"\r\n                placeholder=\"Informe a Conta\"\r\n                onChange={onChangeSubGrupo}\r\n              />\r\n              <InputGroupInline\r\n                id=\"configGeralResultadoExercicio\"\r\n                label=\"Configuração Geral / Natureza da Conta SPED ECF\"\r\n                isPrependLabel={true}\r\n                formProps={extraFormProps}\r\n                inputDropDownProps={{\r\n                  optionsProvider: PLANO_CONTA_NATUREZA_CONTA_ENUM_VALUES,\r\n                }}\r\n                type={InputType.DROP_DOWN}\r\n              />\r\n              <div className=\"table-area\">\r\n                <BootstrapTable\r\n                  keyField=\"id\"\r\n                  className=\"table-scroll\"\r\n                  data={listaContas}\r\n                  selectRow={selectRowModal}\r\n                  columns={columns.concat(columnsAlterarLote)}\r\n                  responsive={true}\r\n                  striped={true}\r\n                  bootstrap4={true}\r\n                  tabIndexCell={true}\r\n                  bordered={true}\r\n                  condensed={true}\r\n                />\r\n              </div>\r\n              <Form>\r\n                <ProcessBar handleClose={handleCloseAlterarLote} handleSubmit={handleSubmitAlterarLote} />\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </CardDeck>\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default PlanoContaSearchView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoPlanoContas(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    ' O Grupo de Plano de Contas selecionado não está configurado. Para configuar acesse:' +\r\n    'Módulo Contábil > Manutenção > Grupos > Plano de Contas - \\n' +\r\n    'E configure os seguintes campos: Máscara, Dígito: Ativo, Passivo, Receita e Despesa.';\r\n\r\n  if (\r\n    !globalParameter.grupoEmpresaConfig &&\r\n    !globalParameter.grupoPlanoConta &&\r\n    !globalParameter.grupoPlanoConta.mascara &&\r\n    !globalParameter.grupoPlanoConta.digitoAtivo &&\r\n    !globalParameter.grupoPlanoConta.digitoPassivo &&\r\n    !globalParameter.grupoPlanoConta.digitoReceita &&\r\n    !globalParameter.grupoPlanoConta.digitoDespesa\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from './planoContaReferencialInstituicao';\r\n\r\nexport interface PlanoContaReferencial extends Basic {\r\n  conta?: string;\r\n  descricao?: string;\r\n  analitica?: boolean;\r\n  observacao?: string;\r\n  codigoInstituicao?: string;\r\n  instituicao?: PlanoContaReferencialInstituicao;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencial';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardDeck = function CardDeck(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-deck'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardDeck.propTypes = propTypes;\nCardDeck.defaultProps = defaultProps;\nexport default CardDeck;"],"sourceRoot":""}