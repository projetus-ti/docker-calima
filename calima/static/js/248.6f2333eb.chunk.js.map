{"version":3,"sources":["dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","dependencies/grupoPlanoContasDependency.ts"],"names":["hasEmpresa","globalParameter","result","empresa","__webpack_require__","d","__webpack_exports__","hasEmpresaMCG","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","id","importarDuplicados","importarLancamentosCardinal","_step","_iterator","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","value","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","PlanoContaIS","props","globalReducer","useSelector","state","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_3__","assign","isPrependLabel","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","push","grupoPlanoConta","forEach","filtro","searchViewId","label","placeholder","type","InputType","INPUT_SEARCH","hasGrupoPlanoContas","grupoEmpresaConfig","mascara","digitoAtivo","digitoPassivo","digitoReceita","digitoDespesa"],"mappings":"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","file":"static/js/248.6f2333eb.chunk.js","sourcesContent":["import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoPlanoContas(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    ' O Grupo de Plano de Contas selecionado não está configurado. Para configuar acesse:' +\r\n    'Módulo Contábil > Manutenção > Grupos > Plano de Contas - \\n' +\r\n    'E configure os seguintes campos: Máscara, Dígito: Ativo, Passivo, Receita e Despesa.';\r\n\r\n  if (\r\n    !globalParameter.grupoEmpresaConfig &&\r\n    !globalParameter.grupoPlanoConta &&\r\n    !globalParameter.grupoPlanoConta.mascara &&\r\n    !globalParameter.grupoPlanoConta.digitoAtivo &&\r\n    !globalParameter.grupoPlanoConta.digitoPassivo &&\r\n    !globalParameter.grupoPlanoConta.digitoReceita &&\r\n    !globalParameter.grupoPlanoConta.digitoDespesa\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n"],"sourceRoot":""}