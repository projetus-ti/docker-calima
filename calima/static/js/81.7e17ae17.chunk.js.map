{"version":3,"sources":["models/enumerated/mcg/tipoPlanoContaReferencialEnum.ts","views/pages/mcg/grupoPlanoConta/GrupoPlanoContaEditView.tsx","dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/CardTitle.js","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","models/dtos/mcg/planoContaReferencialInstituicao.ts","views/components/mcg/planoContaMCGReferencialInstituicao/PlanoContaMCGReferencialInstituicaoIS.tsx","views/pages/mcg/grupoPlanoConta/GrupoPlanoContaConfigEditView.tsx"],"names":["DE_PARA","label","value","TIPO_PLANO_CONTA_REFERENCIAL_ENUM_VALUES","GrupoPlanoContaEditView","props","globalReducer","useSelector","state","selectedItem","getSelectedItem","formProps","useForm","defaultValues","mode","_useState","useState","_useState2","Object","slicedToArray","isEnableDigitoAtivo","setEnableDigitoAtivo","_useState3","_useState4","isEnableDigitoPassivo","setEnableDigitoPassivo","dispatch","useDispatch","useEffect","setTimeout","isEmpty","getValues","id","reset","digitoAtivo","digitoDespesa","digitoPassivo","digitoReceita","mascara","tipoPlanoContaReferencial","setDock","openConfig","componente","onDockSubmit","Page","pageProps","editItemProps","history","location","match","openViaDock","multiPageActions","showPage","react_default","a","createElement","openMultiPage","GrupoPlanoContaConfigEditView","dockActions","createDock","summer_esm","icon","color","text","onClick","title","useGlobalParameter","dependencies","hasEmpresa","globalParameter","hasEmpresaMCG","wikiId","editViewProps","dtoClassName","CLASS_NAME","validateExtras","erros","count","i","length","charAt","verifyMaskLength","push","Row","Col","Card","style","marginBottom","borderWidth","CardBody","CardTitle","objectSpread2","validation","maxLength","isPrependLabel","labelWidth","tooltipProps","message","type","InputType","NUMBER","placeholder","required","onChange","setValue","input","r","FormGroup","tag","CustomInput","name","innerRef","register","withTooltip","messagem","placement","propToolTip","PlanoContaMCGReferencialInstituicaoIS","inputDropDownProps","optionsProvider","DROP_DOWN","disabled","onlyNumber","result","empresa","__webpack_require__","d","__webpack_exports__","empresaMCG","PlanoContaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","forEach","filtro","idGrupoPlanoConta","grupoPlanoConta","searchViewId","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","className","string","cssModule","object","Tag","attributes","classes","defaultProps","GrupoPlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_2__","editFormRef","useRef","loadGrupoPlanoConta","onLoad","mapKey","values","showLoading","findById","thenFunction","res","progressActions","hideProgress","data","keys","map","key","[object Object]","showProgress","animated","striped","onCancel","current","close","handleSubmit","submit","then","wizardFinishProps","confirmButton","onConfirm","getMainEditView","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_16__","summer__WEBPACK_IMPORTED_MODULE_9__","wrapBody","ref","externalSubmit","planoContaFornecedor","planoContaFornecedorGrupo","planoContaCliente","planoContaClienteGrupo","planoContaTransportadora","planoContaTransportadoraGrupo","afterPersist","atualizarGlobalParameter","usuario","setGlobalParameter","handleClose","btnSubmitIcon","btnSubmitLabel","onAfterPageChange","currentPageId","finishProps","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_15__"],"mappings":"2PAAO,MACMA,EAAU,CAAEC,MAAO,UAAWC,MAAO,KAErCC,EAA2C,CAH/B,CAAEF,MAAO,eAAaC,MAAO,KAGcF,kCCsUrDI,UA1SyEC,KACtF,MAAMC,EAAgBC,YAAmCC,GAASA,EAAMF,eAClEG,EAAeC,aAAgBL,GAE/BM,EAAYC,YAAyB,CAAEC,cAAeJ,EAAcK,KAAM,WAJeC,EAM3CC,oBAAS,GANkCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAMxFK,EANwFH,EAAA,GAMnEI,EANmEJ,EAAA,GAAAK,EAOvCN,oBAAS,GAP8BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAOxFE,EAPwFD,EAAA,GAOjEE,EAPiEF,EAAA,GASzFG,EAAWC,cASjBC,oBACE,KACEC,WAAW,KACLC,aAAQnB,EAAUoB,YAAYC,KAChCrB,EAAUsB,MAAM,CACdC,YAAa,IACbC,cAAe,IACfC,cAAe,IACfC,cAAe,IACfC,QAAS,WACTC,0BAA2BvC,EAAQE,QAGvCsC,KACC,MAEL,IAqDF,MAgBMC,EAAa,IAdG,EAACC,EAAiBC,EAAmC,QACzE,MAAMC,EAAOF,EACPG,EAAY,CAChBC,cAAezC,EAAMyC,cACrBC,QAAS1C,EAAM0C,QACfC,SAAU3C,EAAM2C,SAChBC,MAAO5C,EAAM4C,MACbN,eACAO,aAAa,EACbzC,aAAcE,EAAUoB,aAE1BL,EAASyB,IAAiBC,SAASC,EAAAC,EAAAC,cAACX,EAASC,MAGtBW,CAAcC,WAEjCjB,EAAU,KACdd,EACEgC,KAAYC,WACVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAU5B,GAAG,aAAa6B,KAAM,CAAC,MAAO,QAASC,MAAM,UAAUC,KAAK,qBAAeC,QAASvB,QAMtG,OACEY,EAAAC,EAAAC,cAACK,EAAA,GAAD,CACEK,MAAM,8CACNC,oBAAoB,EACpBC,aAAc,CAAC,IAAMC,YAAW9D,EAAc+D,iBAAkB,IAAMC,YAAchE,EAAc+D,kBAClGA,gBAAiB/D,EAAc+D,gBAC/BE,OAAQ,MAERlB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUjD,UAAWA,EAAW6D,cAAenE,EAAOoE,aAAcC,IAAYC,eAtF7D,KACrB,MAAMC,EAAQ,GAMd,OAGF,WACE,IAAIC,EAAQ,EACZ,IAAK,IAAIC,EAAI,EAAGA,EAAInE,EAAUoB,YAAYO,QAAQyC,OAAQD,IACR,MAA5CnE,EAAUoB,YAAYO,QAAQ0C,OAAOF,IACvCD,IAGJ,OAAOA,EAdHI,GAAqB,IACvBL,EAAMM,KAAK,iDAGNN,IAgFHvB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChDnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,kBACArC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAY,CAAEC,UAAW,KACpD7D,GAAG,SACH8D,gBAAgB,EAChB7F,MAAM,YACN8F,WAjDC,IAkDDC,aAAc,CAAEC,QAAS,6DACzBC,KAAMC,IAAUC,OAChBC,YAAY,0BAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAY,CAAEU,UAAU,EAAMT,UAAW,OACpE7D,GAAG,YACH8D,gBAAgB,EAChB7F,MAAM,kBACN8F,WA/DC,IAgEDM,YAAY,gCAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAY,CAAEU,UAAU,KACnDtE,GAAG,UACH8D,gBAAgB,EAChB7F,MAAM,aACN8F,WA3EC,IA4EDQ,SA7FpB,SAAyBrG,GACvBS,EAAU6F,SAAS,UAAW,MAC9B,IAAIC,EAAQ,GACRC,EAAI,GAER,IAAK,IAAI5B,EAAI,EAAGA,EAAI5E,EAAM6E,OAAQD,IACR,MAApB5E,EAAM8E,OAAOF,IAAkC,MAApB5E,EAAM8E,OAAOF,GAC1C4B,GAAK,IAELA,GAAKxG,EAAM8E,OAAOF,GAGtB2B,GAASC,EAET/F,EAAU6F,SAAS,UAAWC,IAgFZJ,YAAY,8CAIlBhD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAWC,IAAKzB,KACd9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACE7E,GAAG,mCACH/B,MAAM,uCACN6G,KAAK,iCACLC,SAAUpG,EAAUqG,SACpBd,KAAK,YAGRe,aAvKIC,KACZ,CACLjB,QAASiB,EACTC,UAAW,cAqKGC,CACE,8LAGF,uCAOZ/D,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChDnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,aACArC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CACE1G,UAAWA,EACXqB,GAAG,mCACH/B,MAAM,oBACNoG,YAAY,kCAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAAWA,EACXqB,GAAG,4BACHsF,mBAAoB,CAAEC,gBAAiBpH,GACvC2F,gBAAgB,EAChB7F,MAAM,8BACNsG,SA5JpB,SAA4BrG,GACZ,MAAVA,GACFS,EAAU6F,SAAS,cAAe,KAClC7F,EAAU6F,SAAS,gBAAiB,KAEpCnF,GAAqB,GACrBI,GAAuB,KAEvBJ,GAAqB,GACrBI,GAAuB,KAoJP4E,YAAY,wCACZH,KAAMC,IAAUqB,kBAQ9BnE,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChDnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,cACArC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACE6D,SAAUrG,EACVT,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAW1E,OAAAyE,EAAA,EAAAzE,CAAA,CAAGoF,UAAU,GAASoB,aAAW,EAAG,MAC1E1F,GAAG,cACH8D,gBAAgB,EAChB7F,MAAM,QACN8F,WArJC,IAsJDM,YAAY,mCAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACE6D,SAAUjG,EACVb,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAW1E,OAAAyE,EAAA,EAAAzE,CAAA,CAAGoF,UAAU,GAASoB,aAAW,EAAG,MAC1E1F,GAAG,gBACH8D,gBAAgB,EAChB7F,MAAM,UACN8F,WAlKC,IAmKDM,YAAY,qCAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAW1E,OAAAyE,EAAA,EAAAzE,CAAA,GAAMwG,aAAW,EAAG,MAC1D1F,GAAG,0BACH8D,gBAAgB,EAChB7F,MAAM,iCACNoG,YAAY,4DAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAW1E,OAAAyE,EAAA,EAAAzE,CAAA,CAAGoF,UAAU,GAASoB,aAAW,EAAG,MAC1E1F,GAAG,gBACH8D,gBAAgB,EAChB7F,MAAM,UACN8F,WAzLC,IA0LDM,YAAY,qCAIlBhD,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEjD,UAASO,OAAAyE,EAAA,EAAAzE,QAAAyE,EAAA,EAAAzE,CAAA,GAAOP,GAAP,IAAkBiF,WAAW1E,OAAAyE,EAAA,EAAAzE,CAAA,CAAGoF,UAAU,GAASoB,aAAW,EAAG,MAC1E1F,GAAG,gBACH8D,gBAAgB,EAChB7F,MAAM,UACN8F,WArMC,IAsMDM,YAAY,+EC1T3B,SAASjC,EAAWC,GACzB,IAAIsD,EAAS,KAIb,OAHKtD,EAAgBuD,UACnBD,EAAS,kDAEJA,EALTE,EAAAC,EAAAC,EAAA,sBAAA3D,sCCAO,SAASE,EAAcD,GAC5B,IAAIsD,EAAS,KAMb,OALKtD,EAAgB2D,aACnBL,EACE,0LAGGA,EAPTE,EAAAC,EAAAC,EAAA,sBAAAzD,yFC2Fe2D,IA/EsC5H,KACnD,MAAMC,EAAgBC,YAAmCC,GAASA,EAAMF,eAqCxE,OACE4H,EAAA5E,EAAAC,cAAC4E,EAAA,EAADjH,OAAAkH,OAAA,GACM/H,EADN,CAEEyF,gBAAgB,EAChBuC,gBAAenH,OAAAoH,EAAA,EAAApH,QAAAoH,EAAA,EAAApH,CAAA,GACVb,EAAMgI,iBADI,IAEbE,qBAAsBlI,EAAMkI,qBAC5BC,iBAAiB,EACjBC,qBAAqB,IAEvBC,iBAAgBxH,OAAAoH,EAAA,EAAApH,QAAAoH,EAAA,EAAApH,CAAA,GACXb,EAAMqI,kBADK,IAEdC,QAAS,CACP,CACEC,UAAW,QACX7E,KAAM,SAER,CACE6E,UAAW,YACX7E,KAAM,gBAER,CACE6E,UAAW,iBACX7E,KAAM,QAER,CACE6E,UAAW,YACX7E,KAAM,oBAGVU,aAAcC,IACdmE,kBAlEsB,KAC1B,MAAMC,EAAkC,GAwBxC,OAvBIzI,EAAM0I,WACRD,EAAY5D,KAAK,CACf8D,MAAO,IACPC,iBAAkB,KAClBC,UAAW,YACXhJ,OAAO,IAGPG,EAAM8I,WACRL,EAAY5D,KAAK,CACf8D,MAAO,IACPC,iBAAkB,KAClBC,UAAW,YACXhJ,OAAO,IAIPG,EAAMkI,sBACRlI,EAAMkI,qBAAqBa,QAAQC,IACjCP,EAAY5D,KAAKmE,KAId,CACL,CACEJ,iBAAkB,KAClBH,cACAI,UAAW,qBACXhJ,MAAOG,EAAMiJ,mBAAqBhJ,EAAc+D,gBAAgBkF,gBAAgBvH,MAqChFwH,aAAc,yBAEhBvJ,MAAOI,EAAMJ,MAAQI,EAAMJ,MAAQ,kBACnCoG,YAAahG,EAAMgG,YAAchG,EAAMgG,YAAc,4BACrDH,KAAMC,IAAUsD,oDCvEtB5B,EAAAC,EAAAC,EAAA,sBAAArD,IAAO,MAAMA,EAAa,+FCjB1B,IAAAgF,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA,GAAA+B,EAAA/B,EAAA,GAAAgC,EAAAhC,EAAAiC,EAAAF,GAAAG,EAAAlC,EAAA,GAAAmC,EAAAnC,EAAAiC,EAAAC,GAAAE,EAAApC,EAAA,GAAAqC,EAAArC,EAAAiC,EAAAG,GAAAE,EAAAtC,EAAA,GAMAuC,EAAA,CACAxD,IAAOuD,EAAA,EACPE,UAAaL,EAAA1G,EAASgH,OACtBC,UAAaP,EAAA1G,EAASkH,QAMtB9E,EAAA,SAAArF,GACA,IAAAgK,EAAAhK,EAAAgK,UACAE,EAAAlK,EAAAkK,UACAE,EAAApK,EAAAuG,IACA8D,EAAmBxJ,OAAAyI,EAAA,EAAAzI,CAA6Bb,EAAA,iCAEhDsK,EAAgBzJ,OAAAiJ,EAAA,EAAAjJ,CAAgBgJ,IAAUG,EAAA,cAAAE,GAC1C,OAASV,EAAAvG,EAAKC,cAAAkH,EAAoBvJ,OAAAwI,EAAA,EAAAxI,CAAQ,GAAGwJ,EAAA,CAC7CL,UAAAM,MAIAjF,EAAA0E,YACA1E,EAAAkF,aAjBA,CACAhE,IAAA,OAiBemB,EAAA,sCCQfF,EAAAC,EAAAC,EAAA,sBAAArD,IAAO,MAAMA,EAAa,+ICNXmG,IA3B2BxK,IAEtC6H,EAAA5E,EAAAC,cAACuH,EAAA,EAAD5J,OAAAkH,OAAA,GACM/H,EADN,CAEEyF,gBAAgB,EAChB4C,iBAAgBxH,OAAAoH,EAAA,EAAApH,QAAAoH,EAAA,EAAApH,CAAA,GACXb,EAAMqI,kBADK,IAEdC,QAAS,CACP,CACEC,UAAW,SACX7E,KAAM,aAER,CACE6E,UAAW,YACX7E,KAAM,oBAGVU,aAAcC,IACd8E,aAAc,8BAEhBvJ,MAAOI,EAAMJ,MAAQI,EAAMJ,MAAQ,2BACnCoG,YAAahG,EAAMgG,YAAchG,EAAMgG,YAAc,qCACrDH,KAAMC,IAAUsD,mDClBtB5B,EAAAC,EAAAC,EAAA,sBAAArD,IAAO,MAAMA,EAAa,gKCuBX2C,IA3B+ChH,IAE1D6H,EAAA5E,EAAAC,cAACuH,EAAA,EAAD5J,OAAAkH,OAAA,GACM/H,EADN,CAEEyF,gBAAgB,EAChB4C,iBAAgBxH,OAAAoH,EAAA,EAAApH,QAAAoH,EAAA,EAAApH,CAAA,GACXb,EAAMqI,kBADK,IAEdC,QAAS,CACP,CACEC,UAAW,SACX7E,KAAM,aAER,CACE6E,UAAW,cACX7E,KAAM,sBAGVU,aAAcC,IACd8E,aAAc,kDAEhBvJ,MAAOI,EAAMJ,MAAQI,EAAMJ,MAAQ,8BACnCoG,YAAahG,EAAMgG,YAAchG,EAAMgG,YAAc,wCACrDH,KAAMC,IAAUsD,sNCySPhG,UA/RiFpD,KAC9F,MAAMI,EAAeC,aAAgBL,GAC/BM,EAAYC,YAAwC,CAAEC,cAAeJ,EAAcK,KAAM,WACzFY,EAAWC,cAEXoJ,EAAcC,mBACd1K,EAAgBC,YAAmCC,GAASA,EAAMF,eAExEsB,oBACE,KACMvB,EAAM6C,aACRrB,WAAW,KACTlB,EAAUsB,MAAMxB,IACf,MAGP,IAGF,MAMMwK,EAAsB,CAACC,EAAkC,KAAMC,EAAS,QAC5E,MAAMC,EAASzK,EAAUoB,YACpBD,aAAQsJ,EAAO7B,mBAClB7H,EAAS2J,KACTC,aAASF,EAAO7B,gBAAiB7E,IAAY,CAC3C6G,aAAcC,IACZ9J,EAAS+J,KAAgBC,gBACzB,MAAMC,EAAOR,EAASK,EAAIL,GAAUK,EACpC7K,EAAU6F,SAAStF,OAAO0K,KAAKD,GAAME,IAAIC,IAAG,CAAOC,CAACD,GAAMH,EAAKG,OAC3DZ,GACFA,EAAOM,QAOXH,EAAc,IAClBI,KAAgBO,aAAa,CAC3BC,UAAU,EACV5B,UAAW,6CACXvG,MAAO,QACPoI,SAAS,EACThM,MAAO,MAGL+B,EAAQ,KACZtB,EAAU6F,SAAS,kBAAmB,OAGlC2F,EAAW,KACfpB,EAAYqB,QAAQC,OAAM,IAGtBC,EAAe,KACnBvB,EAAYqB,QAAQG,SAASC,KAAKvK,IAG9BwK,EAA6C,CACjDC,cAAe,CACbzM,MAAO,UAETkM,SAAU,KACRlK,IACAkK,KAEFQ,UAAWL,GAkCPM,EAAkB,IACtB1E,EAAA5E,EAAAC,cAAA2E,EAAA5E,EAAAuJ,SAAA,KACE3E,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAACyJ,EAAA,EAAD,CAAM1H,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChD0C,EAAA5E,EAAAC,cAAC0J,EAAA,EAAD,KACE/E,EAAA5E,EAAAC,cAAC2J,EAAA,EAAD,+BACAhF,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,kBACH/B,MAAM,kBACN8F,WA1BG,IA2BHM,YAAY,yCAIlB6B,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,qBACH/B,MAAM,wBACN8F,WArCG,IAsCHM,YAAY,+CAIlB6B,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,sBACH/B,MAAM,4BACN8F,WAhDG,IAiDHM,YAAY,uDAQ1B6B,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAACyJ,EAAA,EAAD,CAAM1H,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChD0C,EAAA5E,EAAAC,cAAC0J,EAAA,EAAD,KACE/E,EAAA5E,EAAAC,cAAC2J,EAAA,EAAD,mBACAhF,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,uBACH/B,MAAM,QACNoG,YAAY,sDACZ0C,WAAW,MAIjBb,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,4BACH/B,MAAM,QACNoG,YAAY,iGACZ8C,WAAW,UAQzBjB,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAACyJ,EAAA,EAAD,CAAM1H,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChD0C,EAAA5E,EAAAC,cAAC0J,EAAA,EAAD,KACE/E,EAAA5E,EAAAC,cAAC2J,EAAA,EAAD,gBACAhF,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,oBACH/B,MAAM,QACNoG,YAAY,kDACZ0C,WAAW,MAIjBb,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,yBACH/B,MAAM,QACNoG,YAAY,6FACZ8C,WAAW,UAQzBjB,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAACyJ,EAAA,EAAD,CAAM1H,MAAO,CAAEC,aAAc,OAAQC,YAAa,SAChD0C,EAAA5E,EAAAC,cAAC0J,EAAA,EAAD,KACE/E,EAAA5E,EAAAC,cAAC2J,EAAA,EAAD,uBACAhF,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,2BACH/B,MAAM,QACNoG,YAAY,yDACZ0C,WAAW,MAIjBb,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAAC4J,EAAA,EAAD,CACExM,UAAWA,EACXqB,GAAG,gCACH/B,MAAM,QACNoG,YAAY,oGACZ8C,WAAW,WAW7B,OACEjB,EAAA5E,EAAAC,cAAC6J,EAAA,GAAD,CACEnJ,MAAM,oEACNC,oBAAoB,EACpBC,aAAc,CAAC,IAAMC,YAAW9D,EAAc+D,iBAAkB,IAAMC,YAAchE,EAAc+D,kBAClGA,gBAAiB/D,EAAc+D,gBAC/BgJ,UAAgC,IAAtBhN,EAAM6C,YAChBqB,OAAQ,MAER2D,EAAA5E,EAAAC,cAAC6J,EAAA,EAAD,CACEE,IAAKvC,EACLpK,UAAWA,EACX6D,cAAenE,EACfoE,aAAcC,IACd6I,gBAAgB,EAChB5I,eA1LiB,KACrB,MAAMC,EAAQ,GAcd,OAZK9C,aAAQnB,EAAUoB,YAAYyL,uBAA0B1L,aAAQnB,EAAUoB,YAAY0L,4BACzF7I,EAAMM,KAAK,oEAGRpD,aAAQnB,EAAUoB,YAAY2L,oBAAuB5L,aAAQnB,EAAUoB,YAAY4L,yBACtF/I,EAAMM,KAAK,iEAGRpD,aAAQnB,EAAUoB,YAAY6L,2BAA8B9L,aAAQnB,EAAUoB,YAAY8L,gCAC7FjJ,EAAMM,KAAK,wEAGNN,GA4KHkJ,aAvKe,KACnBC,YACE,CAAE/L,GAAI1B,EAAc+D,gBAAgB2J,QAAQhM,IAC5C,CACEuJ,aAAclH,IACZ3C,EAASuM,YAAmB5J,UAoKP,IAAtBhE,EAAM6C,YACLgF,EAAA5E,EAAAC,cAAA,OAAK8G,UAAU,OACZuC,IACD1E,EAAA5E,EAAAC,cAAC6J,EAAA,EAAD,CAAYd,aAAcA,EAAc4B,YAAa/B,EAAUgC,cAAc,OAAOC,eAAe,YAGrGlG,EAAA5E,EAAAC,cAAC6J,EAAA,GAAD,CAAQzM,UAAWA,EAAW0N,kBA1PjBC,IACG,iBAAlBA,GACFrD,KAwPmEsD,YAAa9B,GAC1EvE,EAAA5E,EAAAC,cAAC6J,EAAA,GAAD,CAAYpL,GAAG,kBAAkBiC,MAAM,6CACrCiE,EAAA5E,EAAAC,cAACuJ,EAAA,EAAD,KACE5E,EAAA5E,EAAAC,cAACwJ,EAAA,EAAD,KACE7E,EAAA5E,EAAAC,cAACiL,EAAA,EAAD,CAAmBxM,GAAG,kBAAkBrB,UAASO,OAAAoH,EAAA,EAAApH,QAAAoH,EAAA,EAAApH,CAAA,GAAOP,GAAP,IAAkBiF,WAAY,CAAEU,UAAU,UAIjG4B,EAAA5E,EAAAC,cAAC6J,EAAA,GAAD,CAAYpL,GAAG,eAAeiC,MAAM,uBACjC2I","file":"static/js/81.7e17ae17.chunk.js","sourcesContent":["export const O_PROPRIO = { label: 'O Próprio', value: 'P' };\r\nexport const DE_PARA = { label: 'De-Para', value: 'D' };\r\n\r\nexport const TIPO_PLANO_CONTA_REFERENCIAL_ENUM_VALUES = [O_PROPRIO, DE_PARA];\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, CardTitle, Col, CustomInput, FormGroup, Row } from 'reactstrap';\r\nimport {\r\n  dockActions,\r\n  DockItem,\r\n  DockItemList,\r\n  EditForm,\r\n  EditViewProps,\r\n  getSelectedItem,\r\n  InputGroupInline,\r\n  InputTooltipProps,\r\n  InputType,\r\n  isEmpty,\r\n  onlyNumber,\r\n  WindowComponent,\r\n  withTooltip,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, GrupoPlanoConta } from '../../../../models/dtos/ger/grupoPlanoConta';\r\nimport { DE_PARA, TIPO_PLANO_CONTA_REFERENCIAL_ENUM_VALUES } from '../../../../models/enumerated/mcg/tipoPlanoContaReferencialEnum';\r\nimport { multiPageActions, Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaMCGReferencialInstituicaoIS from '../../../components/mcg/planoContaMCGReferencialInstituicao/PlanoContaMCGReferencialInstituicaoIS';\r\nimport GrupoPlanoContaConfigEditView from './GrupoPlanoContaConfigEditView';\r\n\r\ninterface GrupoPlanoContaEditViewProps extends EditViewProps<GrupoPlanoConta> {}\r\n\r\nconst GrupoPlanoContaEditView: FC<GrupoPlanoContaEditViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const selectedItem = getSelectedItem(props);\r\n\r\n  const formProps = useForm<GrupoPlanoConta>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n\r\n  const [isEnableDigitoAtivo, setEnableDigitoAtivo] = useState(false);\r\n  const [isEnableDigitoPassivo, setEnableDigitoPassivo] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const propToolTip = (messagem: string): InputTooltipProps => {\r\n    return {\r\n      message: messagem,\r\n      placement: 'top-start',\r\n    };\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setTimeout(() => {\r\n        if (isEmpty(formProps.getValues().id)) {\r\n          formProps.reset({\r\n            digitoAtivo: '1',\r\n            digitoDespesa: '4',\r\n            digitoPassivo: '2',\r\n            digitoReceita: '3',\r\n            mascara: '########',\r\n            tipoPlanoContaReferencial: DE_PARA.value,\r\n          });\r\n        }\r\n        setDock();\r\n      }, 800);\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (verifyMaskLength() > 25) {\r\n      erros.push('Máscara não deve exceder 25 caracteres.');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  function verifyMaskLength(): number {\r\n    let count = 0;\r\n    for (let i = 0; i < formProps.getValues().mascara.length; i++) {\r\n      if (formProps.getValues().mascara.charAt(i) === '#') {\r\n        count++;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  function ajustarDigitoConta(value): void {\r\n    if (value === 'P') {\r\n      formProps.setValue('digitoAtivo', '1');\r\n      formProps.setValue('digitoPassivo', '2');\r\n\r\n      setEnableDigitoAtivo(true);\r\n      setEnableDigitoPassivo(true);\r\n    } else {\r\n      setEnableDigitoAtivo(false);\r\n      setEnableDigitoPassivo(false);\r\n    }\r\n  }\r\n\r\n  function adjustMaskChars(value): void {\r\n    formProps.setValue('mascara', null);\r\n    let input = '';\r\n    let r = '';\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n      if (value.charAt(i) !== '-' && value.charAt(i) !== '.') {\r\n        r += '#';\r\n      } else {\r\n        r += value.charAt(i);\r\n      }\r\n    }\r\n    input += r;\r\n\r\n    formProps.setValue('mascara', input);\r\n  }\r\n\r\n  const defaultWidth = 105;\r\n\r\n  const openMultiPage = (componente: any, onDockSubmit: (formData) => void = null) => {\r\n    const Page = componente as FC<any>;\r\n    const pageProps = {\r\n      editItemProps: props.editItemProps,\r\n      history: props.history,\r\n      location: props.location,\r\n      match: props.match,\r\n      onDockSubmit,\r\n      openViaDock: true,\r\n      selectedItem: formProps.getValues(),\r\n    };\r\n    dispatch(multiPageActions.showPage(<Page {...pageProps} />));\r\n  };\r\n\r\n  const openConfig = () => openMultiPage(GrupoPlanoContaConfigEditView);\r\n\r\n  const setDock = () => {\r\n    dispatch(\r\n      dockActions.createDock(\r\n        <DockItemList>\r\n          <DockItem id=\"dockConfig\" icon={['fas', 'cogs']} color=\"primary\" text=\"Configuração\" onClick={openConfig} />\r\n        </DockItemList>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Grupo de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      globalParameter={globalReducer.globalParameter}\r\n      wikiId={1346}\r\n    >\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} validateExtras={validateExtras}>\r\n        <Row>\r\n          <Col>\r\n            <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n              <CardBody>\r\n                <CardTitle>Básico</CardTitle>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={{ ...formProps, validation: { maxLength: 8 } }}\r\n                      id=\"codigo\"\r\n                      isPrependLabel={true}\r\n                      label=\"Código\"\r\n                      labelWidth={defaultWidth}\r\n                      tooltipProps={{ message: 'Preenchimento Opcional - Codificação  Automática' }}\r\n                      type={InputType.NUMBER}\r\n                      placeholder=\"Informe o código\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={{ ...formProps, validation: { required: true, maxLength: 120 } }}\r\n                      id=\"descricao\"\r\n                      isPrependLabel={true}\r\n                      label=\"Descrição\"\r\n                      labelWidth={defaultWidth}\r\n                      placeholder=\"Informe a Descrição\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={{ ...formProps, validation: { required: true } }}\r\n                      id=\"mascara\"\r\n                      isPrependLabel={true}\r\n                      label=\"Máscara\"\r\n                      labelWidth={defaultWidth}\r\n                      onChange={adjustMaskChars}\r\n                      placeholder=\"Informe a máscara do Plano de Contas\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <FormGroup tag={Row}>\r\n                  <Col>\r\n                    <CustomInput\r\n                      id=\"idutilizarContaSinteticaCompleta\"\r\n                      label=\"Utilizar conta sintética completa\"\r\n                      name=\"utilizarContaSinteticaCompleta\"\r\n                      innerRef={formProps.register}\r\n                      type=\"switch\"\r\n                    />\r\n                  </Col>\r\n                  {withTooltip(\r\n                    propToolTip(\r\n                      'Utilizar conta sintética completa. Ex: Conta Ativo - 1.0.0.0000. Uma vez configurada essa opção o sistema' +\r\n                        ' não irá respeitar a hierarquia sequencial de Contas Contábeis.'\r\n                    ),\r\n                    'utilizarContaSinteticaCompleta'\r\n                  )}\r\n                </FormGroup>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n              <CardBody>\r\n                <CardTitle>SPED</CardTitle>\r\n                <Row>\r\n                  <Col>\r\n                    <PlanoContaMCGReferencialInstituicaoIS\r\n                      formProps={formProps}\r\n                      id=\"planoContaReferencialInstituicao\"\r\n                      label=\"Instituição\"\r\n                      placeholder=\"Informe a Instituição\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={formProps}\r\n                      id=\"tipoPlanoContaReferencial\"\r\n                      inputDropDownProps={{ optionsProvider: TIPO_PLANO_CONTA_REFERENCIAL_ENUM_VALUES }}\r\n                      isPrependLabel={true}\r\n                      label=\"Plano de Contas Referencial\"\r\n                      onChange={ajustarDigitoConta}\r\n                      placeholder=\"Informe o Plano de Contas Referencial\"\r\n                      type={InputType.DROP_DOWN}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n              <CardBody>\r\n                <CardTitle>Conta</CardTitle>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      disabled={isEnableDigitoAtivo}\r\n                      formProps={{ ...formProps, validation: { required: true, ...onlyNumber(0, 1) } }}\r\n                      id=\"digitoAtivo\"\r\n                      isPrependLabel={true}\r\n                      label=\"Ativo\"\r\n                      labelWidth={defaultWidth}\r\n                      placeholder=\"Informe o dígito do Ativo\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      disabled={isEnableDigitoPassivo}\r\n                      formProps={{ ...formProps, validation: { required: true, ...onlyNumber(0, 1) } }}\r\n                      id=\"digitoPassivo\"\r\n                      isPrependLabel={true}\r\n                      label=\"Passivo\"\r\n                      labelWidth={defaultWidth}\r\n                      placeholder=\"Informe o dígito do Passivo\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={{ ...formProps, validation: { ...onlyNumber(0, 3) } }}\r\n                      id=\"digitoPatrimonioLiquido\"\r\n                      isPrependLabel={true}\r\n                      label=\"Grupo Patrimônio Líquido\"\r\n                      placeholder=\"Informe o dígito do Grupo Patrimônio Líquido\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={{ ...formProps, validation: { required: true, ...onlyNumber(0, 1) } }}\r\n                      id=\"digitoReceita\"\r\n                      isPrependLabel={true}\r\n                      label=\"Receita\"\r\n                      labelWidth={defaultWidth}\r\n                      placeholder=\"Informe o dígito da Receita\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <InputGroupInline\r\n                      formProps={{ ...formProps, validation: { required: true, ...onlyNumber(0, 1) } }}\r\n                      id=\"digitoDespesa\"\r\n                      isPrependLabel={true}\r\n                      label=\"Despesa\"\r\n                      labelWidth={defaultWidth}\r\n                      placeholder=\"Informe o dígito da Despesa\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaEditView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import { Basic } from 'summer';\r\n\r\nexport interface PlanoContaReferencialInstituicao extends Basic {\r\n  codigo?: string;\r\n  instituicao?: string;\r\n  codigoECD?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencialinstituicao';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaReferencialInstituicao';\r\n\r\nconst PlanoContaMCGReferencialInstituicaoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'instituicao',\r\n            text: 'Instituição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaMCGReferencialInstituicaoSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Referencial'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas Referencial'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaMCGReferencialInstituicaoIS;\r\n","import React, { FC, useEffect, useRef } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap';\r\nimport {\r\n  EditForm,\r\n  EditFormRefProps,\r\n  EditViewProps,\r\n  findById,\r\n  getSelectedItem,\r\n  isEmpty,\r\n  ProcessBar,\r\n  progressActions,\r\n  WindowComponent,\r\n  Wizard,\r\n  WizardActionFinishProps,\r\n  WizardPage,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, GrupoPlanoConta } from '../../../../models/dtos/ger/grupoPlanoConta';\r\nimport { atualizarGlobalParameter } from '../../../../services/ger.service';\r\nimport { GlobalState, setGlobalParameter } from '../../../../store/ducks/global.duck';\r\nimport { Reducers } from '../../../../store/ducks/index';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface ScreenFields {\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n}\r\n\r\ninterface GrupoPlanoContaConfigEditProps extends EditViewProps<GrupoPlanoConta> {\r\n  openViaDock?: boolean;\r\n}\r\n\r\nconst GrupoPlanoContaConfigEditView: FC<GrupoPlanoContaConfigEditProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<GrupoPlanoConta & ScreenFields>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n  const dispatch = useDispatch();\r\n\r\n  const editFormRef = useRef<EditFormRefProps>();\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.openViaDock) {\r\n        setTimeout(() => {\r\n          formProps.reset(selectedItem);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onPageChange = currentPageId => {\r\n    if (currentPageId === 'configuracao') {\r\n      loadGrupoPlanoConta();\r\n    }\r\n  };\r\n\r\n  const loadGrupoPlanoConta = (onLoad: (rawData?: any) => void = null, mapKey = null) => {\r\n    const values = formProps.getValues();\r\n    if (!isEmpty(values.grupoPlanoConta)) {\r\n      dispatch(showLoading());\r\n      findById(values.grupoPlanoConta, CLASS_NAME, {\r\n        thenFunction: res => {\r\n          dispatch(progressActions.hideProgress());\r\n          const data = mapKey ? res[mapKey] : res;\r\n          formProps.setValue(Object.keys(data).map(key => ({ [key]: data[key] })));\r\n          if (onLoad) {\r\n            onLoad(res);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const reset = () => {\r\n    formProps.setValue('grupoPlanoConta', null);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    editFormRef.current.close(true);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    editFormRef.current.submit().then(reset);\r\n  };\r\n\r\n  const wizardFinishProps: WizardActionFinishProps = {\r\n    confirmButton: {\r\n      label: 'Salvar',\r\n    },\r\n    onCancel: () => {\r\n      reset();\r\n      onCancel();\r\n    },\r\n    onConfirm: handleSubmit,\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaFornecedor) && !isEmpty(formProps.getValues().planoContaFornecedorGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Fornecedor');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaCliente) && !isEmpty(formProps.getValues().planoContaClienteGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Cliente');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaTransportadora) && !isEmpty(formProps.getValues().planoContaTransportadoraGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para a Transportadora');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  const defaultWidth = 200;\r\n\r\n  const afterPersist = (): void => {\r\n    atualizarGlobalParameter(\r\n      { id: globalReducer.globalParameter.usuario.id },\r\n      {\r\n        thenFunction: globalParameter => {\r\n          dispatch(setGlobalParameter(globalParameter));\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const getMainEditView = () => (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Contas de Encerramento</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaLucro\"\r\n                    label=\"Lucro Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Lucro Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaPrejuizo\"\r\n                    label=\"Prejuízo Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Prejuízo Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaResultado\"\r\n                    label=\"Resultado do Exercício\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Resultado do Exercício\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Fornecedor</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedor\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os fornecedores.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedorGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os fornecedores.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Cliente</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaCliente\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os clientes.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaClienteGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os clientes.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Transportadora</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadora\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todas as transportadoras.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadoraGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para as transportadoras.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Configuração de Grupo de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      globalParameter={globalReducer.globalParameter}\r\n      wrapBody={props.openViaDock === true}\r\n      wikiId={1363}\r\n    >\r\n      <EditForm\r\n        ref={editFormRef}\r\n        formProps={formProps}\r\n        editViewProps={props}\r\n        dtoClassName={CLASS_NAME}\r\n        externalSubmit={true}\r\n        validateExtras={validateExtras}\r\n        afterPersist={afterPersist}\r\n      >\r\n        {props.openViaDock === true ? (\r\n          <div className=\"m-3\">\r\n            {getMainEditView()}\r\n            <ProcessBar handleSubmit={handleSubmit} handleClose={onCancel} btnSubmitIcon=\"save\" btnSubmitLabel=\"Salvar\" />\r\n          </div>\r\n        ) : (\r\n          <Wizard formProps={formProps} onAfterPageChange={onPageChange} finishProps={wizardFinishProps}>\r\n            <WizardPage id=\"grupoPlanoConta\" title=\"Seleção do Grupo de Plano de Contas\">\r\n              <Row>\r\n                <Col>\r\n                  <GrupoPlanoContaIS id=\"grupoPlanoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n                </Col>\r\n              </Row>\r\n            </WizardPage>\r\n            <WizardPage id=\"configuracao\" title=\"Configurações\">\r\n              {getMainEditView()}\r\n            </WizardPage>\r\n          </Wizard>\r\n        )}\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaConfigEditView;\r\n"],"sourceRoot":""}