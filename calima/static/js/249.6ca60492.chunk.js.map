{"version":3,"sources":["views/pages/mcg/bancoExtratoPlanoConta/BancoExtratoPlanoContaEditView.tsx","dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/mcg/bancoMCG.ts"],"names":["BancoExtratoPlanoContaEditView","props","globalReducer","useSelector","state","_useForm","useForm","mode","reset","formProps","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","useEffect","globalParameter","empresa","setTimeout","id","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_7__","title","dependencies","hasEmpresa","hasEmpresaMCG","editViewProps","dtoClassName","CLASS_NAME","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_11__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","maxLength","isPrependLabel","label","placeholder","result","__webpack_require__","d","__webpack_exports__","empresaMCG","PlanoContaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","value","sintetica","push","idGrupoPlanoConta","grupoPlanoConta","forEach","filtro","searchViewId","type","InputType","INPUT_SEARCH"],"mappings":"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","file":"static/js/249.6ca60492.chunk.js","sourcesContent":["import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { EditForm, EditViewProps, InputGroupInline, WindowComponent } from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { BancoMCG, CLASS_NAME } from '../../../../models/dtos/mcg/bancoMCG';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface BancoExtratoPlanoContaEditView extends EditViewProps<BancoMCG> {}\r\n\r\nconst BancoExtratoPlanoContaEditView: FC<BancoExtratoPlanoContaEditView & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { reset, ...formProps } = useForm<BancoMCG>({ mode: 'onBlur' });\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa !== null) {\r\n        const { empresa } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          reset({\r\n            empresa: {\r\n              id: empresa.id,\r\n            },\r\n          });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Banco - Plano Contas Extratos\"\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n    >\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME}>\r\n        <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"banco\"\r\n              label=\"Banco\"\r\n              placeholder=\"Informe o Banco\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"agencia\"\r\n              label=\"Agência\"\r\n              placeholder=\"Informe a Agência\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"conta\"\r\n              label=\"Conta\"\r\n              placeholder=\"Informe a Conta \"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default BancoExtratoPlanoContaEditView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { Empresa } from '../ger/empresa';\r\nimport { PlanoConta } from '../ger/planoConta';\r\n\r\nexport interface BancoMCG extends Basic {\r\n  agencia?: string;\r\n  banco?: string;\r\n  conta?: string;\r\n  empresa?: Empresa;\r\n  planoConta?: PlanoConta;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.bancomcg';\r\n"],"sourceRoot":""}