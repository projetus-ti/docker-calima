{"version":3,"sources":["dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/CardTitle.js","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","views/pages/mcg/grupoPlanoConta/GrupoPlanoContaConfigEditView.tsx"],"names":["hasEmpresa","globalParameter","result","empresa","__webpack_require__","d","__webpack_exports__","hasEmpresaMCG","empresaMCG","PlanoContaIS","props","globalReducer","useSelector","state","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_3__","Object","assign","isPrependLabel","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","expressions","analitica","push","alias","conditionalGroup","fieldName","value","sintetica","forEach","filtro","idGrupoPlanoConta","grupoPlanoConta","id","searchViewId","label","placeholder","type","InputType","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","className","string","cssModule","object","CardTitle","Tag","attributes","classes","defaultProps","GrupoPlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_2__","GrupoPlanoContaConfigEditView","selectedItem","getSelectedItem","formProps","useForm","defaultValues","mode","dispatch","useDispatch","editFormRef","useRef","useEffect","openViaDock","setTimeout","reset","loadGrupoPlanoConta","onLoad","mapKey","values","getValues","isEmpty","showLoading","findById","thenFunction","res","progressActions","hideProgress","data","setValue","keys","map","key","[object Object]","showProgress","animated","color","striped","onCancel","current","close","handleSubmit","submit","then","wizardFinishProps","confirmButton","onConfirm","getMainEditView","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","style","marginBottom","borderWidth","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_16__","labelWidth","summer__WEBPACK_IMPORTED_MODULE_9__","title","useGlobalParameter","dependencies","wrapBody","wikiId","ref","editViewProps","externalSubmit","validateExtras","erros","planoContaFornecedor","planoContaFornecedorGrupo","planoContaCliente","planoContaClienteGrupo","planoContaTransportadora","planoContaTransportadoraGrupo","afterPersist","atualizarGlobalParameter","usuario","setGlobalParameter","handleClose","btnSubmitIcon","btnSubmitLabel","onAfterPageChange","currentPageId","finishProps","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_15__","validation","required"],"mappings":"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","file":"static/js/151.84a061f7.chunk.js","sourcesContent":["import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import React, { FC, useEffect, useRef } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap';\r\nimport {\r\n  EditForm,\r\n  EditFormRefProps,\r\n  EditViewProps,\r\n  findById,\r\n  getSelectedItem,\r\n  isEmpty,\r\n  ProcessBar,\r\n  progressActions,\r\n  WindowComponent,\r\n  Wizard,\r\n  WizardActionFinishProps,\r\n  WizardPage,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, GrupoPlanoConta } from '../../../../models/dtos/ger/grupoPlanoConta';\r\nimport { atualizarGlobalParameter } from '../../../../services/ger.service';\r\nimport { GlobalState, setGlobalParameter } from '../../../../store/ducks/global.duck';\r\nimport { Reducers } from '../../../../store/ducks/index';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface ScreenFields {\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n}\r\n\r\ninterface GrupoPlanoContaConfigEditProps extends EditViewProps<GrupoPlanoConta> {\r\n  openViaDock?: boolean;\r\n}\r\n\r\nconst GrupoPlanoContaConfigEditView: FC<GrupoPlanoContaConfigEditProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<GrupoPlanoConta & ScreenFields>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n  const dispatch = useDispatch();\r\n\r\n  const editFormRef = useRef<EditFormRefProps>();\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.openViaDock) {\r\n        setTimeout(() => {\r\n          formProps.reset(selectedItem);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onPageChange = currentPageId => {\r\n    if (currentPageId === 'configuracao') {\r\n      loadGrupoPlanoConta();\r\n    }\r\n  };\r\n\r\n  const loadGrupoPlanoConta = (onLoad: (rawData?: any) => void = null, mapKey = null) => {\r\n    const values = formProps.getValues();\r\n    if (!isEmpty(values.grupoPlanoConta)) {\r\n      dispatch(showLoading());\r\n      findById(values.grupoPlanoConta, CLASS_NAME, {\r\n        thenFunction: res => {\r\n          dispatch(progressActions.hideProgress());\r\n          const data = mapKey ? res[mapKey] : res;\r\n          formProps.setValue(Object.keys(data).map(key => ({ [key]: data[key] })));\r\n          if (onLoad) {\r\n            onLoad(res);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const reset = () => {\r\n    formProps.setValue('grupoPlanoConta', null);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    editFormRef.current.close(true);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    editFormRef.current.submit().then(reset);\r\n  };\r\n\r\n  const wizardFinishProps: WizardActionFinishProps = {\r\n    confirmButton: {\r\n      label: 'Salvar',\r\n    },\r\n    onCancel: () => {\r\n      reset();\r\n      onCancel();\r\n    },\r\n    onConfirm: handleSubmit,\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaFornecedor) && !isEmpty(formProps.getValues().planoContaFornecedorGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Fornecedor');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaCliente) && !isEmpty(formProps.getValues().planoContaClienteGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Cliente');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaTransportadora) && !isEmpty(formProps.getValues().planoContaTransportadoraGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para a Transportadora');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  const defaultWidth = 200;\r\n\r\n  const afterPersist = (): void => {\r\n    atualizarGlobalParameter(\r\n      { id: globalReducer.globalParameter.usuario.id },\r\n      {\r\n        thenFunction: globalParameter => {\r\n          dispatch(setGlobalParameter(globalParameter));\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const getMainEditView = () => (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Contas de Encerramento</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaLucro\"\r\n                    label=\"Lucro Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Lucro Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaPrejuizo\"\r\n                    label=\"Prejuízo Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Prejuízo Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaResultado\"\r\n                    label=\"Resultado do Exercício\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Resultado do Exercício\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Fornecedor</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedor\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os fornecedores.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedorGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os fornecedores.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Cliente</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaCliente\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os clientes.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaClienteGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os clientes.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Transportadora</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadora\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todas as transportadoras.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadoraGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para as transportadoras.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Configuração de Grupo de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      globalParameter={globalReducer.globalParameter}\r\n      wrapBody={props.openViaDock === true}\r\n      wikiId={1363}\r\n    >\r\n      <EditForm\r\n        ref={editFormRef}\r\n        formProps={formProps}\r\n        editViewProps={props}\r\n        dtoClassName={CLASS_NAME}\r\n        externalSubmit={true}\r\n        validateExtras={validateExtras}\r\n        afterPersist={afterPersist}\r\n      >\r\n        {props.openViaDock === true ? (\r\n          <div className=\"m-3\">\r\n            {getMainEditView()}\r\n            <ProcessBar handleSubmit={handleSubmit} handleClose={onCancel} btnSubmitIcon=\"save\" btnSubmitLabel=\"Salvar\" />\r\n          </div>\r\n        ) : (\r\n          <Wizard formProps={formProps} onAfterPageChange={onPageChange} finishProps={wizardFinishProps}>\r\n            <WizardPage id=\"grupoPlanoConta\" title=\"Seleção do Grupo de Plano de Contas\">\r\n              <Row>\r\n                <Col>\r\n                  <GrupoPlanoContaIS id=\"grupoPlanoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n                </Col>\r\n              </Row>\r\n            </WizardPage>\r\n            <WizardPage id=\"configuracao\" title=\"Configurações\">\r\n              {getMainEditView()}\r\n            </WizardPage>\r\n          </Wizard>\r\n        )}\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaConfigEditView;\r\n"],"sourceRoot":""}