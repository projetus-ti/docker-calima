{"version":3,"sources":["views/components/mfp/banco/BancoIS.tsx","views/pages/mfp/agencia/AgenciaEmailEditView.tsx","views/pages/mfp/agencia/AgenciaTelefoneEditView.tsx","views/pages/mfp/agencia/AgenciaEditView.tsx","models/dtos/ger/cepUF.ts","models/dtos/ger/cepLocalidade.ts","views/components/ger/cepUFIS/CepUFIS.tsx","views/components/ger/cepLocalidadeIS/CepLocalidadeIS.tsx","models/dtos/ger/cepBairro.ts","models/dtos/ger/cepLogradouro.ts","models/dtos/ger/cepTitulo.ts","views/components/ger/cepBairroIS/CepBairroIS.tsx","views/components/ger/cepTituloIS/CepTituloIS.tsx","views/components/ger/cepLogradouro/CepLogradouroIS.tsx","hooks/useCepManager.ts","utilities/tipoTelefoneFormatter.ts","models/dtos/mfp/banco.ts","models/dtos/ger/agencia.ts"],"names":["BancoIS","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","type","InputType","INPUT_SEARCH","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","AgenciaEmailEditView","formProps","useForm","defaultValues","objectSpread2","selectedItem","mode","react_default","summer_esm","handleSubmit","handleCancel","Row","Col","validation","maxLength","id","isPrependLabel","label","labelWidth","placeholder","required","EMAIL","AgenciaTelefoneEditView","validateExtras","formValues","currentValues","parentObject","erros","tipoTelefoneSelection","getValues","push","telefones","find","tel","tipoTelefonePrincipal","rowIndex","TELEFONE","className","CustomInput","name","innerRef","register","AgenciaEditView","getSelectedItem","cepManager","useCepManager","cep","titulo","nome","uf","localidade","bairro","_useState","useState","_useState2","slicedToArray","activeTab","setActiveTab","toggleTab","target","tabIndex","defaultSortProps","order","OrderType","ASC","columnsAgenciaTelefone","formatter","tipoTelefoneFormatter","agenciaEmailFormProps","detailView","propName","title","agenciaTelefoneFormProps","useEffect","setTimeout","setValue","editViewProps","isEmpty","it","selectProps","isMulti","onlyAlphaNum","inputMaskedProps","mask","MASK","CepLogradouroIS","ref","CepTituloIS","NUMBER","CepUFIS","CepLocalidadeIS","CepBairroIS","TEXT_AREA","Nav","tabs","NavItem","NavLink","cx","active","onClick","TabContent","TabPane","tabId","defaultSortDirection","DESC","defaultSorted","keyField","__webpack_require__","d","__webpack_exports__","onChange","value","searchFilter","setFilter","searchExpressionsFull","defaultExpressions","expressions","item","getFilter","CLASS_NAME_UF","fieldName","length","CLASS_NAME_LOCALIDADE","result","manage","CLASS_NAME_BAIRRO","fillForm","logradouro","keys","forEach","key","undefined","getProp","clearForm","reset","tiposTelefone","tipoTelefoneCelular","tipoTelefoneComercial","tipoTelefoneFax","tipoTelefoneResidencial","tipoTelefone","resultado","campo","join","cell","row"],"mappings":"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","file":"static/js/28.04986f5d.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mfp/banco';\r\n\r\nconst BancoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      type={InputType.INPUT_SEARCH}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n          {\r\n            dataField: 'site',\r\n            text: 'Site',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'BancoSearchView',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BancoIS;\r\n","import React, { FC } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { DetailEditForm, DetailEditViewFormProps, InputGroupInline, InputType } from 'summer';\r\nimport { AgenciaEmail } from '../../../../models/dtos/ger/agenciaEmail';\r\n\r\nconst labelWidth: number = 180;\r\n\r\nconst AgenciaEmailEditView: FC<DetailEditViewFormProps<AgenciaEmail>> = props => {\r\n  const formProps = useForm<AgenciaEmail>({\r\n    defaultValues: { ...props.selectedItem },\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps}>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={{ ...formProps, validation: { maxLength: 120 } }}\r\n            id=\"contato\"\r\n            isPrependLabel={true}\r\n            label=\"Contato\"\r\n            labelWidth={labelWidth}\r\n            placeholder=\"Informe o contato\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={{ ...formProps, validation: { required: true, maxLength: 120 } }}\r\n            id=\"email\"\r\n            isPrependLabel={true}\r\n            label=\"E-mail\"\r\n            labelWidth={labelWidth}\r\n            placeholder=\"Informe o E-mail\"\r\n            type={InputType.EMAIL}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default AgenciaEmailEditView;\r\n","import React, { FC } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Col, CustomInput, Row } from 'reactstrap';\r\nimport { DetailEditForm, DetailEditViewFormProps, InputGroupInline, InputType } from 'summer';\r\nimport { AgenciaTelefone } from '../../../../models/dtos/ger/agenciaTelefone';\r\nimport { tipoTelefoneSelection } from '../../../../utilities/tipoTelefoneFormatter';\r\n\r\nconst labelWidth: number = 180;\r\n\r\nconst AgenciaTelefoneEditView: FC<DetailEditViewFormProps<AgenciaTelefone>> = props => {\r\n  const formProps = useForm<AgenciaTelefone>({\r\n    defaultValues: { ...props.selectedItem },\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const validateExtras = (formValues, currentValues, parentObject) => {\r\n    const erros = [];\r\n\r\n    if (!tipoTelefoneSelection(formProps.getValues())) {\r\n      erros.push('Pelo menos um tipo de telefone deve ser marcado.');\r\n    }\r\n\r\n    if (parentObject.telefones) {\r\n      const foundTelefones = parentObject.telefones.find(\r\n        tel => tel.tipoTelefonePrincipal === formValues.tipoTelefonePrincipal && tel.rowIndex !== formValues.rowIndex\r\n      );\r\n      if (foundTelefones) {\r\n        erros.push('Já existe um telefone cadastrado como principal.');\r\n      }\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={formProps}\r\n            id=\"contato\"\r\n            isPrependLabel={true}\r\n            label=\"Contato\"\r\n            labelWidth={labelWidth}\r\n            placeholder=\"Informe o contato\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={{ ...formProps, validation: { required: true } }}\r\n            id=\"numero\"\r\n            isPrependLabel={true}\r\n            label=\"Telefone\"\r\n            labelWidth={labelWidth}\r\n            placeholder=\"Informe o Telefone\"\r\n            type={InputType.TELEFONE}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <CustomInput type=\"switch\" id=\"tipoTelefonePrincipal\" name=\"tipoTelefonePrincipal\" label=\"Principal\" innerRef={formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput type=\"switch\" id=\"tipoTelefoneResidencial\" name=\"tipoTelefoneResidencial\" label=\"Residencial\" innerRef={formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput type=\"switch\" id=\"tipoTelefoneCelular\" name=\"tipoTelefoneCelular\" label=\"Celular\" innerRef={formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput type=\"switch\" id=\"tipoTelefoneFax\" name=\"tipoTelefoneFax\" label=\"Fax\" innerRef={formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput type=\"switch\" id=\"tipoTelefoneComercial\" name=\"tipoTelefoneComercial\" label=\"Comercial\" innerRef={formProps.register} />\r\n        </Col>\r\n      </Row>\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default AgenciaTelefoneEditView;\r\n","import cx from 'clsx';\r\nimport React, { FC, MouseEvent, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\r\nimport {\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  DetailManagerForm,\r\n  DetailManagerFormProps,\r\n  EditForm,\r\n  EditViewProps,\r\n  getSelectedItem,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  onlyAlphaNum,\r\n  OrderType,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport useCepManager from '../../../../hooks/useCepManager';\r\nimport { Agencia, CLASS_NAME } from '../../../../models/dtos/ger/agencia';\r\nimport { tipoTelefoneFormatter } from '../../../../utilities/tipoTelefoneFormatter';\r\nimport CepBairroIS from '../../../components/ger/cepBairroIS/CepBairroIS';\r\nimport CepLocalidadeIS from '../../../components/ger/cepLocalidadeIS/CepLocalidadeIS';\r\nimport CepLogradouroIS from '../../../components/ger/cepLogradouro/CepLogradouroIS';\r\nimport CepTituloIS from '../../../components/ger/cepTituloIS/CepTituloIS';\r\nimport CepUFIS from '../../../components/ger/cepUFIS/CepUFIS';\r\nimport BancoIS from '../../../components/mfp/banco/BancoIS';\r\nimport AgenciaEmailEditView from './AgenciaEmailEditView';\r\nimport AgenciaTelefoneEditView from './AgenciaTelefoneEditView';\r\n\r\ninterface AgenciaEditViewProps extends EditViewProps<Agencia> {}\r\n\r\nconst labelWidth: number = 200;\r\n\r\nconst AgenciaEditView: FC<AgenciaEditViewProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<Agencia>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n  const cepManager = useCepManager(formProps, { cep: true, titulo: true, nome: 'logradouro', uf: true, localidade: 'cidade', bairro: true });\r\n\r\n  const [activeTab, setActiveTab] = useState(1);\r\n\r\n  const toggleTab = ({ target }: MouseEvent) => {\r\n    const { tabIndex } = target as HTMLElement;\r\n    if (activeTab !== tabIndex) {\r\n      setActiveTab(tabIndex);\r\n    }\r\n  };\r\n\r\n  const defaultSortProps: DefaultSortProps[] = [\r\n    {\r\n      dataField: 'contato',\r\n      order: OrderType.ASC,\r\n    },\r\n  ];\r\n\r\n  const columnsAgenciaEmail: ColumnsProps[] = [\r\n    {\r\n      dataField: 'contato',\r\n      text: 'Contato',\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      text: 'E-mail',\r\n    },\r\n  ];\r\n\r\n  const columnsAgenciaTelefone: ColumnsProps[] = [\r\n    {\r\n      dataField: 'contato',\r\n      text: 'Contato',\r\n    },\r\n    {\r\n      dataField: 'numero',\r\n      text: 'Telefone',\r\n    },\r\n    {\r\n      dataField: 'tipoTelefonePrincipal',\r\n      formatter: tipoTelefoneFormatter,\r\n      text: 'tipo',\r\n    },\r\n  ];\r\n\r\n  const agenciaEmailFormProps: DetailManagerFormProps = {\r\n    columns: columnsAgenciaEmail,\r\n    detailView: AgenciaEmailEditView,\r\n    formProps,\r\n    propName: 'emails',\r\n    title: 'E-mail',\r\n  };\r\n\r\n  const agenciaTelefoneFormProps: DetailManagerFormProps = {\r\n    columns: columnsAgenciaTelefone,\r\n    detailView: AgenciaTelefoneEditView,\r\n    formProps,\r\n    propName: 'telefones',\r\n    title: 'Telefone',\r\n  };\r\n\r\n  // TODO implementar método de cepMenager\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n    const telefones = formProps.getValues().telefones;\r\n\r\n    if (!isEmpty(telefones)) {\r\n      const existTelefonePrincipal = telefones.find(it => it.tipoTelefonePrincipal === true);\r\n      if (!existTelefonePrincipal) {\r\n        erros.push('Pelo menos um telefone deve ser principal.');\r\n      }\r\n    }\r\n    return erros;\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.selectedItem && props.selectedItem.id) {\r\n        setTimeout(() => {\r\n          // @ts-ignore\r\n          formProps.setValue('cepFmt', { cep: props.selectedItem.cep, label: props.selectedItem.cep });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <WindowComponent title=\"Manutenção de Agência\">\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} validateExtras={validateExtras}>\r\n        <Row>\r\n          <Col>\r\n            <BancoIS\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              label=\"Banco\"\r\n              placeholder=\"Informe o banco\"\r\n              id=\"banco\"\r\n              labelWidth={labelWidth}\r\n              isPrependLabel={true}\r\n              inputSearchProps={{ selectProps: { isMulti: false } }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, ...onlyAlphaNum(0, 4) } }}\r\n              id=\"numero\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Nº Agência\"\r\n              placeholder=\"Informe o numero da agência.\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={formProps}\r\n              id=\"digitoVerificador\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Dígito Verificador\"\r\n              placeholder=\"Informe o dígito verificador.\"\r\n              inputMaskedProps={{ mask: '9' }}\r\n              type={InputType.MASK}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 120 } }}\r\n              id=\"nome\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Nome\"\r\n              placeholder=\"Informe o nome\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <CepLogradouroIS\r\n              formProps={formProps}\r\n              label=\"CEP\"\r\n              placeholder=\"Informe o CEP\"\r\n              id=\"cepFmt\"\r\n              labelWidth={labelWidth}\r\n              cepManager={cepManager}\r\n              isPrependLabel={true}\r\n              inputSearchProps={{ selectProps: { isMulti: false } }}\r\n            />\r\n            <input type=\"hidden\" name=\"cep\" ref={formProps.register} />\r\n          </Col>\r\n          <Col>\r\n            <CepTituloIS\r\n              formProps={formProps}\r\n              label=\"Tipo de Logradouro\"\r\n              placeholder=\"Informe o tipo de logradouro\"\r\n              id=\"titulo\"\r\n              labelWidth={labelWidth}\r\n              isPrependLabel={true}\r\n              inputSearchProps={{ selectProps: { isMulti: false } }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { maxLength: 150 } }}\r\n              id=\"logradouro\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Logradouro\"\r\n              placeholder=\"Informe o logradouro.\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { maxLength: 10 } }}\r\n              id=\"numeroEndereco\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Número\"\r\n              placeholder=\"Informe o número.\"\r\n              type={InputType.NUMBER}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { maxLength: 60 } }}\r\n              id=\"complemento\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Complemento\"\r\n              placeholder=\"Informe o Complemento.\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <CepUFIS\r\n              formProps={formProps}\r\n              id=\"uf\"\r\n              labelWidth={labelWidth}\r\n              isPrependLabel={true}\r\n              inputSearchProps={{ selectProps: { isMulti: false } }}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <CepLocalidadeIS\r\n              formProps={formProps}\r\n              id=\"cidade\"\r\n              labelWidth={labelWidth}\r\n              isPrependLabel={true}\r\n              inputSearchProps={{ selectProps: { isMulti: false } }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <CepBairroIS\r\n              formProps={formProps}\r\n              id=\"bairro\"\r\n              labelWidth={labelWidth}\r\n              isPrependLabel={true}\r\n              inputSearchProps={{ selectProps: { isMulti: false } }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { maxLength: 60 } }}\r\n              id=\"observacao\"\r\n              isPrependLabel={true}\r\n              labelWidth={labelWidth}\r\n              label=\"Observação\"\r\n              placeholder=\"Informe o observação.\"\r\n              type={InputType.TEXT_AREA}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Nav tabs={true}>\r\n          <NavItem>\r\n            <NavLink className={cx({ active: activeTab === 1 })} tabIndex={1} onClick={toggleTab}>\r\n              Telefones\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink className={cx({ active: activeTab === 2 })} tabIndex={2} onClick={toggleTab}>\r\n              E-mails\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <TabContent className=\"mb-1\" activeTab={activeTab}>\r\n          <TabPane tabId={1} className=\"mb-0 p-3\">\r\n            <Row>\r\n              <Col>\r\n                <DetailManagerForm\r\n                  {...props}\r\n                  defaultSortDirection={OrderType.DESC}\r\n                  defaultSorted={defaultSortProps}\r\n                  {...agenciaTelefoneFormProps}\r\n                  keyField=\"rowIndex\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId={2} className=\"mb-0 p-3\">\r\n            <Row>\r\n              <Col>\r\n                <DetailManagerForm\r\n                  {...props}\r\n                  defaultSortDirection={OrderType.DESC}\r\n                  defaultSorted={defaultSortProps}\r\n                  {...agenciaEmailFormProps}\r\n                  keyField=\"rowIndex\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n        </TabContent>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default AgenciaEditView;\r\n","import { Basic } from 'summer';\r\nimport { CepPais } from './cepPais';\r\n\r\nexport interface CepUF extends Basic {\r\n  codigo?: string;\r\n  sigla?: string;\r\n  nome?: string;\r\n  exterior?: boolean;\r\n  pais?: CepPais;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.cepuf';\r\n","import { Basic } from 'summer';\r\nimport { CepUF } from './cepUF';\r\n\r\nexport interface CepLocalidade extends Basic {\r\n  nome?: string;\r\n  cep?: string;\r\n  tipo?: string;\r\n  codigoMunicipio?: string;\r\n  uf?: CepUF;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.ceplocalidade';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { SearchFilterProps } from '../../../../hooks/useSearchFilter';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/cepUF';\r\n\r\nexport interface CepUFISProps extends InputProps {\r\n  searchFilter?: SearchFilterProps;\r\n}\r\n\r\nconst CepUFIS: FC<CepUFISProps> = props => {\r\n  const onChange = value => {\r\n    if (props.searchFilter) {\r\n      props.searchFilter.setFilter(CLASS_NAME, value);\r\n    }\r\n    if (props.onChange) {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'sigla',\r\n            text: 'Sigla',\r\n          },\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'CepUFSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'UF'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a UF'}\r\n      type={InputType.INPUT_SEARCH}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepUFIS;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { SearchFilterProps } from '../../../../hooks/useSearchFilter';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/cepLocalidade';\r\nimport { CLASS_NAME as CLASS_NAME_UF } from '../../../../models/dtos/ger/cepUF';\r\n\r\nexport interface CepLocalidadeISProps extends InputProps {\r\n  searchFilter?: SearchFilterProps;\r\n}\r\n\r\nconst CepLocalidadeIS: FC<CepLocalidadeISProps> = props => {\r\n  const searchExpressionsFull = defaultExpressions => {\r\n    const expressions = [];\r\n\r\n    if (props.searchFilter) {\r\n      const item = props.searchFilter.getFilter(CLASS_NAME_UF);\r\n      if (item) {\r\n        expressions.push({\r\n          fieldName: 'uf.id',\r\n          value: item.id,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (expressions.length > 0) {\r\n      expressions[0].expressions = defaultExpressions;\r\n    } else {\r\n      expressions.push(...defaultExpressions);\r\n    }\r\n\r\n    return expressions;\r\n  };\r\n\r\n  const onChange = value => {\r\n    if (props.searchFilter) {\r\n      props.searchFilter.setFilter(CLASS_NAME, value);\r\n    }\r\n    if (props.onChange) {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n          {\r\n            dataField: 'cep',\r\n            text: 'CEP',\r\n          },\r\n          {\r\n            dataField: 'codigoMunicipio',\r\n            text: 'Código do Município',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressionsFull,\r\n        searchViewId: 'CepLocalidadeSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Cidade'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a Cidade'}\r\n      type={InputType.INPUT_SEARCH}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepLocalidadeIS;\r\n","import { Basic } from 'summer';\r\nimport { CepLocalidade } from './cepLocalidade';\r\n\r\nexport interface CepBairro extends Basic {\r\n  bairro?: string;\r\n  localidade?: CepLocalidade;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.cepbairro';\r\n","import { Basic } from 'summer';\r\nimport { CepBairro } from './cepBairro';\r\nimport { CepLocalidade } from './cepLocalidade';\r\nimport { CepTitulo } from './cepTitulo';\r\nimport { CepUF } from './cepUF';\r\n\r\nexport interface CepLogradouro extends Basic {\r\n  bairro?: CepBairro;\r\n  cep?: string;\r\n  complemento?: string;\r\n  localidade?: CepLocalidade;\r\n  nome?: string;\r\n  titulo?: CepTitulo;\r\n  uf?: CepUF;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.ceplogradouro';\r\n","import { Basic } from 'summer';\r\n\r\nexport interface CepTitulo extends Basic {\r\n  nome?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.ceptitulo';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { SearchFilterProps } from '../../../../hooks/useSearchFilter';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/cepBairro';\r\nimport { CLASS_NAME as CLASS_NAME_LOCALIDADE } from '../../../../models/dtos/ger/cepLocalidade';\r\nimport { CLASS_NAME as CLASS_NAME_UF } from '../../../../models/dtos/ger/cepUF';\r\n\r\nexport interface CepBairroISProps extends InputProps {\r\n  searchFilter?: SearchFilterProps;\r\n}\r\n\r\nconst CepBairroIS: FC<CepBairroISProps> = props => {\r\n  const searchExpressionsFull = defaultExpressions => {\r\n    let expressions = [];\r\n\r\n    if (props.searchFilter) {\r\n      const localidade = props.searchFilter.getFilter(CLASS_NAME_LOCALIDADE);\r\n      const uf = props.searchFilter.getFilter(CLASS_NAME_UF);\r\n      if (localidade) {\r\n        expressions = [\r\n          {\r\n            fieldName: 'localidade.id',\r\n            value: localidade.id,\r\n          },\r\n        ];\r\n      } else if (uf) {\r\n        expressions = [\r\n          {\r\n            fieldName: 'localidade.uf.id',\r\n            value: uf.id,\r\n          },\r\n        ];\r\n      }\r\n    }\r\n\r\n    if (expressions.length > 0) {\r\n      expressions[0].expressions = defaultExpressions;\r\n    } else {\r\n      expressions.push(...defaultExpressions);\r\n    }\r\n\r\n    return expressions;\r\n  };\r\n\r\n  const onChange = value => {\r\n    if (props.searchFilter) {\r\n      props.searchFilter.setFilter(CLASS_NAME, value);\r\n    }\r\n    if (props.onChange) {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'bairro',\r\n            text: 'Nome do Bairro',\r\n          },\r\n          {\r\n            dataField: 'localidade.nome',\r\n            text: 'Nome da cidade',\r\n          },\r\n          {\r\n            dataField: 'localidade.uf.sigla',\r\n            text: 'Sigla da UF',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressionsFull,\r\n        searchViewId: 'CepBairroSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Bairro'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a Bairro'}\r\n      type={InputType.INPUT_SEARCH}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepBairroIS;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/cepTitulo';\r\n\r\nconst CepTituloIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'CepTituloSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Tipo'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Tipo de Logradouro'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepTituloIS;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CepManagerProps } from '../../../../hooks/useCepManager';\r\nimport { SearchFilterProps } from '../../../../hooks/useSearchFilter';\r\nimport { CLASS_NAME as CLASS_NAME_BAIRRO } from '../../../../models/dtos/ger/cepBairro';\r\nimport { CLASS_NAME as CLASS_NAME_LOCALIDADE } from '../../../../models/dtos/ger/cepLocalidade';\r\nimport { CepLogradouro, CLASS_NAME } from '../../../../models/dtos/ger/cepLogradouro';\r\nimport { CLASS_NAME as CLASS_NAME_UF } from '../../../../models/dtos/ger/cepUF';\r\n\r\nexport interface CepLogradouroProps {\r\n  cepManager?: CepManagerProps;\r\n  searchFilter?: SearchFilterProps;\r\n}\r\n\r\nconst CepLogradouroIS: FC<InputProps & CepLogradouroProps> = props => {\r\n  const searchExpressionsFull = defaultExpressions => {\r\n    let expressions = [];\r\n\r\n    if (props.searchFilter) {\r\n      const bairro = props.searchFilter.getFilter(CLASS_NAME_BAIRRO);\r\n      const localidade = props.searchFilter.getFilter(CLASS_NAME_LOCALIDADE);\r\n      const uf = props.searchFilter.getFilter(CLASS_NAME_UF);\r\n      if (bairro) {\r\n        expressions = [\r\n          {\r\n            fieldName: 'bairro.id',\r\n            value: bairro.id,\r\n          },\r\n        ];\r\n      } else if (localidade) {\r\n        expressions = [\r\n          {\r\n            fieldName: 'localidade.id',\r\n            value: localidade.id,\r\n          },\r\n        ];\r\n      } else if (uf) {\r\n        expressions = [\r\n          {\r\n            fieldName: 'uf.id',\r\n            value: uf.id,\r\n          },\r\n        ];\r\n      }\r\n    }\r\n\r\n    if (expressions.length > 0) {\r\n      expressions[0].expressions = defaultExpressions;\r\n    } else {\r\n      expressions.push(...defaultExpressions);\r\n    }\r\n\r\n    return expressions;\r\n  };\r\n\r\n  const onChangeHandle = (result: CepLogradouro) => {\r\n    if (props.cepManager) {\r\n      props.cepManager.manage(result);\r\n    }\r\n    if (props.searchFilter) {\r\n      props.searchFilter.setFilter(CLASS_NAME, result);\r\n    }\r\n    if (props.onChange) {\r\n      props.onChange(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      onChange={onChangeHandle}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n          {\r\n            dataField: 'bairro.bairro',\r\n            text: 'Bairro',\r\n          },\r\n          {\r\n            dataField: 'cep',\r\n            text: 'CEP',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressionsFull,\r\n        searchViewId: 'CepLogradouroSearchView',\r\n      }}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepLogradouroIS;\r\n","import { UseFormProps } from 'summer';\r\nimport { CepLogradouro } from '../models/dtos/ger/cepLogradouro';\r\n\r\nexport interface CepManagerOptions {\r\n  bairro?: boolean | string;\r\n  cep?: boolean | string;\r\n  localidade?: boolean | string;\r\n  nome?: boolean | string;\r\n  titulo?: boolean | string;\r\n  uf?: boolean | string;\r\n}\r\n\r\nexport interface CepManagerProps {\r\n  manage: (logradouro: CepLogradouro) => void;\r\n  reset: () => void;\r\n}\r\n\r\nconst useCepManager = (formProps: UseFormProps, props: CepManagerOptions): CepManagerProps => {\r\n  const getProp = (name: string): string => {\r\n    let result = null;\r\n\r\n    if (props[name] !== undefined) {\r\n      result = typeof props[name] === 'boolean' ? name : props[name];\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const fillForm = (logradouro: CepLogradouro) => {\r\n    const keyList = Object.keys(props);\r\n    keyList.forEach(key => {\r\n      const name = getProp(key);\r\n      if (name) {\r\n        formProps.setValue(name, logradouro[key]);\r\n      }\r\n    });\r\n  };\r\n\r\n  const clearForm = () => {\r\n    fillForm({\r\n      bairro: null,\r\n      cep: null,\r\n      localidade: null,\r\n      nome: null,\r\n      titulo: null,\r\n      uf: null,\r\n    });\r\n  };\r\n\r\n  return {\r\n    manage: (logradouro: CepLogradouro) => {\r\n      if (logradouro) {\r\n        fillForm(logradouro);\r\n      } else {\r\n        clearForm();\r\n      }\r\n    },\r\n    reset: () => clearForm(),\r\n  };\r\n};\r\n\r\nexport default useCepManager;\r\n","const tiposTelefone = {\r\n  tipoTelefoneCelular: 'Celular',\r\n  tipoTelefoneComercial: 'Comercial',\r\n  tipoTelefoneFax: 'Fax',\r\n  tipoTelefonePrincipal: 'Principal',\r\n  tipoTelefoneResidencial: 'Residencial',\r\n};\r\n\r\nexport function tipoTelefoneSelection(tipoTelefone: any): any {\r\n  const resultado = [];\r\n  // tslint:disable-next-line:forin\r\n  for (const campo in tiposTelefone) {\r\n    // tslint:disable-next-line:no-unused-expression\r\n    tipoTelefone[campo] && resultado.push(tiposTelefone[campo]);\r\n  }\r\n  return resultado.join(', ');\r\n}\r\n\r\nexport function tipoTelefoneFormatter(cell, row) {\r\n  return tipoTelefoneSelection(row);\r\n}\r\n","import { Basic } from 'summer';\r\n\r\nexport interface Banco extends Basic {\r\n  codigo?: string;\r\n  digitoVerificador?: string;\r\n  nome?: string;\r\n  site?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.banco';\r\n","import { Basic } from 'summer';\r\nimport { Banco } from '../mfp/banco';\r\nimport { AgenciaEmail } from './agenciaEmail';\r\nimport { AgenciaTelefone } from './agenciaTelefone';\r\nimport { CepBairro } from './cepBairro';\r\nimport { CepLocalidade } from './cepLocalidade';\r\nimport { CepTitulo } from './cepTitulo';\r\nimport { CepUF } from './cepUF';\r\n\r\nexport interface Agencia extends Basic {\r\n  bairro?: CepBairro;\r\n  banco?: Banco;\r\n  cep?: string;\r\n  cidade?: CepLocalidade;\r\n  complemento?: string;\r\n  digitoVerificador?: string;\r\n  emails?: AgenciaEmail[];\r\n  logradouro?: string;\r\n  nome?: string;\r\n  numero?: string;\r\n  numeroEndereco?: string;\r\n  observacao?: string;\r\n  telefones?: AgenciaTelefone[];\r\n  titulo?: CepTitulo;\r\n  uf?: CepUF;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.agencia';\r\n"],"sourceRoot":""}