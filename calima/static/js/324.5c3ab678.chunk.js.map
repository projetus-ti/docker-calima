{"version":3,"sources":["models/dtos/mcg/ecfExportacaoParam.ts","models/enumerated/mcg/escrituracaoRetificadoraECFEnum.ts","models/enumerated/mcg/indicadorInicioPeriodoECFEnum.ts","models/enumerated/mcg/indicadorSituacaoEspecialECFEnum.ts","models/enumerated/mcg/tipoECFEnum.ts","views/pages/mcg/spedECFExportacao/SpedECFExportacaoProcessView.tsx","dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts"],"names":["ORIGINAL","label","value","ESCRITURACAO_RETIFICADORA_ECF_ENUM_VALUES","REGULAR","INDICADOR_INICIO_PERIODO_ECF_ENUM_VALUES","NORMAL","EXTINCAO","INDICADOR_SITUACAO_ESPECIAL_ECF_ENUM_VALUES","NAO_PARTICIPANTE_SCP","TIPO_ECF_ENUM_VALUES","SpedECFExportacaoProcessView","props","globalReducer","useSelector","state","_useState","useState","_useState2","Object","slicedToArray","exibirDtSitEspecial","setExibirDtSitEspecial","formProps","useForm","defaultValues","empresa","id","globalParameter","idEmpresa","mode","useEffect","empresaMCG","refAtual","getValues","dtInicial","formatDate","parseRefToDate","dtFinal","setTimeout","setValue","react_default","a","createElement","summer_esm","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","wikiId","editViewProps","dtoClassName","validateExtras","erros","_formProps$getValues","dtSitEspecial","toDate","push","refInicial","parseDateToRef","isEmpty","beforePersist","formData","validarDadosSpedECF","thenFunction","result","length","forEach","rule","message","gerarSpedECF","usuario","params","type","AlertType","ERROR","alertManager","emit","ACTION_EVENTS","SHOW","async","hidden","Row","Col","isPrependLabel","objectSpread2","validation","required","InputType","DATE","CustomInput","name","innerRef","register","placeholder","inputDropDownProps","optionsProvider","DROP_DOWN","onChange","situacaoEspecial","__webpack_require__","d","__webpack_exports__","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","ecfExportacaoParam","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado"],"mappings":"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","file":"static/js/324.5c3ab678.chunk.js","sourcesContent":["import { Basic } from 'summer';\r\nimport { Empresa } from '../ger/empresa';\r\n\r\nexport interface ECFExportacaoParam extends Basic {\r\n  dtFinal?: string;\r\n  dtInicial?: string;\r\n  dtSitEspecial?: string;\r\n  empresa?: Empresa;\r\n  gerarArquivoVazio?: boolean;\r\n  gerarQ100?: boolean;\r\n  idEmpresa?: number;\r\n  inicioPeriodo?: string;\r\n  retificadora?: string;\r\n  situacaoEspecial?: string;\r\n  tipoECF?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.ecfexportacaoparam';\r\n","export const RETIFICADORA = { label: 'ECF retificadora', value: 'retificadora' };\r\nexport const ORIGINAL = { label: 'ECF original', value: 'original' };\r\nexport const ORIGINAL_MUDANCA_FORMA_TRIBUTACAO = {\r\n  label: 'ECF original com mudança de forma de tributação (Art. 5o da Instrução Normativa no 166/1999)',\r\n  value: 'originalMudancaFormaTributacao',\r\n};\r\n\r\nexport const ESCRITURACAO_RETIFICADORA_ECF_ENUM_VALUES = [RETIFICADORA, ORIGINAL, ORIGINAL_MUDANCA_FORMA_TRIBUTACAO];\r\n","export const REGULAR = { value: 'regular', label: 'Regular (Início no Primeiro Dia do Ano)' };\r\nexport const ABERTURA = { value: 'abertura', label: 'Abertura (Início de Atividades no Ano-Calendário)' };\r\nexport const CISAO = { value: 'cisao', label: 'Resultante de Cisão/Fusão ou Remanescente de Cisão, Ou Realizou Incorporação' };\r\nexport const TRANFORMACAO = { value: 'tranformacao', label: 'Resultante de Transformação' };\r\nexport const ANOCALENDARIO = { value: 'anoCalendario', label: 'Início de Obrigatoriedade da Entrega no Curso do Ano Calendário' };\r\n\r\nexport const INDICADOR_INICIO_PERIODO_ECF_ENUM_VALUES = [REGULAR, ABERTURA, CISAO, TRANFORMACAO, ANOCALENDARIO];\r\n","export const NORMAL = { value: 'NORMAL', label: 'Normal (Sem ocorrência de situação especial ou evento)' };\r\nexport const EXTINCAO = { value: 'EXTINCAO', label: 'Extinção' };\r\nexport const FUSAO = { value: 'FUSAO', label: 'Fusão' };\r\nexport const INCORPORADA = { value: 'INCORPORADA', label: 'Incorporação - Incorporada' };\r\nexport const INCORPORADORA = { value: 'INCORPORADORA', label: 'Incorporação - Incorporadora' };\r\nexport const CISAO_TOTAL = { value: 'CISAO_TOTAL', label: 'Cisão Total' };\r\nexport const CISAO_PARCIAL = { value: 'CISAO_PARCIAL', label: 'Cisão Parcial' };\r\nexport const TRANSFORMACAO = { value: 'TRANSFORMACAO', label: 'Transformação' };\r\nexport const DESENQUADRAMENTO_IMUNE_ISENTA = { value: 'DESENQUADRAMENTO_IMUNE_ISENTA', label: 'Desenquadramento de Imune - Isenta' };\r\nexport const INCLUSAO_SIMPLES_NACIONAL = { value: 'INCLUSAO_SIMPLES_NACIONAL', label: 'Inclusão no Simples Nacional' };\r\n\r\nexport const INDICADOR_SITUACAO_ESPECIAL_ECF_ENUM_VALUES = [\r\n  NORMAL,\r\n  EXTINCAO,\r\n  FUSAO,\r\n  INCORPORADA,\r\n  INCORPORADORA,\r\n  CISAO_TOTAL,\r\n  CISAO_PARCIAL,\r\n  TRANSFORMACAO,\r\n  DESENQUADRAMENTO_IMUNE_ISENTA,\r\n  INCLUSAO_SIMPLES_NACIONAL,\r\n];\r\n","export const NAO_PARTICIPANTE_SCP = { label: 'ECF de empresa não participante de SCP como sócio ostensivo', value: 'naoParticipanteSCP' };\r\nexport const PARTICIPANTE_SCP = { label: 'ECF de empresa participante de SCP como sócio ostensivo', value: 'participanteSCP' };\r\nexport const SCP = { label: 'ECF da SCP', value: 'scp' };\r\n\r\nexport const TIPO_ECF_ENUM_VALUES = [NAO_PARTICIPANTE_SCP, PARTICIPANTE_SCP, SCP];\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, CustomInput, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  EditForm,\r\n  EditViewProps,\r\n  formatDate,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  parseDateToRef,\r\n  parseRefToDate,\r\n  toDate,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { RuleMessage } from '../../../../models/dtos/ger/ruleMessage';\r\nimport { CLASS_NAME, ECFExportacaoParam } from '../../../../models/dtos/mcg/ecfExportacaoParam';\r\nimport { ESCRITURACAO_RETIFICADORA_ECF_ENUM_VALUES, ORIGINAL } from '../../../../models/enumerated/mcg/escrituracaoRetificadoraECFEnum';\r\nimport { INDICADOR_INICIO_PERIODO_ECF_ENUM_VALUES, REGULAR } from '../../../../models/enumerated/mcg/indicadorInicioPeriodoECFEnum';\r\nimport { EXTINCAO, INDICADOR_SITUACAO_ESPECIAL_ECF_ENUM_VALUES, NORMAL } from '../../../../models/enumerated/mcg/indicadorSituacaoEspecialECFEnum';\r\nimport { NAO_PARTICIPANTE_SCP, TIPO_ECF_ENUM_VALUES } from '../../../../models/enumerated/mcg/tipoECFEnum';\r\nimport { gerarSpedECF, validarDadosSpedECF } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\ninterface SpedECFExportacaoProcessViewProps extends EditViewProps<ECFExportacaoParam> {}\r\n\r\nconst SpedECFExportacaoProcessView: FC<SpedECFExportacaoProcessViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const [exibirDtSitEspecial, setExibirDtSitEspecial] = useState(false);\r\n\r\n  const formProps = useForm<ECFExportacaoParam>({\r\n    defaultValues: {\r\n      empresa: { id: globalReducer.globalParameter.empresa.id },\r\n      idEmpresa: globalReducer.globalParameter.empresa.id,\r\n    },\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      const { empresaMCG } = globalReducer.globalParameter;\r\n      if (empresaMCG && empresaMCG.refAtual !== null) {\r\n        formProps.getValues().dtInicial = formatDate(parseRefToDate(empresaMCG.refAtual, 1));\r\n        formProps.getValues().dtFinal = formatDate(parseRefToDate(empresaMCG.refAtual, 0));\r\n      }\r\n      setTimeout(() => {\r\n        formProps.setValue('inicioPeriodo', REGULAR.value);\r\n        formProps.setValue('situacaoEspecial', NORMAL.value);\r\n        formProps.setValue('tipoECF', NAO_PARTICIPANTE_SCP.value);\r\n        formProps.setValue('retificadora', ORIGINAL.value, true);\r\n      }, 500);\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n    const { dtInicial, dtFinal, dtSitEspecial } = formProps.getValues();\r\n\r\n    if (toDate(dtFinal) < toDate(dtInicial)) {\r\n      erros.push('A Data Final não pode ser menor que a Data Inicial');\r\n    }\r\n\r\n    const refInicial = parseDateToRef(toDate(dtInicial));\r\n    const refFinal = parseDateToRef(toDate(dtFinal));\r\n\r\n    if (+refFinal - +refInicial >= 12) {\r\n      erros.push('As datas informadas são superiores a 1(um) ano. Não é permitido a geração de mais um ano no arquivo');\r\n    }\r\n\r\n    if (exibirDtSitEspecial === true && isEmpty(dtSitEspecial)) {\r\n      erros.push('Data da Situação Especial - Campo não pode estar em branco.');\r\n    }\r\n    return erros;\r\n  };\r\n\r\n  const beforePersist = (formData: ECFExportacaoParam) => {\r\n    validarDadosSpedECF(formData, {\r\n      thenFunction: (result: RuleMessage[]) => {\r\n        let erros = '';\r\n        if (result.length > 0) {\r\n          result.forEach(rule => {\r\n            erros += rule.message;\r\n            erros += '\\n';\r\n          });\r\n        } else {\r\n          gerarSpedECF(globalReducer.globalParameter.usuario, formData);\r\n        }\r\n        const params: AlertProps = {\r\n          message: erros,\r\n          type: AlertType.ERROR,\r\n        };\r\n        alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n      },\r\n    });\r\n    return { async: true };\r\n  };\r\n\r\n  const indicadorChange = (value: any): void => {\r\n    const { situacaoEspecial } = formProps.getValues();\r\n\r\n    if (situacaoEspecial === null || value === NORMAL.value || value === EXTINCAO.value) {\r\n      setExibirDtSitEspecial(false);\r\n      formProps.setValue('dtSitEspecial', null);\r\n    } else {\r\n      setExibirDtSitEspecial(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Geração SPED ECF - Escrituração Contábil Fiscal\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      wikiId={207}\r\n    >\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} validateExtras={validateExtras} beforePersist={beforePersist}>\r\n        <InputGroupInline id=\"idEmpresa\" formProps={formProps} hidden={true} />\r\n        <InputGroupInline id=\"empresa.id\" formProps={formProps} hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              id=\"dtInicial\"\r\n              label=\"Data Inicial\"\r\n              isPrependLabel={true}\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              type={InputType.DATE}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              id=\"dtFinal\"\r\n              label=\"Data Final\"\r\n              isPrependLabel={true}\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              type={InputType.DATE}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <CustomInput name=\"gerarQ100\" id=\"gerarQ100\" label=\"Gerar Registro Q100\" innerRef={formProps.register} type=\"switch\" />\r\n          </Col>\r\n          <Col>\r\n            <CustomInput name=\"gerarArquivoVazio\" id=\"gerarArquivoVazio\" label=\"Gerar Arquivo Vazio\" innerRef={formProps.register} type=\"switch\" />\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"inicioPeriodo\"\r\n              isPrependLabel={true}\r\n              label=\"Situação Início Período\"\r\n              placeholder=\"Selecione a Situação Início Período.\"\r\n              inputDropDownProps={{\r\n                optionsProvider: INDICADOR_INICIO_PERIODO_ECF_ENUM_VALUES,\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"situacaoEspecial\"\r\n              isPrependLabel={true}\r\n              label=\"Situação Especial\"\r\n              placeholder=\"Selecione a Situação Especial.\"\r\n              inputDropDownProps={{\r\n                optionsProvider: INDICADOR_SITUACAO_ESPECIAL_ECF_ENUM_VALUES,\r\n              }}\r\n              onChange={indicadorChange}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        {exibirDtSitEspecial ? (\r\n          <Row>\r\n            <Col>\r\n              <InputGroupInline\r\n                formProps={formProps}\r\n                id=\"dtSitEspecial\"\r\n                isPrependLabel={true}\r\n                label=\"Data da Situação Especial\"\r\n                placeholder=\"Informe a Data da Situação Especial\"\r\n                type={InputType.DATE}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={formProps}\r\n              id=\"tipoECF\"\r\n              isPrependLabel={true}\r\n              label=\"Tipo ECF\"\r\n              placeholder=\"Selecione o Tipo ECF.\"\r\n              inputDropDownProps={{\r\n                optionsProvider: TIPO_ECF_ENUM_VALUES,\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"retificadora\"\r\n              isPrependLabel={true}\r\n              label=\"Escrituração Retificadora\"\r\n              placeholder=\"Selecione a Escrituração Retificadora.\"\r\n              inputDropDownProps={{\r\n                optionsProvider: ESCRITURACAO_RETIFICADORA_ECF_ENUM_VALUES,\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default SpedECFExportacaoProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n"],"sourceRoot":""}