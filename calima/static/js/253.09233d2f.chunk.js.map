{"version":3,"sources":["views/pages/mcg/importacaoHistoricoCSV/ImportacaoHistoricoCSVProcessView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/resultadoIntegracao/ResultadoIntegracao.tsx"],"names":["ImportacaoHistoricoCSVProcessView","props","globalReducer","useSelector","state","_useState","useState","_useState2","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","showResultView","setShowResultView","_useState3","_useState4","listResult","setListResult","dispatch","useDispatch","_useForm","useForm","mode","reset","formProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useEffect","globalParameter","grupoHistorico","setTimeout","grupoHistoricoDestino","id","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_9__","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","wikiId","_components_resultadoIntegracao_ResultadoIntegracao__WEBPACK_IMPORTED_MODULE_14__","assign","errorList","filter","it","success","successList","hidePrintButton","tabFailure","tabSuccess","reactstrap__WEBPACK_IMPORTED_MODULE_5__","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_6__","tag","Row","reactstrap__WEBPACK_IMPORTED_MODULE_8__","acceptedTypes","isMultiple","limitSizeBytes","SIZE_ONE_HUNDRED_BYTES","propImageName","maxFiles","handleSubmit","data","erros","getValues","arquivos","length","push","validateExtras","params","message","type","AlertType","WARNING","alertManager","emit","ACTION_EVENTS","SHOW","progressActions","showProgress","animated","className","color","label","striped","value","importarHistoricoCSV","errorFunction","mensagem","hideProgress","showToast","ERROR","thenFunction","result","callImport","handleClose","goBack","dispatchClose","history","onClose","empresa","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado","ResultadoIntegracao","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","activeTab","setActiveTab","columns","dataField","sort","text","defaultSorted","order","OrderType","ASC","toggleTab","target","tabIndex","react__WEBPACK_IMPORTED_MODULE_3___default","Fragment","tabs","reactstrap__WEBPACK_IMPORTED_MODULE_7__","cx","active","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_9__","tabId","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_4___default","bootstrap4","bordered","condensed","hover","keyField","noDataIndication","responsive","tabIndexCell","key","style","marginTop","reactstrap__WEBPACK_IMPORTED_MODULE_10__","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__","icon","disabled","printReport"],"mappings":"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","file":"static/js/253.09233d2f.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Form, FormGroup, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  dispatchClose,\r\n  EditViewProps,\r\n  ErroList,\r\n  ERROR,\r\n  FileInputPreview,\r\n  InputGroupInline,\r\n  ProcessBar,\r\n  progressActions,\r\n  showToast,\r\n  SIZE_ONE_HUNDRED_BYTES,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { RuleMessage } from '../../../../models/dtos/ger/ruleMessage';\r\nimport { ImportacaoHistoricoCSVParam } from '../../../../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { importarHistoricoCSV } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport ResultadoIntegracao from '../../../components/resultadoIntegracao/ResultadoIntegracao';\r\n\r\ninterface ImportacaoHistoricoCSVProcessViewProps extends EditViewProps<ImportacaoHistoricoCSVParam> {}\r\n\r\nconst ImportacaoHistoricoCSVProcessView: FC<ImportacaoHistoricoCSVProcessViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const [showResultView, setShowResultView] = useState(false);\r\n\r\n  const [listResult, setListResult] = useState<RuleMessage[]>([]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const MAX_FILES: number = 100;\r\n\r\n  const { reset, ...formProps } = useForm<ImportacaoHistoricoCSVParam>({ mode: 'onBlur' });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.grupoHistorico !== null) {\r\n        const { grupoHistorico } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          reset({\r\n            grupoHistoricoDestino: {\r\n              id: grupoHistorico.id,\r\n            },\r\n          });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  const handleImport = (data: ImportacaoHistoricoCSVParam) => {\r\n    const erros = validateExtras();\r\n    if (erros.length > 0) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      dispatch(\r\n        progressActions.showProgress({\r\n          animated: true,\r\n          className: 'progress-bar-rounded progress-animated-alt',\r\n          color: 'first',\r\n          label: 'Aguarde processando...',\r\n          striped: true,\r\n          value: 100,\r\n        })\r\n      );\r\n      callImport(data);\r\n    }\r\n  };\r\n\r\n  function callImport(data: ImportacaoHistoricoCSVParam): void {\r\n    importarHistoricoCSV(data, {\r\n      errorFunction: mensagem => {\r\n        dispatch(progressActions.hideProgress());\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: (result: RuleMessage[]) => {\r\n        dispatch(progressActions.hideProgress());\r\n        setListResult(result);\r\n        setShowResultView(true);\r\n      },\r\n    });\r\n  }\r\n\r\n  function validateExtras(): string[] {\r\n    const erros = [];\r\n    if (formProps.getValues().arquivos.length === 0) {\r\n      erros.push('Nenhum Arquivo selecionado');\r\n    }\r\n\r\n    return erros;\r\n  }\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Importação de Históricos por Planilha do Excel (Formato CSV)\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={5548}\r\n    >\r\n      {showResultView ? (\r\n        <ResultadoIntegracao\r\n          {...props}\r\n          errorList={listResult.filter(it => !it.success)}\r\n          successList={listResult.filter(it => it.success)}\r\n          hidePrintButton={true}\r\n          tabFailure=\"Registros Rejeitados\"\r\n          tabSuccess=\"Registros Aceitos\"\r\n        />\r\n      ) : (\r\n        <Form>\r\n          <InputGroupInline formProps={formProps} id=\"grupoHistoricoDestino.id\" hidden={true} />\r\n          <FormGroup tag={Row}>\r\n            <Col>\r\n              <FileInputPreview\r\n                acceptedTypes=\".csv\"\r\n                formProps={formProps}\r\n                isMultiple={true}\r\n                limitSizeBytes={SIZE_ONE_HUNDRED_BYTES}\r\n                propImageName=\"arquivos\"\r\n                maxFiles={MAX_FILES}\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n          <ProcessBar handleSubmit={formProps.handleSubmit(handleImport)} handleClose={handleCancel} />\r\n        </Form>\r\n      )}\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ImportacaoHistoricoCSVProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport cx from 'clsx';\r\nimport React, { FC, MouseEvent, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Button, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\r\nimport { ColumnsProps, DefaultSortProps, dispatchClose, OrderType } from 'summer';\r\n\r\nexport interface ResultadoIntegracaoProps {\r\n  /** Lista de erros da integração */\r\n  errorList?: any[];\r\n  /** Lista de sucessos da integração */\r\n  successList?: any[];\r\n  /** History do navegador */\r\n  history?: any;\r\n  /** Relatório a ser impresso */\r\n  printReport?: any;\r\n  /** Oculta o botão para imprimir o relatório */\r\n  hidePrintButton?: boolean | false;\r\n  /** Texto da aba de sucesso */\r\n  tabSuccess?: string;\r\n  /** Texto da aba de falhas */\r\n  tabFailure?: string;\r\n}\r\n\r\nconst ResultadoIntegracao: FC<ResultadoIntegracaoProps> = props => {\r\n  const [activeTab, setActiveTab] = useState(1);\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'message',\r\n      sort: true,\r\n      text: 'Descrição',\r\n    },\r\n  ];\r\n\r\n  const defaultSorted: DefaultSortProps[] = [\r\n    {\r\n      dataField: 'message',\r\n      order: OrderType.ASC,\r\n    },\r\n  ];\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  const toggleTab = ({ target }: MouseEvent) => {\r\n    const { tabIndex } = target as HTMLElement;\r\n    if (activeTab !== tabIndex) {\r\n      setActiveTab(tabIndex);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Nav tabs={true}>\r\n        <NavItem>\r\n          <NavLink className={cx({ active: activeTab === 1 })} tabIndex={1} onClick={toggleTab}>\r\n            {props.tabSuccess || 'Sucessos'}\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink className={cx({ active: activeTab === 2 })} tabIndex={2} onClick={toggleTab}>\r\n            {props.tabFailure || 'Falhas'}\r\n          </NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n      <TabContent className=\"mb-5\" activeTab={activeTab}>\r\n        <TabPane tabId={1} className=\"mb-0 p-3\">\r\n          <div className=\"table-area\">\r\n            <BootstrapTable\r\n              bootstrap4={true}\r\n              bordered={true}\r\n              columns={columns}\r\n              condensed={true}\r\n              className=\"table-scroll\"\r\n              data={props.successList || []}\r\n              defaultSorted={defaultSorted}\r\n              hover={true}\r\n              keyField=\"id\"\r\n              noDataIndication=\"Nenhum registro a ser exibido.\"\r\n              responsive={true}\r\n              striped={true}\r\n              tabIndexCell={true}\r\n            />\r\n          </div>\r\n          <div key=\"divFotterKey\" className=\"text-left\">\r\n            Registros: {props.successList.length}\r\n          </div>\r\n        </TabPane>\r\n        <TabPane tabId={2} className=\"mb-0 p-3\">\r\n          <div className=\"table-area\">\r\n            <BootstrapTable\r\n              bootstrap4={true}\r\n              bordered={true}\r\n              columns={columns}\r\n              condensed={true}\r\n              className=\"table-scroll\"\r\n              data={props.errorList || []}\r\n              defaultSorted={defaultSorted}\r\n              hover={true}\r\n              keyField=\"id\"\r\n              noDataIndication=\"Nenhum registro a ser exibido.\"\r\n              responsive={true}\r\n              striped={true}\r\n              tabIndexCell={true}\r\n            />\r\n          </div>\r\n          <div key=\"divFotterKey\" className=\"text-left\">\r\n            Registros: {props.errorList.length}\r\n          </div>\r\n        </TabPane>\r\n      </TabContent>\r\n\r\n      <div className=\"float-right\" style={{ marginTop: 10 }}>\r\n        <Button color=\"danger\" className=\"mr-2\" onClick={handleCancel}>\r\n          <FontAwesomeIcon icon=\"times\" /> Cancelar\r\n        </Button>\r\n      </div>\r\n      {props.hidePrintButton ? null : (\r\n        <div className=\"float-left\" style={{ marginTop: 10 }}>\r\n          <Button className=\"mr-2\" disabled={props.errorList.length === 0} onClick={props.printReport} color=\"success\">\r\n            <FontAwesomeIcon icon=\"paste\" /> Imprimir Falhas\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultadoIntegracao;\r\n"],"sourceRoot":""}