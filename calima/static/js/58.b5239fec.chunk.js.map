{"version":3,"sources":["views/pages/mcg/report/conciliacaoBancaria/conciliacaoBancariaRV.ts","views/pages/mcg/report/conciliacaoBancaria/ConciliacaoBancariaReportView.tsx","dependencies/empresaDependency.ts","models/enumerated/ger/saldoReportEnum.ts","views/components/ger/empresaIS/EmpresaIS.tsx","models/dtos/ger/reportBasicValues.ts","models/dtos/ger/reportViewOptions.ts","views/components/envioEmail/DestinatarioEmailDetailEditView.tsx","views/components/envioEmail/EnvioEmail.tsx","views/components/report/ReportInputs.tsx","views/components/report/ReportForm.tsx","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts"],"names":["DEFAULT_VALUES","Object","objectSpread2","getDefaultReportBasicValues","DEFAULT_OPTIONS","getDefaultReportViewOptions","DATES","value","dtFinalRequired","dtInicialRequired","exibirConfiguracaoDadosEmpresa","exibirSegmentacaoFolha","ConciliacaoBancariaReportView","props","globalReducer","useSelector","state","_useForm","useForm","defaultValues","mode","handleSubmit","formProps","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","bancoMCG","setBancoMCG","_useState3","_useState4","isDisabledBanco","setIsDisabledBanco","react_default","a","createElement","summer_esm","title","useGlobalParameter","globalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","ReportForm","assign","localStorageKey","routeProps","reportBasicValues","reportViewOptions","validateExtras","erros","getValues","planoConta","analitica","push","isEmpty","Row","Col","PlanoContaIS","id","onChange","setValue","bancoPlanoConta","idEmpresaSelecionada","empresa","idGrupoPlanoConta","obterBancoListPlanoConta","errorFunction","mensagem","showToast","ERROR","thenFunction","result","length","params","message","type","AlertType","WARNING","alertManager","emit","ACTION_EVENTS","SHOW","validation","required","label","placeholder","inputDropDownProps","optionsProvider","isPrependLabel","InputType","DROP_DOWN","disabled","__webpack_require__","d","__webpack_exports__","NATUREZA","SALDO_REPORT_ENUM","EmpresaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_2__","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","INPUT_SEARCH","summer__WEBPACK_IMPORTED_MODULE_0__","_enumerated_ger_saldoReportEnum__WEBPACK_IMPORTED_MODULE_1__","identificadorAjuda","identificadorMenu","designType","GRAPHIC","empresasSelecionadas","envioEmail","anexos","assunto","destinatarios","exibirFormatacaoValor","gerarBom","gerarCabecalhoPadrao","gerarCabecalhoPadraoAdministradora","imprimirCodigoEmpresa","imprimirDataHora","imprimirValoresColoridos","requestSolicitacao","saldoReportEnum","saveSession","showDadosEmpresa","showLogoAdministradora","startPage","virtualization","reportEventType","reportViewType","anoLabel","dtFinalLabel","dtInicialLabel","exibirConfiguracaoDataAtual","exibirConfiguracaoLogoAdministradora","exibirEnviarPorEmail","exibirPaginaInicial","refFinalLabel","refInicialLabel","emptyItem","contato","email","DestinatarioEmailDetailEditView","selectedItem","errors","register","triggerValidation","handleCancel","currentItem","currentValues","parentObject","EnvioEmail","Fragment","sort","detailView","keyField","propName","className","CustomInput","name","innerRef","maxLength","TEXT_AREA","ReportInputs","activeTab","setActiveTab","useEffect","_props$reportViewOpti","printingTypes","resetObject","idGerEmpresa","current","currentMomentDate","endDate","DATE","dtInicial","formatDate","toDate","dtFinal","endOf","REFERENCE","referenciaInicial","format","REF_PATTERN","REFERENCES","referenciaFinal","ANO","ano","String","year","reset","toggleTab","target","tabIndex","dateInitial","dateComponent","datesComponent","referenceInitial","refInicialRequired","referenceComponent","referencesComponent","refFinalRequired","anoComponent","anoRequired","inputMaskedProps","mask","MASK","startPageComponent","min","NUMBER","multiplasEmpresasComponent","exibirConfiguracaoMultiplasEmpresas","xs","inputProps","gerarPorEmpresas","style","marginBottom","size","selectProps","isMulti","segmentacaoFolhaComponent","dataAtualComponent","logoAdmComponent","dadosEmpresaComponent","formatacaoValoresComponent","exibirImprimirValoresColoridos","isClearable","firstOpen","extraConfigOpened","Nav","tabs","NavItem","NavLink","cx","active","onClick","TabContent","TabPane","tabId","hidden","iconAppend","appendClickHandler","minLength","DESIGN_TYPE_ENUM","envioEmail_EnvioEmail","initialSubject","headerDrawerToggle","dispatch","useDispatch","finishSubmit","data","addExtraParameters","gerarReport","toggleHeaderDrawer","afterSubmit","Form","noValidate","children","report_ReportInputs","event","preventDefault","INFORMATION","handleClose","dispatchClose","history","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","searchExpressions","expressions","alias","conditionalGroup","fieldName","sintetica","grupoPlanoConta","forEach","filtro"],"mappings":"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","file":"static/js/58.b5239fec.chunk.js","sourcesContent":["import { PlanoConta } from '../../../../../models/dtos/ger/planoConta';\r\nimport { ReportBasicValues } from '../../../../../models/dtos/ger/reportBasicValues';\r\nimport { BancoMCG } from '../../../../../models/dtos/mcg/bancoMCG';\r\n\r\nexport interface ConciliacaoBancariaRV extends ReportBasicValues {\r\n  planoConta?: PlanoConta;\r\n  bancoMCG?: BancoMCG;\r\n}\r\n\r\nexport const REPORT_TITLE: string = 'Relatório de Conciliação Bancária';\r\nexport const REPORT_EVENT: string = 'printConciliacaoBancaria';\r\nexport const CLASS_KEY: string = 'conciliacaobancariarv';\r\n","import React, { FC, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  DATES,\r\n  ERROR,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  showToast,\r\n  WindowComponent,\r\n  WindowComponentProps,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { getDefaultReportBasicValues } from '../../../../../models/dtos/ger/reportBasicValues';\r\nimport { getDefaultReportViewOptions, ReportViewOptions } from '../../../../../models/dtos/ger/reportViewOptions';\r\nimport { BancoMCG } from '../../../../../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../../../../../models/dtos/mcg/bancoPlanoConta';\r\nimport { obterBancoListPlanoConta } from '../../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../../store/ducks';\r\nimport { GlobalState } from '../../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport ReportForm from '../../../../components/report/ReportForm';\r\nimport { CLASS_KEY, ConciliacaoBancariaRV, REPORT_EVENT, REPORT_TITLE } from './conciliacaoBancariaRV';\r\n\r\nconst DEFAULT_VALUES: ConciliacaoBancariaRV = {\r\n  ...getDefaultReportBasicValues(REPORT_TITLE),\r\n};\r\n\r\nconst DEFAULT_OPTIONS: ReportViewOptions = {\r\n  ...getDefaultReportViewOptions(REPORT_EVENT, DATES.value),\r\n  dtFinalRequired: true,\r\n  dtInicialRequired: true,\r\n  exibirConfiguracaoDadosEmpresa: false,\r\n  exibirSegmentacaoFolha: true,\r\n};\r\n\r\nconst ConciliacaoBancariaReportView: FC<WindowComponentProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { handleSubmit, ...formProps } = useForm<ConciliacaoBancariaRV>({ defaultValues: DEFAULT_VALUES, mode: 'onBlur' });\r\n  const [bancoMCG, setBancoMCG] = useState([]);\r\n  const [isDisabledBanco, setIsDisabledBanco] = useState(true);\r\n\r\n  const contaSelecionadaObterPlanoConta = () => {\r\n    setIsDisabledBanco(true);\r\n    formProps.setValue('bancoMCG', true);\r\n\r\n    if (formProps.getValues().planoConta) {\r\n      const bancoPlanoConta: BancoPlanoConta = {\r\n        idEmpresaSelecionada: globalReducer.globalParameter.empresa.id,\r\n        idGrupoPlanoConta: formProps.getValues().planoConta.id,\r\n      };\r\n      obterBancoListPlanoConta(bancoPlanoConta, {\r\n        errorFunction: (mensagem: string): void => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: (result: BancoMCG[]): void => {\r\n          if (result.length !== 0) {\r\n            setIsDisabledBanco(false);\r\n            setBancoMCG(result);\r\n          } else {\r\n            const params: AlertProps = {\r\n              message:\r\n                'O Plano de Contas selecionado não possui uma Conta Bancária relacionada. Configure esses dados utilizando o Botão Plano de Contas - Banco',\r\n              type: AlertType.WARNING,\r\n            };\r\n            alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (!formProps.getValues().planoConta.analitica) {\r\n      erros.push('A conta selecionada deve ser do tipo análitica!');\r\n    }\r\n\r\n    if (!formProps.getValues().planoConta.analitica && !isEmpty(formProps.getValues().bancoMCG)) {\r\n      erros.push('A Conta selecionada não possui uma Conta Bancária relacionada.');\r\n      erros.push('Configure em Módulo Contabíl > Processos > Conciliação Bancária - Extrato e Lançamentos > Plano de Contas - Banco');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title={REPORT_TITLE}\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n      ]}\r\n    >\r\n      <ReportForm\r\n        {...props}\r\n        handleSubmit={handleSubmit}\r\n        formProps={formProps}\r\n        localStorageKey={CLASS_KEY}\r\n        routeProps={props}\r\n        reportBasicValues={DEFAULT_VALUES}\r\n        reportViewOptions={DEFAULT_OPTIONS}\r\n        validateExtras={validateExtras}\r\n      >\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS\r\n              id=\"planoConta\"\r\n              onChange={contaSelecionadaObterPlanoConta}\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              label=\"Conta\"\r\n              placeholder=\"Informe a Conta\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"bancoMCG.id\"\r\n              inputDropDownProps={{ optionsProvider: bancoMCG }}\r\n              isPrependLabel={true}\r\n              label=\"Banco\"\r\n              placeholder=\"Informe o Banco\"\r\n              type={InputType.DROP_DOWN}\r\n              disabled={isDisabledBanco}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ReportForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ConciliacaoBancariaReportView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","export const PADRAO = { label: \"Utilizar sinal '-' para valores negativos\", value: 'PADRAO' };\r\nexport const PARENTESE = { label: \"Utilizar Parênteses '()' para valores negativos\", value: 'PARENTESE' };\r\nexport const NATUREZA = { label: 'Utilizar Natureza da Conta', value: 'NATUREZA' };\r\n\r\nconst SALDO_REPORT_ENUM = [PADRAO, PARENTESE, NATUREZA];\r\n\r\nexport default SALDO_REPORT_ENUM;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/empresaVW';\r\n\r\nexport interface EmpresaInputSearchProps extends InputProps {\r\n  dtoClassName?: string;\r\n}\r\n\r\nconst EmpresaIS: FC<EmpresaInputSearchProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'razaoSocial',\r\n            text: 'Razão Social',\r\n          },\r\n          {\r\n            dataField: 'nomeFantasia',\r\n            text: 'Nome Fantasia',\r\n          },\r\n          {\r\n            dataField: 'cnpj',\r\n            text: 'CNPJ',\r\n          },\r\n          {\r\n            dataField: 'cpf',\r\n            text: 'CPF',\r\n          },\r\n          {\r\n            dataField: 'cei',\r\n            text: 'CEI',\r\n          },\r\n          {\r\n            dataField: 'ie',\r\n            text: 'IE',\r\n          },\r\n          {\r\n            dataField: 'im',\r\n            text: 'IM',\r\n          },\r\n          {\r\n            dataField: 'grupo',\r\n            text: 'Grupo',\r\n          },\r\n        ],\r\n        dtoClassName: props.dtoClassName || CLASS_NAME,\r\n        searchViewId: 'EmpresaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Empresa'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a Empresa'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EmpresaIS;\r\n","import { GRAPHIC } from 'summer';\r\nimport { NATUREZA } from '../../enumerated/ger/saldoReportEnum';\r\nimport { Empresa } from './empresa';\r\nimport { EnvioEmail } from './envioEmail';\r\nimport { Usuario } from './usuario';\r\n\r\nexport interface ReportBasicValues {\r\n  /** chave do relatório */\r\n  key?: string;\r\n  /** Tipo de arquivo gerado */\r\n  designType?: string;\r\n  /** Título do relatório */\r\n  title?: string;\r\n  /** Página inicial do relatório */\r\n  startPage?: string;\r\n  /** Data inicial para a geração do relatório */\r\n  dtInicial?: string;\r\n  /** Data final para a geração do relatório */\r\n  dtFinal?: string;\r\n  /** Referência inicial para a geração do relatório */\r\n  referenciaInicial?: string;\r\n  /** Referência final para a geração do relatório */\r\n  referenciaFinal?: string;\r\n  /** É para imprimir com a data atual ? */\r\n  showCurrentDate?: boolean;\r\n  empresa?: Empresa;\r\n  saldoReportEnum?: string;\r\n  exibirFormatacaoValor?: boolean;\r\n  imprimirValoresColoridos?: boolean;\r\n  /** Ano para a geração do relatório */\r\n  ano?: string;\r\n  showDadosEmpresa?: boolean;\r\n  showLogoAdministradora?: boolean;\r\n\r\n  enviarPorEmail?: boolean;\r\n  envioEmail?: EnvioEmail;\r\n  imprimirDataHora?: boolean;\r\n  imprimirCodigoEmpresa?: boolean;\r\n  usuario?: Usuario;\r\n  segmentacaoFolha?: boolean;\r\n  virtualization?: boolean;\r\n  gerarBom?: boolean;\r\n  identificadorAjuda?: string;\r\n  gerarCabecalhoPadrao?: boolean;\r\n  gerarCabecalhoPadraoAdministradora?: boolean;\r\n  gerarPorEmpresas?: boolean;\r\n  empresasSelecionadas?: Empresa[];\r\n  identificadorMenu?: string;\r\n  enviarParaConnect?: boolean;\r\n  requestSolicitacao?: any; // TODO RequestSolicitacaoDTO;\r\n  enviarEmailAdministradora?: boolean;\r\n\r\n  /** É para salvar a sessão ? */\r\n  saveSession?: boolean;\r\n  idGerEmpresa?: string;\r\n}\r\n\r\nexport function getDefaultReportBasicValues(title: string = null, identificadorAjuda: string = null, identificadorMenu: string = null) {\r\n  return {\r\n    designType: GRAPHIC.value,\r\n    empresasSelecionadas: [],\r\n    envioEmail: {\r\n      anexos: [],\r\n      assunto: title,\r\n      destinatarios: [],\r\n    },\r\n    exibirFormatacaoValor: false,\r\n    gerarBom: true,\r\n    gerarCabecalhoPadrao: true,\r\n    gerarCabecalhoPadraoAdministradora: false,\r\n    identificadorAjuda,\r\n    identificadorMenu,\r\n    imprimirCodigoEmpresa: true,\r\n    imprimirDataHora: false,\r\n    imprimirValoresColoridos: false,\r\n    requestSolicitacao: {},\r\n    saldoReportEnum: NATUREZA.value,\r\n    saveSession: false,\r\n    showDadosEmpresa: true,\r\n    showLogoAdministradora: true,\r\n    startPage: '1',\r\n    title,\r\n    virtualization: false,\r\n  };\r\n}\r\n","import { BasicReportViewOptions } from 'summer';\r\n\r\nexport interface ReportViewOptions extends BasicReportViewOptions {\r\n  exibirEnviarPorEmail?: boolean;\r\n\r\n  exibirPaginaInicial?: boolean;\r\n  exibirConfiguracaoMultiplasEmpresas?: boolean;\r\n  exibirSegmentacaoFolha?: boolean;\r\n  exibirConfiguracaoDataAtual?: boolean;\r\n  exibirImprimirValoresColoridos?: boolean;\r\n  exibirConfiguracaoLogoAdministradora?: boolean;\r\n  exibirConfiguracaoDadosEmpresa?: boolean;\r\n}\r\n\r\nexport function getDefaultReportViewOptions(reportEventType: string, reportViewType: string = null) {\r\n  return {\r\n    anoLabel: 'Ano',\r\n    dtFinalLabel: 'Data Final',\r\n    dtInicialLabel: 'Data Inicial',\r\n    exibirConfiguracaoDadosEmpresa: true,\r\n    exibirConfiguracaoDataAtual: true,\r\n    exibirConfiguracaoLogoAdministradora: true,\r\n    exibirEnviarPorEmail: true,\r\n    exibirPaginaInicial: true,\r\n    refFinalLabel: 'Referência Final',\r\n    refInicialLabel: 'Referência Inicial',\r\n    reportEventType,\r\n    reportViewType,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DetailEditForm, DetailEditViewFormProps, InputGroupInline } from 'summer';\r\nimport { DestinatarioEmail } from '../../../models/dtos/ger/destinatarioEmail';\r\n\r\nconst emptyItem: DestinatarioEmail = {\r\n  contato: '',\r\n  email: '',\r\n};\r\n\r\nconst DestinatarioEmailDetailEditView: React.FC<DetailEditViewFormProps<DestinatarioEmail>> = props => {\r\n  const { errors, getValues, register, setValue, triggerValidation } = useForm<DestinatarioEmail>({\r\n    defaultValues: props.selectedItem || emptyItem,\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const formProps = {\r\n    errors,\r\n    getValues,\r\n    register,\r\n    setValue,\r\n    triggerValidation,\r\n  };\r\n\r\n  const validateExtras = (currentItem: any, currentValues: any[], parentObject: any) => {\r\n    return [];\r\n  };\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <InputGroupInline\r\n        id=\"contato\"\r\n        isPrependLabel={true}\r\n        formProps={{\r\n          ...formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n        label=\"Contato\"\r\n        placeholder=\"Informe o nome do contato\"\r\n      />\r\n\r\n      <InputGroupInline\r\n        id=\"email\"\r\n        isPrependLabel={true}\r\n        formProps={{\r\n          ...formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n        label=\"E-mail\"\r\n        placeholder=\"Informe o e-mail do contato\"\r\n      />\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default DestinatarioEmailDetailEditView;\r\n","import React, { FC } from 'react';\r\nimport { Col, CustomInput, Row } from 'reactstrap';\r\nimport { ColumnsProps, DetailManagerForm, InputGroupInline, InputType, UseFormProps } from 'summer';\r\nimport DestinatarioEmailDetailEditView from './DestinatarioEmailDetailEditView';\r\n\r\nexport interface EnvioEmailProps {\r\n  /** UseFormProps (vide useForm) */\r\n  formProps: UseFormProps;\r\n  /** Assunto padrão */\r\n  initialSubject?: string;\r\n}\r\n\r\nconst EnvioEmail: FC<EnvioEmailProps> = props => {\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'contato',\r\n      sort: true,\r\n      text: 'Contato',\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      sort: true,\r\n      text: 'E-mail',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <p>Dados para Envio do E-mail</p>\r\n      <InputGroupInline\r\n        id=\"envioEmail.assunto\"\r\n        label=\"Assunto\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Assunto\"\r\n        formProps={{\r\n          ...props.formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n      />\r\n\r\n      <DetailManagerForm\r\n        columns={columns}\r\n        title=\"Destinatário E-mail\"\r\n        detailView={DestinatarioEmailDetailEditView}\r\n        keyField=\"email\"\r\n        formProps={props.formProps}\r\n        propName=\"envioEmail.destinatarios\"\r\n        {...props}\r\n      />\r\n\r\n      <p>Copiar para:</p>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"enviarEmailAdministradora\"\r\n            name=\"envioEmail.enviarEmailAdministradora\"\r\n            label=\"Administradora\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"enviarEmailUsuarioLogado\"\r\n            name=\"envioEmail.enviarEmailUsuarioLogado\"\r\n            label=\"Usuário Logado\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <InputGroupInline\r\n        id=\"envioEmail.mensagem\"\r\n        label=\"Mensagem\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Mensagem\"\r\n        formProps={{\r\n          ...props.formProps,\r\n          validation: {\r\n            maxLength: 1000,\r\n          },\r\n        }}\r\n        type={InputType.TEXT_AREA}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EnvioEmail;\r\n","import cx from 'clsx';\r\nimport React, { FC, MouseEvent, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, CustomInput, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  ANO,\r\n  currentMomentDate,\r\n  DATE,\r\n  DATES,\r\n  DESIGN_TYPE_ENUM,\r\n  format,\r\n  formatDate,\r\n  GRAPHIC,\r\n  InputGroupInline,\r\n  InputType,\r\n  REF_PATTERN,\r\n  REFERENCE,\r\n  REFERENCES,\r\n  UseFormProps,\r\n} from 'summer';\r\nimport { ReportBasicValues } from '../../../models/dtos/ger/reportBasicValues';\r\nimport { ReportViewOptions } from '../../../models/dtos/ger/reportViewOptions';\r\nimport SALDO_REPORT_ENUM from '../../../models/enumerated/ger/saldoReportEnum';\r\nimport { Reducers } from '../../../store/ducks';\r\nimport { GlobalState } from '../../../store/ducks/global.duck';\r\nimport EnvioEmail from '../envioEmail/EnvioEmail';\r\nimport EmpresaIS from '../ger/empresaIS/EmpresaIS';\r\n\r\nexport interface ReportProps {\r\n  /** Valores default da geração */\r\n  reportBasicValues: ReportBasicValues;\r\n  /** Opções do relatório */\r\n  reportViewOptions: ReportViewOptions;\r\n  /** UseFormProps (vide useForm) */\r\n  formProps: UseFormProps;\r\n  /** já iniciar as opções extras do relatório expandidas? */\r\n  extraConfigOpened?: boolean;\r\n}\r\n\r\nconst ReportInputs: FC<ReportProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [activeTab, setActiveTab] = useState(1);\r\n\r\n  useEffect(\r\n    () => {\r\n      const { printingTypes, reportViewType } = props.reportViewOptions;\r\n      let resetObject: any = {\r\n        ...props.reportBasicValues,\r\n        designType: printingTypes && printingTypes.length > 0 ? printingTypes[0] : GRAPHIC.value,\r\n        idGerEmpresa: globalReducer.globalParameter.empresa.id,\r\n        startPage: 1,\r\n      };\r\n      const current = currentMomentDate();\r\n      const endDate = currentMomentDate();\r\n      switch (reportViewType) {\r\n        case DATE.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            dtInicial: formatDate(current.toDate()),\r\n          };\r\n          break;\r\n        case DATES.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            dtFinal: formatDate(endDate.endOf('month').toDate()),\r\n            dtInicial: formatDate(current.toDate()),\r\n          };\r\n          break;\r\n        case REFERENCE.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            referenciaInicial: format(current.toDate(), REF_PATTERN),\r\n          };\r\n          break;\r\n        case REFERENCES.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            referenciaFinal: format(current.toDate(), REF_PATTERN),\r\n            referenciaInicial: format(endDate.toDate(), REF_PATTERN),\r\n          };\r\n          break;\r\n        case ANO.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            ano: String(current.year()),\r\n          };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      props.formProps.reset(resetObject);\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [props.reportViewOptions, globalReducer.globalParameter.empresa]\r\n  );\r\n\r\n  const toggleTab = ({ target }: MouseEvent) => {\r\n    const { tabIndex } = target as HTMLElement;\r\n    if (activeTab !== tabIndex) {\r\n      setActiveTab(tabIndex);\r\n    }\r\n  };\r\n\r\n  const restoreTitle = () => {\r\n    props.formProps.setValue('title', props.reportBasicValues.title, true);\r\n  };\r\n\r\n  const dateInitial = (\r\n    <InputGroupInline\r\n      id=\"dtInicial\"\r\n      label={props.reportViewOptions.dtInicialLabel}\r\n      isPrependLabel={true}\r\n      formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.dtInicialRequired } }}\r\n      type={InputType.DATE}\r\n    />\r\n  );\r\n\r\n  const dateComponent = props.reportViewOptions.reportViewType === DATE.value ? dateInitial : null;\r\n\r\n  const datesComponent =\r\n    props.reportViewOptions.reportViewType === DATES.value ? (\r\n      <>\r\n        {dateInitial}\r\n\r\n        <InputGroupInline\r\n          id=\"dtFinal\"\r\n          label={props.reportViewOptions.dtFinalLabel}\r\n          isPrependLabel={true}\r\n          formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.dtFinalRequired } }}\r\n          type={InputType.DATE}\r\n        />\r\n      </>\r\n    ) : null;\r\n\r\n  const referenceInitial = (\r\n    <InputGroupInline\r\n      id=\"referenciaInicial\"\r\n      label={props.reportViewOptions.refInicialLabel}\r\n      isPrependLabel={true}\r\n      formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.refInicialRequired } }}\r\n      type={InputType.REFERENCE}\r\n    />\r\n  );\r\n\r\n  const referenceComponent = props.reportViewOptions.reportViewType === REFERENCE.value ? referenceInitial : null;\r\n\r\n  const referencesComponent =\r\n    props.reportViewOptions.reportViewType === REFERENCES.value ? (\r\n      <>\r\n        {referenceInitial}\r\n\r\n        <InputGroupInline\r\n          id=\"referenciaFinal\"\r\n          label={props.reportViewOptions.refFinalLabel}\r\n          isPrependLabel={true}\r\n          formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.refFinalRequired } }}\r\n          type={InputType.REFERENCE}\r\n        />\r\n      </>\r\n    ) : null;\r\n\r\n  const anoComponent =\r\n    props.reportViewOptions.reportViewType === ANO.value ? (\r\n      <InputGroupInline\r\n        id=\"ano\"\r\n        label={props.reportViewOptions.anoLabel}\r\n        isPrependLabel={true}\r\n        formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.anoRequired } }}\r\n        inputMaskedProps={{ mask: '9999' }}\r\n        type={InputType.MASK}\r\n      />\r\n    ) : null;\r\n\r\n  const startPageComponent = props.reportViewOptions.exibirPaginaInicial ? (\r\n    <InputGroupInline\r\n      id=\"startPage\"\r\n      label=\"Página Inicial\"\r\n      isPrependLabel={true}\r\n      placeholder=\"Página Inicial\"\r\n      formProps={{\r\n        ...props.formProps,\r\n        validation: {\r\n          min: 0,\r\n          required: true,\r\n        },\r\n      }}\r\n      type={InputType.NUMBER}\r\n    />\r\n  ) : null;\r\n\r\n  const multiplasEmpresasComponent = props.reportViewOptions.exibirConfiguracaoMultiplasEmpresas ? (\r\n    <>\r\n      <Row className=\"align-items-center\">\r\n        <Col xs={2}>\r\n          <CustomInput type=\"switch\" id=\"gerarPorEmpresas\" name=\"gerarPorEmpresas\" label=\"Gerar por Empresas\" innerRef={props.formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <EmpresaIS\r\n            formProps={props.formProps}\r\n            label=\"Empresa(s)\"\r\n            placeholder=\"Selecione uma ou várias empresas\"\r\n            id=\"empresasSelecionadas\"\r\n            isPrependLabel={true}\r\n            inputProps={{ disabled: props.formProps.getValues().gerarPorEmpresas, style: { marginBottom: 20 } }}\r\n            inputSearchProps={{ size: 'xl', selectProps: { isMulti: true } }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  ) : null;\r\n\r\n  const segmentacaoFolhaComponent = props.reportViewOptions.exibirSegmentacaoFolha ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput\r\n          type=\"switch\"\r\n          id=\"segmentacaoFolha\"\r\n          name=\"segmentacaoFolha\"\r\n          label=\"Exibir Número das Páginas como Folhas\"\r\n          innerRef={props.formProps.register}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const dataAtualComponent = props.reportViewOptions.exibirConfiguracaoDataAtual ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput type=\"switch\" id=\"showCurrentDate\" name=\"showCurrentDate\" label=\"Imprimir a Data Atual\" innerRef={props.formProps.register} />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const logoAdmComponent = props.reportViewOptions.exibirConfiguracaoLogoAdministradora ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput\r\n          type=\"switch\"\r\n          id=\"showLogoAdministradora\"\r\n          name=\"showLogoAdministradora\"\r\n          label=\"Imprimir o Logo Administradora\"\r\n          innerRef={props.formProps.register}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const dadosEmpresaComponent = props.reportViewOptions.exibirConfiguracaoDadosEmpresa ? (\r\n    <>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"showDadosEmpresa\"\r\n            name=\"showDadosEmpresa\"\r\n            label=\"Imprimir os Dados da Empresa\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"imprimirCodigoEmpresa\"\r\n            name=\"imprimirCodigoEmpresa\"\r\n            label=\"Imprimir o Código Empresa\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  ) : null;\r\n\r\n  const formatacaoValoresComponent = props.reportBasicValues.exibirFormatacaoValor ? (\r\n    <>\r\n      {props.reportViewOptions.exibirImprimirValoresColoridos && (\r\n        <Row className=\"mb-3\">\r\n          <Col>\r\n            <CustomInput\r\n              type=\"switch\"\r\n              id=\"imprimirValoresColoridos\"\r\n              name=\"imprimirValoresColoridos\"\r\n              label=\"Imprimir Valores Devedores em Azul e Credores em Vermelho\"\r\n              innerRef={props.formProps.register}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      <InputGroupInline\r\n        id=\"saldoReportEnum\"\r\n        label=\"Tipo de Formatação de Valores\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Selecione o tipo de formatação dos valores\"\r\n        formProps={{ ...props.formProps, validation: { required: true } }}\r\n        inputDropDownProps={{\r\n          optionsProvider: SALDO_REPORT_ENUM,\r\n          selectProps: { isClearable: false },\r\n        }}\r\n        type={InputType.DROP_DOWN}\r\n      />\r\n    </>\r\n  ) : null;\r\n\r\n  return (\r\n    <Accordion formProps={props.formProps} firstOpen={props.extraConfigOpened || false}>\r\n      <AccordionItem title=\"Configurações adicionais do Relatório\">\r\n        <>\r\n          <Nav tabs={true}>\r\n            <NavItem>\r\n              <NavLink className={cx({ active: activeTab === 1 })} tabIndex={1} onClick={toggleTab}>\r\n                Configurações Gerais\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={cx({ active: activeTab === 2 })}\r\n                tabIndex={2}\r\n                onClick={toggleTab}\r\n                disabled={!props.reportViewOptions.exibirEnviarPorEmail}\r\n              >\r\n                Envio de E-mail\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink className={cx({ active: activeTab === 3 })} tabIndex={3} onClick={toggleTab} disabled={true}>\r\n                Connect\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n\r\n          <TabContent className=\"mb-5\" activeTab={activeTab}>\r\n            <TabPane tabId={1} className=\"mb-0 p-3\">\r\n              <InputGroupInline formProps={props.formProps} id=\"idGerEmpresa\" hidden={true} />\r\n              <InputGroupInline\r\n                id=\"title\"\r\n                label=\"Título\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Título\"\r\n                iconAppend=\"undo-alt\"\r\n                appendClickHandler={restoreTitle}\r\n                formProps={{\r\n                  ...props.formProps,\r\n                  validation: {\r\n                    maxLength: 120,\r\n                    minLength: 5,\r\n                    required: true,\r\n                  },\r\n                }}\r\n              />\r\n\r\n              {startPageComponent}\r\n\r\n              {multiplasEmpresasComponent}\r\n\r\n              {segmentacaoFolhaComponent}\r\n\r\n              {dataAtualComponent}\r\n\r\n              {formatacaoValoresComponent}\r\n\r\n              {logoAdmComponent}\r\n\r\n              {dadosEmpresaComponent}\r\n\r\n              {dateComponent}\r\n              {datesComponent}\r\n              {referenceComponent}\r\n              {referencesComponent}\r\n              {anoComponent}\r\n\r\n              <hr />\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"gerarCabecalhoPadrao\"\r\n                    name=\"gerarCabecalhoPadrao\"\r\n                    label=\"Exibir Cabeçalho\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"virtualization\"\r\n                    name=\"virtualization\"\r\n                    label=\"Virtualizar Relatório\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <InputGroupInline\r\n                id=\"designType\"\r\n                label=\"Tipo de Impressão\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Selecione o tipo de impressão\"\r\n                formProps={{ ...props.formProps, validation: { required: true } }}\r\n                inputDropDownProps={{\r\n                  optionsProvider: props.reportViewOptions.printingTypes ? props.reportViewOptions.printingTypes : DESIGN_TYPE_ENUM,\r\n                  selectProps: { isClearable: false },\r\n                }}\r\n                type={InputType.DROP_DOWN}\r\n              />\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"enviarPorEmail\"\r\n                    name=\"enviarPorEmail\"\r\n                    label=\"Enviar por E-mail\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"enviarParaConnect\"\r\n                    name=\"enviarParaConnect\"\r\n                    label=\"Enviar para o Connect\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId={2} className=\"mb-0 p-3\">\r\n              <EnvioEmail formProps={props.formProps} initialSubject={props.reportBasicValues.title} />\r\n            </TabPane>\r\n            <TabPane tabId={3} className=\"mb-0 p-3\">\r\n              {/* TODO fazer tela de envio de mensagens do Connect*/}\r\n            </TabPane>\r\n          </TabContent>\r\n        </>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\nexport default ReportInputs;\r\n","import React, { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  dispatchClose,\r\n  ErroList,\r\n  ERROR,\r\n  INFORMATION,\r\n  ProcessBar,\r\n  showToast,\r\n  UseFormProps,\r\n} from 'summer';\r\nimport { ReportBasicValues } from '../../../models/dtos/ger/reportBasicValues';\r\nimport { ReportViewOptions } from '../../../models/dtos/ger/reportViewOptions';\r\nimport { gerarReport } from '../../../services/report.service';\r\nimport { Reducers } from '../../../store/ducks';\r\nimport { GlobalState, toggleHeaderDrawer } from '../../../store/ducks/global.duck';\r\nimport ReportInputs from './ReportInputs';\r\n\r\nexport interface BasicReportFormProps {\r\n  /** Função do submit (vide useForm) */\r\n  handleSubmit: (onSubmit: any) => any;\r\n  /** Função de fechar/redirecionar a tela */\r\n  handleClose?: () => void;\r\n  /** Propriedades de formulário da tela pai (ReportView) */\r\n  formProps: UseFormProps;\r\n  /** Valores default da geração */\r\n  reportBasicValues: ReportBasicValues;\r\n  /** Configuração da tela de relatório */\r\n  reportViewOptions: ReportViewOptions;\r\n  /** chave que guarda as configurações de geração no cache */\r\n  localStorageKey?: string;\r\n  /** ID da view da tela pai */\r\n  viewId?: string;\r\n  /** Função de validações extras */\r\n  validateExtras?: (formData: any) => string[];\r\n  /** Função de envio de parametros extras */\r\n  addExtraParameters?: (formData: any) => any;\r\n  /** já iniciar as opções extras do relatório expandidas? */\r\n  extraConfigOpened?: boolean;\r\n  /** Função executada após o submit */\r\n  afterSubmit?: () => void;\r\n}\r\n\r\nexport interface ReportFormProps extends BasicReportFormProps {\r\n  /** Propriedades das rotas */\r\n  routeProps?: RouteComponentProps;\r\n}\r\n\r\nconst ReportForm: FC<ReportFormProps> = props => {\r\n  const { headerDrawerToggle } = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleClose() {\r\n    if (props.handleClose) {\r\n      props.handleClose();\r\n    } else if (props.routeProps) {\r\n      dispatchClose(props.routeProps, props.routeProps.history);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (data: any, event: any) => {\r\n    event.preventDefault();\r\n    let erros = [];\r\n    if (props.validateExtras) {\r\n      erros = props.validateExtras(data);\r\n    }\r\n    if (erros && erros.length) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.ERROR,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      showToast('Seu arquivo está sendo gerado. Uma notificação será exibida quando estiver finalizado e o mesmo poderá ser salvo.', INFORMATION);\r\n      finishSubmit(data);\r\n    }\r\n  };\r\n\r\n  const finishSubmit = (data: any) => {\r\n    if (props.addExtraParameters) {\r\n      data = props.addExtraParameters(data);\r\n    }\r\n    data.saveSession = false;\r\n\r\n    gerarReport(data, props.reportViewOptions.reportEventType, {\r\n      errorFunction: (mensagem: string) => showToast(mensagem, ERROR),\r\n      thenFunction: () => {\r\n        if (!headerDrawerToggle) {\r\n          dispatch(toggleHeaderDrawer());\r\n        }\r\n        if (props.afterSubmit) {\r\n          props.afterSubmit();\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form noValidate={true}>\r\n      {props.children}\r\n      <ReportInputs\r\n        reportBasicValues={props.reportBasicValues}\r\n        reportViewOptions={props.reportViewOptions}\r\n        formProps={props.formProps}\r\n        extraConfigOpened={props.extraConfigOpened}\r\n      />\r\n\r\n      <ProcessBar handleSubmit={props.handleSubmit(onSubmit)} handleClose={handleClose} />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ReportForm;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n"],"sourceRoot":""}