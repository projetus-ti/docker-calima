{"version":3,"sources":["views/pages/mcg/lancamentoPadrao/LancamentoPadraoHistoricoDetailEditView.tsx","views/pages/mcg/lancamentoPadrao/LancamentoPadraoDetailEditView.tsx","views/pages/mcg/lancamentoPadrao/LancamentoPadraoEditView.tsx","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/ger/centroCusto.ts","views/components/mcg/centroCustoIS/CentroCustoIS.tsx","models/dtos/ger/historico.ts","models/dtos/mcg/lancamentoMCGConfig.ts","views/components/mcg/historicoIS/HistoricoIS.tsx","models/dtos/mcg/lotePadrao.ts"],"names":["emptyItem","historico","historicoVariavel","indice","lotePadraoLancamento","LancamentoPadraoHistoricoDetailEditView","props","_useForm","useForm","defaultValues","selectedItem","mode","formProps","errors","getValues","register","setValue","triggerValidation","react_default","a","createElement","summer_esm","handleSubmit","handleCancel","validateExtras","formData","erros","isEmpty","push","hidden","id","Row","Col","HistoricoIS","Object","objectSpread2","validation","maxLength","isPrependLabel","label","placeholder","type","InputType","TEXT_AREA","centroCustoCredito","centroCustoDebito","lotePadrao","planoContaCredito","planoContaDebito","LancamentoPadraoDetailEditView","_useState","useState","_useState2","slicedToArray","isMultipleHistorico","setIsMultipleHistorico","_useState3","_useState4","useCentroCusto","setUseCentroCusto","globalParameter","useSelector","state","globalReducer","_globalParameter$grup","grupoPlanoConta","digitoAtivo","digitoPassivo","digitoReceita","digitoDespesa","useEffect","empresaMCG","idMcgLancamentoConfig","findById","CLASS_NAME","errorFunction","mensagem","showToast","ERROR","thenFunction","result","defineMultiplosHistoricos","defineCentroCusto","gerarIndice","configLancamento","utilizarCentroCusto","validateDebitoCredito","validateCentroCusto","conta","charAt","validateHistorico","collection","equals","i","length","firstList","j","secondList","findDuplicate","arrayHistorico","PlanoContaIS","onChange","params","message","onNoClick","AlertType","WARNING_YES_NO","alertManager","emit","ACTION_EVENTS","SHOW","CentroCustoIS","assign","columns","dataField","sort","text","detailView","detailViewSize","keyField","propName","title","onBeforeAdd","done","async","INFORMATION","LancamentoPadraoEditView","getSelectedItem","empresa","setTimeout","formatter","cell","row","map","it","descricao","concat","hasPartidaDobrada","count","forEach","validarConfigLancamentoPadrao","itemData","WARNING","useGlobalParameter","wikiId","editViewProps","dtoClassName","onlyNumber","labelWidth","tooltipProps","NUMBER","required","inputProps","autoFocus","onBeforeEdit","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","value","sintetica","filtro","idGrupoPlanoConta","searchViewId","INPUT_SEARCH","__webpack_require__","d","__webpack_exports__","summer__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"static/js/92.4f4272bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { DetailEditForm, DetailEditViewFormProps, InputGroupInline, InputType, isEmpty } from 'summer';\r\nimport { LotePadraoHistorico } from '../../../../models/dtos/mcg/lotePadraoHistorico';\r\nimport HistoricoIS from '../../../components/mcg/historicoIS/HistoricoIS';\r\n\r\nconst emptyItem: LotePadraoHistorico = {\r\n  historico: null,\r\n  historicoVariavel: null,\r\n  indice: null,\r\n  lotePadraoLancamento: null,\r\n};\r\n\r\nconst LancamentoPadraoHistoricoDetailEditView: React.FC<DetailEditViewFormProps<LotePadraoHistorico>> = props => {\r\n  const { errors, getValues, register, setValue, triggerValidation } = useForm<LotePadraoHistorico>({\r\n    defaultValues: props.selectedItem || emptyItem,\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const formProps = {\r\n    errors,\r\n    getValues,\r\n    register,\r\n    setValue,\r\n    triggerValidation,\r\n  };\r\n\r\n  const validateExtras = (formData: LotePadraoHistorico) => {\r\n    const erros = [];\r\n    if (formData.historico === null && isEmpty(formData.historicoVariavel)) {\r\n      erros.push('É necessário haver pelo menos um Histórico Padrão ou Variável para o lançamento');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <InputGroupInline formProps={formProps} hidden={true} id=\"indice\" />\r\n      <Row>\r\n        <Col>\r\n          <HistoricoIS id=\"historico\" formProps={formProps} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={{ ...formProps, validation: { maxLength: 500 } }}\r\n            id=\"historicoVariavel\"\r\n            isPrependLabel={true}\r\n            label=\"Histórico Variável\"\r\n            placeholder=\"Informe o Histórico Variável\"\r\n            type={InputType.TEXT_AREA}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default LancamentoPadraoHistoricoDetailEditView;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  ColumnsProps,\r\n  DetailEditForm,\r\n  DetailEditViewFormProps,\r\n  DetailManagerForm,\r\n  ERROR,\r\n  findById,\r\n  isEmpty,\r\n  showToast,\r\n  ValidationResult,\r\n} from 'summer';\r\nimport { CLASS_NAME, LancamentoMCGConfig } from '../../../../models/dtos/mcg/lancamentoMCGConfig';\r\nimport { LotePadraoHistorico } from '../../../../models/dtos/mcg/lotePadraoHistorico';\r\nimport { LotePadraoLancamento } from '../../../../models/dtos/mcg/lotePadraoLancamento';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport CentroCustoIS from '../../../components/mcg/centroCustoIS/CentroCustoIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport './LancamentoPadrao.css';\r\nimport LancamentoPadraoHistoricoDetailEditView from './LancamentoPadraoHistoricoDetailEditView';\r\n\r\nconst emptyItem: LotePadraoLancamento = {\r\n  centroCustoCredito: null,\r\n  centroCustoDebito: null,\r\n  historico: null,\r\n  lotePadrao: null,\r\n  planoContaCredito: null,\r\n  planoContaDebito: null,\r\n};\r\n\r\nconst LancamentoPadraoDetailEditView: React.FC<DetailEditViewFormProps<LotePadraoLancamento>> = props => {\r\n  const formProps = useForm<LotePadraoLancamento>({\r\n    defaultValues: props.selectedItem || emptyItem,\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const [isMultipleHistorico, setIsMultipleHistorico] = useState(null);\r\n\r\n  const [useCentroCusto, setUseCentroCusto] = useState(false);\r\n\r\n  const { globalParameter } = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const { digitoAtivo, digitoPassivo, digitoReceita, digitoDespesa } = globalParameter.grupoPlanoConta;\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!isEmpty(globalParameter.empresaMCG)) {\r\n        const { idMcgLancamentoConfig } = globalParameter.empresaMCG;\r\n        findById({ id: idMcgLancamentoConfig }, CLASS_NAME, {\r\n          errorFunction: mensagem => {\r\n            showToast(mensagem, ERROR);\r\n          },\r\n          thenFunction: result => {\r\n            defineMultiplosHistoricos(result);\r\n            defineCentroCusto(result);\r\n          },\r\n        });\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      gerarIndice();\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [formProps.getValues().historico]\r\n  );\r\n\r\n  const defineMultiplosHistoricos = (configLancamento: LancamentoMCGConfig): void => {\r\n    if (configLancamento.historico === 1) {\r\n      setIsMultipleHistorico(true);\r\n    } else {\r\n      setIsMultipleHistorico(false);\r\n    }\r\n  };\r\n\r\n  const defineCentroCusto = (configLancamento: LancamentoMCGConfig): void => {\r\n    if (configLancamento.utilizarCentroCusto) {\r\n      setUseCentroCusto(true);\r\n    }\r\n  };\r\n\r\n  const validateExtras = (): string[] => {\r\n    const erros = [];\r\n\r\n    validateDebitoCredito(erros);\r\n    validateCentroCusto(erros);\r\n    validateHistorico(erros);\r\n\r\n    return erros;\r\n  };\r\n\r\n  const validateDebitoCredito = (erros: any): void => {\r\n    if (isEmpty(formProps.getValues().planoContaCredito) && isEmpty(formProps.getValues().planoContaDebito)) {\r\n      erros.push('Informe ao menos uma conta de Débito ou Crédito');\r\n    }\r\n    if (!isEmpty(formProps.getValues().planoContaCredito) && !isEmpty(formProps.getValues().planoContaDebito)) {\r\n      if (formProps.getValues().planoContaCredito.id === formProps.getValues().planoContaDebito.id) {\r\n        erros.push('As Contas de Débito e Crédito não podem ser iguais');\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateCentroCusto = (erros: any): void => {\r\n    if (useCentroCusto && (isEmpty(formProps.getValues().centroCustoCredito) || isEmpty(formProps.getValues().centroCustoDebito))) {\r\n      if (!isEmpty(formProps.getValues().planoContaDebito)) {\r\n        if (\r\n          formProps.getValues().planoContaDebito.conta.charAt(0) !== digitoAtivo &&\r\n          formProps.getValues().planoContaDebito.conta.charAt(0) !== digitoPassivo\r\n        ) {\r\n          erros.push('Centro de Custo de Débito não pode estar em branco');\r\n        }\r\n      }\r\n\r\n      if (!isEmpty(formProps.getValues().planoContaCredito)) {\r\n        if (\r\n          formProps.getValues().planoContaCredito.conta.charAt(0) !== digitoAtivo &&\r\n          formProps.getValues().planoContaCredito.conta.charAt(0) !== digitoPassivo\r\n        ) {\r\n          erros.push('Centro de Custo de Credito não pode estar em branco');\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateHistorico = (erros: any): void => {\r\n    if (isEmpty(formProps.getValues().historico)) {\r\n      erros.push('É necessário haver pelo menos um Histórico Padrão ou Variável para o lançamento');\r\n    } else {\r\n      const duplicado = findDuplicate(formProps.getValues().historico);\r\n      if (duplicado) {\r\n        erros.push('As descrições do campo Histórico Variável devem ser diferentes');\r\n      }\r\n    }\r\n  };\r\n\r\n  function findDuplicate(collection: LotePadraoHistorico[]): boolean {\r\n    let equals = false;\r\n    for (let i = 0; i < collection.length - 1; i++) {\r\n      const firstList: LotePadraoHistorico = collection[i];\r\n      for (let j = i + 1; j < collection.length; j++) {\r\n        const secondList: LotePadraoHistorico = collection[j];\r\n        if (\r\n          !isEmpty(firstList.historico) &&\r\n          !isEmpty(secondList.historico && !isEmpty(firstList.historicoVariavel) === !isEmpty(secondList.historicoVariavel))\r\n        ) {\r\n          if (firstList.historico.id === secondList.historico.id && firstList.historicoVariavel === secondList.historicoVariavel) {\r\n            equals = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return equals;\r\n  }\r\n\r\n  const validarContasReceita = (): void => {\r\n    if (!isEmpty(formProps.getValues().planoContaDebito) && formProps.getValues().planoContaDebito.conta.charAt(0) === digitoReceita) {\r\n      const params: AlertProps = {\r\n        message: 'Deseja realmente informar uma Conta de Receita para Débito?',\r\n        onNoClick: () => {\r\n          formProps.setValue('planoContaDebito', null);\r\n          formProps.triggerValidation();\r\n        },\r\n        type: AlertType.WARNING_YES_NO,\r\n      };\r\n\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    }\r\n  };\r\n\r\n  const validarContasDespesa = (): void => {\r\n    if (!isEmpty(formProps.getValues().planoContaCredito) && formProps.getValues().planoContaCredito.conta.charAt(0) === digitoDespesa) {\r\n      const params: AlertProps = {\r\n        message: 'Deseja realmente informar uma Conta de Despesa para Crédito?',\r\n        onNoClick: () => {\r\n          formProps.setValue('planoContaCredito', null);\r\n          formProps.triggerValidation();\r\n        },\r\n        type: AlertType.WARNING_YES_NO,\r\n      };\r\n\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    }\r\n  };\r\n\r\n  const gerarIndice = (): void => {\r\n    const arrayHistorico = formProps.getValues().historico;\r\n    if (!isEmpty(arrayHistorico)) {\r\n      for (let i = 0; i < arrayHistorico.length; i++) {\r\n        if (isEmpty(arrayHistorico[i].indice)) {\r\n          arrayHistorico[i].indice = i;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const beforeAddFunc = (done: any) => {\r\n    const result: ValidationResult = { async: false };\r\n\r\n    if (!isMultipleHistorico && formProps.getValues().historico && formProps.getValues().historico.length > 0) {\r\n      const params: AlertProps = {\r\n        message:\r\n          'A configuração atual dos Históricos para os Lançamentos Padrões é de um único histórico.\\nJá existe um ou mais históricos na listagem, apenas a edição dos históricos já cadastrados será possível.' +\r\n          '\\nPara incluir novos históricos na listagem acesse: Manutenção> Configuração> Lançamentos. E altere o campo histórico para Vários Lançamentos.',\r\n        type: AlertType.INFORMATION,\r\n      };\r\n\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n      result.async = true;\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'historico.codigo',\r\n      sort: true,\r\n      text: 'Código',\r\n    },\r\n    {\r\n      dataField: 'historico.descricao',\r\n      sort: true,\r\n      text: 'Descrição',\r\n    },\r\n    {\r\n      dataField: 'historicoVariavel',\r\n      text: 'Histórico Variável',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <Row>\r\n        <Col>\r\n          <PlanoContaIS id=\"planoContaDebito\" formProps={formProps} label=\"Débito\" onChange={validarContasReceita} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <CentroCustoIS id=\"centroCustoDebito\" formProps={formProps} label=\"Centro de Custo Débito\" />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <PlanoContaIS id=\"planoContaCredito\" formProps={formProps} label=\"Crédito\" onChange={validarContasDespesa} />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <CentroCustoIS id=\"centroCustoCredito\" formProps={formProps} label=\"Centro de Custo Crédito\" />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Row>\r\n            <Col>\r\n              <DetailManagerForm\r\n                {...props}\r\n                columns={columns}\r\n                detailView={LancamentoPadraoHistoricoDetailEditView}\r\n                detailViewSize=\"large\"\r\n                formProps={formProps}\r\n                keyField=\"rowIndex\"\r\n                propName=\"historico\"\r\n                title=\"Históricos\"\r\n                onBeforeAdd={beforeAddFunc}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default LancamentoPadraoDetailEditView;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  ColumnsProps,\r\n  DetailManagerForm,\r\n  EditForm,\r\n  EditViewProps,\r\n  getSelectedItem,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  onlyNumber,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { CLASS_NAME, LotePadrao } from '../../../../models/dtos/mcg/lotePadrao';\r\nimport { LotePadraoLancamento } from '../../../../models/dtos/mcg/lotePadraoLancamento';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport './LancamentoPadrao.css';\r\nimport LancamentoPadraoDetailEditView from './LancamentoPadraoDetailEditView';\r\n\r\ninterface LancamentoPadraoEditViewProps extends EditViewProps<LotePadrao> {}\r\n\r\nconst LancamentoPadraoEditView: FC<LancamentoPadraoEditViewProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n\r\n  const formProps = useForm<LotePadrao>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n\r\n  const { globalParameter } = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const defaultWidth: number = 100;\r\n  useEffect(\r\n    () => {\r\n      if (globalParameter.empresa) {\r\n        const {\r\n          grupoPlanoConta: { id },\r\n        } = globalParameter;\r\n        setTimeout(() => {\r\n          formProps.setValue('grupoPlanoConta', { id }, true);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const formatterHistorico = (cell, row: LotePadraoLancamento) => {\r\n    return row.historico\r\n      ? row.historico.map(it => {\r\n          let result = '';\r\n\r\n          if (it.historico && !isEmpty(it.historico.descricao)) {\r\n            result = result.concat(`${it.historico.descricao} `);\r\n          }\r\n\r\n          if (!isEmpty(it.historicoVariavel)) {\r\n            result = result.concat(`${it.historicoVariavel} `);\r\n          }\r\n          return result;\r\n        })\r\n      : '';\r\n  };\r\n\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'planoContaDebito.conta',\r\n      sort: true,\r\n      text: 'Conta Débito',\r\n    },\r\n    {\r\n      dataField: 'centroCustoDebito.descricao',\r\n      sort: true,\r\n      text: 'Centro de Custo Débito',\r\n    },\r\n    {\r\n      dataField: 'planoContaCredito.conta',\r\n      sort: true,\r\n      text: 'Conta Crédito',\r\n    },\r\n    {\r\n      dataField: 'centroCustoCredito.descricao',\r\n      sort: true,\r\n      text: 'Centro de Custo Crédito',\r\n    },\r\n    {\r\n      dataField: 'historico',\r\n      formatter: formatterHistorico,\r\n      text: 'Histórico',\r\n    },\r\n  ];\r\n\r\n  const validateExtras = (formData: LotePadrao): string[] => {\r\n    const erros = [];\r\n    if (isEmpty(formData.lotePadraoLancamento)) {\r\n      erros.push('Inclua ao menos um lançamento para salvar');\r\n    }\r\n\r\n    if (!isEmpty(formData.lotePadraoLancamento) && formData.lotePadraoLancamento.length > 1) {\r\n      if (hasPartidaDobrada()) {\r\n        erros.push('O lançamento de partida dobrada deve ser o único do lote.');\r\n      }\r\n    }\r\n    return erros;\r\n  };\r\n\r\n  const hasPartidaDobrada = (): boolean => {\r\n    let count = 0;\r\n\r\n    formProps.getValues().lotePadraoLancamento.forEach(it => {\r\n      if (it.planoContaCredito !== null && it.planoContaDebito !== null) {\r\n        count++;\r\n      }\r\n    });\r\n\r\n    return count > 0;\r\n  };\r\n\r\n  const validarConfigLancamentoPadrao = (itemData, done) => {\r\n    if (!isEmpty(globalParameter.empresaMCG)) {\r\n      const { idMcgLancamentoConfig } = globalParameter.empresaMCG;\r\n      if (isEmpty(idMcgLancamentoConfig)) {\r\n        const params: AlertProps = {\r\n          message: `Não existe configuração padrão de Lançamentos. Para realizar a configuração acesse: Manutenção > Configurações > Empresa.`,\r\n          type: AlertType.WARNING,\r\n        };\r\n        alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n      } else {\r\n        done(itemData);\r\n      }\r\n    }\r\n    return { async: true };\r\n  };\r\n\r\n  const beforeAdd = done => validarConfigLancamentoPadrao(null, done);\r\n\r\n  return (\r\n    <WindowComponent title=\"Manutenção de Lançamentos Padrões\" useGlobalParameter={true} globalParameter={globalParameter} wikiId={2200}>\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} validateExtras={validateExtras}>\r\n        <InputGroupInline formProps={formProps} id=\"grupoPlanoConta.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { ...onlyNumber(0, 6) } }}\r\n              id=\"codigo\"\r\n              isPrependLabel={true}\r\n              label=\"Código\"\r\n              labelWidth={defaultWidth}\r\n              placeholder=\"Informe o Código.\"\r\n              tooltipProps={{ message: 'Preenchimento Opcional - Codificação Automática' }}\r\n              type={InputType.NUMBER}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { maxLength: 60, required: true } }}\r\n              id=\"descricao\"\r\n              isPrependLabel={true}\r\n              inputProps={{ autoFocus: true }}\r\n              label=\"Descrição\"\r\n              labelWidth={defaultWidth}\r\n              placeholder=\"Informe a Descrição.\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <DetailManagerForm\r\n              {...props}\r\n              columns={columns}\r\n              detailView={LancamentoPadraoDetailEditView}\r\n              detailViewSize=\"large\"\r\n              formProps={formProps}\r\n              keyField=\"rowIndex\"\r\n              onBeforeAdd={beforeAdd}\r\n              onBeforeEdit={validarConfigLancamentoPadrao}\r\n              propName=\"lotePadraoLancamento\"\r\n              title=\"Lançamentos\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default LancamentoPadraoEditView;\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { Bem } from '../mcp/bem';\r\nimport { GrupoCentroCusto } from './grupoCentroCusto';\r\n\r\nexport interface CentroCusto extends Basic {\r\n  codigo?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  analitica?: boolean;\r\n  grupoCentroCusto?: GrupoCentroCusto;\r\n  bem?: Bem;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.centrocusto';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/centroCusto';\r\n\r\nconst CentroCustoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'CentroCustoSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Centro de Custo'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Centro de Custo'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CentroCustoIS;\r\n","import { Basic } from 'summer';\r\nimport { GrupoHistorico } from './grupoHistorico';\r\n\r\nexport interface Historico extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  grupoHistorico?: GrupoHistorico;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.historico';\r\n","import { Basic } from 'summer';\r\n\r\nexport interface LancamentoMCGConfig extends Basic {\r\n  descricao?: string;\r\n  exibirSaldoContas?: boolean;\r\n  fixarCentroCustoCredito?: boolean;\r\n  fixarCentroCustoDebito?: boolean;\r\n  fixarContaCredito?: boolean;\r\n  fixarContaDebito?: boolean;\r\n  fixarData?: boolean;\r\n  fixarHistoricoPadrao?: boolean;\r\n  fixarHistoricoVariavel?: boolean;\r\n  /** este campo utiliza o enum LancamentoMCGFormaEnum */\r\n  formaLancamento?: number;\r\n  /** este campo utiliza o enum LancamentoConfigHistoricoTypeEnum */\r\n  historico?: number;\r\n  informarLancamentoEncerramento?: boolean;\r\n  /** este campo utiliza o enum TipoBloqueioLancamentoEnum */\r\n  tipoBloqueioLancamento?: number;\r\n  utilizarCentroCusto?: boolean;\r\n  utilizarCentroCustoAtivoPassivo?: boolean;\r\n  utilizarHistoricoPadrao?: boolean;\r\n  utilizarHistoricoVariavel?: boolean;\r\n  utilizarLancPadrao?: boolean;\r\n  /** este campo utiliza o enum lancamentoMCGTipoValidLancPartidaSimples */\r\n  validacaoLancPartidaSimples?: string;\r\n  validarLancReceitaDespesa?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.lancamentomcgconfig';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/historico';\r\n\r\nconst HistoricoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      formProps={{ ...props.formProps }}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'HistoricoSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Histórico'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Histórico'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HistoricoIS;\r\n","import { Basic } from 'summer';\r\nimport { GrupoPlanoConta } from '../ger/grupoPlanoConta';\r\nimport { LotePadraoLancamento } from './lotePadraoLancamento';\r\n\r\nexport interface LotePadrao extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  lotePadraoLancamento?: LotePadraoLancamento[];\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.lotepadrao';\r\n"],"sourceRoot":""}