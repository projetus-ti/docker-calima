{"version":3,"sources":["models/dtos/mcg/contaResultado.ts","models/enumerated/mcg/contaResultadoMCGEnum.ts","views/pages/mcg/contaResultadoMCG/ContaResultadoMCGTreeView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/CardDeck.js","../node_modules/reactstrap/es/Table.js"],"names":["RECEITA_OPERACIONAL_BRUTA","value","label","DEDUCAO_RECEITA_BRUTA","CUSTO_PROD_VEND_SERV_PRESTADO","CUSTO_DE_MERCADORIA_VENDIDA","DESPESA_OPERACIONAL","DESPESA_FINANCEIRA","RECEITA_FINANCEIRA","OUTRA_RECEITA_OPERACIONAL","RECEITA_NAO_OPERACIONAL","DESPESA_NAO_OPERACIONAL","RECEITA_NAO_TRIBUTAVEL","DESPESA_NAO_TRIBUTAVEL","RESULTADO_DO_IMPOSTO_DE_RENDA","PROVISAO_CSLL","PROVISAO_IRPJ","DISTRIBUICAO_DE_RESERVA","ContaResultadoMCGTreeView","globalReducer","useSelector","state","_useState","useState","_useState2","Object","slicedToArray","listaContaResultado","setListaContaResultado","_useState3","_useState4","listaContaResultadoCompleta","setListaContaResultadoCompleta","_useState5","_useState6","showModalView","setShowModalView","_useState7","_useState8","showModalViewPlanoConta","setShowModalViewPlanoConta","_useForm","useForm","mode","reset","formProps","objectWithoutProperties","formPropsConta","_useState9","_useState10","ehRenderizaTree","setEhRenderizaTree","_useState11","_useState12","tabela","setTabela","_useState13","_useState14","contaResultadoAtual","setContaResultadoAtual","_useState15","_useState16","atualizado","setAtualizado","_useState17","_useState18","idAtual","setIdAtual","_useState19","_useState20","idPlanoConta","setIdPlanoConta","_useState21","_useState22","statusPlanoContaIS","setStatusPlanoContaIS","_useState23","_useState24","statusTela","setStatusTela","_globalReducer$global","globalParameter","grupoPlanoConta","digitoAtivo","digitoPassivo","useEffect","montarTree","searchCriteria","className","expressions","fieldName","id","fetchType","max","sortFieldName","start","findAllByExpression","thenFunction","result","lista","content","listaParaRendereizar","forEach","item","contaResultadoPai","item2","children","push","handleAcoes","status","showModal","contaResultadoFormProps","find","element","novaContaResultado","contas","tipoContaResultado","incluindoContaResultado","alterandoContaResultado","mostrarErro","alertManager","emit","ACTION_EVENTS","SHOW","message","onOkClick","excluirContaResultado","errorFunction","react_default","a","createElement","type","AlertType","WARNING_YES_NO","INFORMATION","map","index","key","planoConta","conta","descricao","Button","size","color","onClick","handleOpenModalPlanoConta","index_es","icon","UncontrolledTooltip","target","removerDaLista","filter","handleCloseModal","setValue","undefined","idConta","handleCloseModalPlanoConta","mensagemErro","ERROR","getExtraExpressions","indice","extraExpressions","valores","contaResultado","it","aux","_step","_iterator","createForOfIteratorHelper","s","n","done","caracteres","err","e","f","getFiltro","alias","conditionalGroup","operation","OperationEnum","START_NOT_LIKE","DIFERENT","summer_esm","title","wikiId","useGlobalParameter","dependencies","hasEmpresa","hasGrupoEmpresaConfig","Row","Col","style","overflowY","height","parentNodesIdList","listenerRenderTree","nodeList","labelFunc","node","labelClickFunc","preventDefault","Modal","isOpen","backdrop","centered","toggle","ModalHeader","CardDeck","Card","CardBody","hidden","isPrependLabel","disabled","placeholder","Table","textAlign","hover","striped","bordered","width","ModalBody","ModalFooter","handleSubmit","getValues","salvarContaResultado","showToast","SUCCESS","handleClose","PlanoContaIS","objectSpread2","validation","required","filtroContaResultado","length","charAt","contaResultadoClassificacao","empresa","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","arquivo","file","nomeArquivo","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","props","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","analitica","sintetica","filtro","searchViewId","InputType","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","Tag","attributes","classes","defaultProps","bool","borderless","dark","responsive","oneOfType","responsiveTag","innerRef","func","ResponsiveTag","table","ref","responsiveClassName"],"mappings":"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","file":"static/js/200.bf8f9856.chunk.js","sourcesContent":["import { Basic } from 'summer';\r\nimport { GrupoPlanoConta } from '../ger/grupoPlanoConta';\r\nimport { ContaResultadoClassificacao } from './contaResultadoClassificacao';\r\n\r\nexport interface ContaResultado extends Basic {\r\n  children?: ContaResultado[];\r\n  contaResultadoPai?: ContaResultado;\r\n  contas?: ContaResultadoClassificacao[];\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  tipoContaResultado?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.contaresultado';\r\n","export const RECEITA_OPERACIONAL_BRUTA = { value: 'RECEITAOPERACIONALBRUTA', label: 'Receita Operacional Bruta' };\r\nexport const DEDUCAO_RECEITA_BRUTA = { value: 'DEDUCAORECEITABRUTA', label: 'Deduções da Receita Bruta' };\r\nexport const CUSTO_PROD_VEND_SERV_PRESTADO = { value: 'CUSTOPRODVENDPRESTADO', label: 'Custo Prod.Vend/Serv.Prestados' };\r\nexport const CUSTO_DE_MERCADORIA_VENDIDA = { value: 'CUSTODEMERCADORIAVENDIDA', label: 'Custo de Mercadorias Vendidas' };\r\nexport const DESPESA_OPERACIONAL = { value: 'DESPESAOPERACIONAL', label: 'Despesas Operacionais' };\r\nexport const DESPESA_FINANCEIRA = { value: 'DESPESAFINANCEIRA', label: 'Despesas Financeiras' };\r\nexport const RECEITA_FINANCEIRA = { value: 'RECEITAFINANCEIRA', label: 'Receitas Financeiras' };\r\nexport const OUTRA_RECEITA_OPERACIONAL = { value: 'OUTRARECEITAOPERACIONAL', label: 'Outras Receitas Operacionais' };\r\nexport const RECEITA_NAO_OPERACIONAL = { value: 'RECEITANAOOPERACIONAL', label: 'Receitas não Operacionais' };\r\nexport const DESPESA_NAO_OPERACIONAL = { value: 'DESPESANAOOPERACIONAL', label: 'Despesas não Operacionais' };\r\nexport const RECEITA_NAO_TRIBUTAVEL = { value: 'RECEITANAOTRIBUTAVEL', label: 'Receitas não Tributáveis' };\r\nexport const DESPESA_NAO_TRIBUTAVEL = { value: 'DESPESANAOTRIBUTAVEL', label: 'Despesas não Tributáveis' };\r\nexport const RESULTADO_DO_IMPOSTO_DE_RENDA = { value: 'RESULTADODOIMPOSTODERENDA', label: 'Resultado do Imposto de Renda' };\r\nexport const PROVISAO_CSLL = { value: 'PROVISAOCSLL', label: 'Provisões para C.S.L.L.' };\r\nexport const PROVISAO_IRPJ = { value: 'PROVISAOIRPJ', label: 'Provisões para I.R.P.J.' };\r\nexport const DISTRIBUICAO_DE_RESERVA = { value: 'DISTRIBUICAODERESERVA', label: 'Distribuição de Reservas' };\r\n\r\nexport const CONTA_RESULTADO_MCG_ENUM_VALUES = [\r\n  RECEITA_OPERACIONAL_BRUTA,\r\n  DEDUCAO_RECEITA_BRUTA,\r\n  CUSTO_PROD_VEND_SERV_PRESTADO,\r\n  CUSTO_DE_MERCADORIA_VENDIDA,\r\n  DESPESA_OPERACIONAL,\r\n  DESPESA_FINANCEIRA,\r\n  RECEITA_FINANCEIRA,\r\n  OUTRA_RECEITA_OPERACIONAL,\r\n  RECEITA_NAO_OPERACIONAL,\r\n  DESPESA_NAO_OPERACIONAL,\r\n  RECEITA_NAO_TRIBUTAVEL,\r\n  DESPESA_NAO_TRIBUTAVEL,\r\n  RESULTADO_DO_IMPOSTO_DE_RENDA,\r\n  PROVISAO_CSLL,\r\n  PROVISAO_IRPJ,\r\n  DISTRIBUICAO_DE_RESERVA,\r\n];\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button, Card, CardBody, CardDeck, Col, Modal, ModalBody, ModalFooter, ModalHeader, Row, Table, UncontrolledTooltip } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertType,\r\n  Box,\r\n  findAllByExpression,\r\n  InputGroupInline,\r\n  OperationEnum,\r\n  ProcessBar,\r\n  SearchCriteria,\r\n  SearchExpression,\r\n  showToast,\r\n  SUCCESS,\r\n  Tree,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { CLASS_NAME, ContaResultado } from '../../../../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoClassificacao } from '../../../../models/dtos/mcg/contaResultadoClassificacao';\r\nimport {\r\n  CUSTO_DE_MERCADORIA_VENDIDA,\r\n  CUSTO_PROD_VEND_SERV_PRESTADO,\r\n  DEDUCAO_RECEITA_BRUTA,\r\n  DESPESA_FINANCEIRA,\r\n  DESPESA_NAO_OPERACIONAL,\r\n  DESPESA_NAO_TRIBUTAVEL,\r\n  DESPESA_OPERACIONAL,\r\n  DISTRIBUICAO_DE_RESERVA,\r\n  OUTRA_RECEITA_OPERACIONAL,\r\n  PROVISAO_CSLL,\r\n  PROVISAO_IRPJ,\r\n  RECEITA_FINANCEIRA,\r\n  RECEITA_NAO_OPERACIONAL,\r\n  RECEITA_NAO_TRIBUTAVEL,\r\n  RECEITA_OPERACIONAL_BRUTA,\r\n  RESULTADO_DO_IMPOSTO_DE_RENDA,\r\n} from '../../../../models/enumerated/mcg/contaResultadoMCGEnum';\r\nimport { excluirContaResultado, salvarContaResultado } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\nexport interface FiltroContaResultado {\r\n  conta?: string;\r\n  caracteres?: string;\r\n}\r\n\r\nconst ContaResultadoMCGTreeView: FC<ContaResultado> = () => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [listaContaResultado, setListaContaResultado] = useState<ContaResultado[]>([]);\r\n  const [listaContaResultadoCompleta, setListaContaResultadoCompleta] = useState<ContaResultado[]>([]);\r\n  const [showModalView, setShowModalView] = useState(false);\r\n  const [showModalViewPlanoConta, setShowModalViewPlanoConta] = useState(false);\r\n  const { reset, ...formProps } = useForm<ContaResultado>({ mode: 'onBlur' });\r\n  const formPropsConta = useForm<ContaResultadoClassificacao>({ mode: 'onBlur' });\r\n  const [ehRenderizaTree, setEhRenderizaTree] = useState();\r\n  const [tabela, setTabela] = useState();\r\n  const [contaResultadoAtual, setContaResultadoAtual] = useState<ContaResultado>();\r\n  const [atualizado, setAtualizado] = useState();\r\n  const [idAtual, setIdAtual] = useState();\r\n  const [idPlanoConta, setIdPlanoConta] = useState();\r\n  const [statusPlanoContaIS, setStatusPlanoContaIS] = useState();\r\n  const [statusTela, setStatusTela] = useState();\r\n  const { digitoAtivo, digitoPassivo } = globalReducer.globalParameter.grupoPlanoConta;\r\n\r\n  useEffect(\r\n    () => {\r\n      montarTree();\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const montarTree = () => {\r\n    const searchCriteria: SearchCriteria = {\r\n      className: CLASS_NAME,\r\n      expressions: [\r\n        {\r\n          fieldName: 'grupoPlanoConta.id',\r\n          value: globalReducer.globalParameter.grupoPlanoConta.id,\r\n        },\r\n      ],\r\n      fetchType: 'PAGED',\r\n      max: 0,\r\n      sortFieldName: 'tipoContaResultado',\r\n      start: 0,\r\n    };\r\n\r\n    findAllByExpression(searchCriteria, {\r\n      thenFunction: result => {\r\n        const lista: ContaResultado[] = result.content;\r\n        const listaParaRendereizar: ContaResultado[] = [];\r\n\r\n        lista.forEach(item => {\r\n          if (item.contaResultadoPai) {\r\n            lista.forEach(item2 => {\r\n              if (item.contaResultadoPai.id === item2.id) {\r\n                item2.children.push(item);\r\n              }\r\n            });\r\n          } else {\r\n            listaParaRendereizar.push(item);\r\n          }\r\n        });\r\n        setListaContaResultado(listaParaRendereizar);\r\n        setListaContaResultadoCompleta(lista);\r\n        setEhRenderizaTree(!ehRenderizaTree);\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLabelClick = () => {\r\n    return (e, id) => {\r\n      e.preventDefault();\r\n      setIdAtual(id);\r\n    };\r\n  };\r\n\r\n  const incluindoContaResultado = contaResultadoFormProps => {\r\n    const novaContaResultado: ContaResultado = {\r\n      contaResultadoPai: contaResultadoFormProps,\r\n      contas: [],\r\n      grupoPlanoConta: { id: globalReducer.globalParameter.grupoPlanoConta.id },\r\n      tipoContaResultado: contaResultadoFormProps.tipoContaResultado,\r\n    };\r\n    reset(novaContaResultado);\r\n    setContaResultadoAtual(novaContaResultado);\r\n  };\r\n\r\n  const alterandoContaResultado = contaResultadoFormProps => {\r\n    reset(contaResultadoFormProps);\r\n    setContaResultadoAtual(contaResultadoFormProps);\r\n  };\r\n\r\n  const excluindoContaResultado = () => {\r\n    if (listaContaResultado.find(element => element.id === idAtual)) {\r\n      mostrarErro('Exclusão não permitida para o registro selecionado');\r\n    } else {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Confirmar exclusão?',\r\n        onOkClick: () => {\r\n          excluirContaResultado(\r\n            listaContaResultadoCompleta.find(element => element.id === idAtual),\r\n            {\r\n              errorFunction: () => {\r\n                mostrarErro(\r\n                  <div>\r\n                    Não foi possível realizar estar operação. Possíveis causas:\r\n                    <br />\r\n                    <br />\r\n                    *O registro ainda é referenciado nas Contas de Resultado\r\n                    <br />\r\n                    *Outro usuário pode ter excluído o registro\r\n                  </div>\r\n                );\r\n              },\r\n              thenFunction: () => {\r\n                montarTree();\r\n              },\r\n            }\r\n          );\r\n        },\r\n        type: AlertType.WARNING_YES_NO,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAcoes = (status: string, showModal: boolean) => {\r\n    return () => {\r\n      if (idAtual) {\r\n        setStatusTela(status);\r\n        const contaResultadoFormProps = listaContaResultadoCompleta.find(element => element.id === idAtual);\r\n        if (status === 'incluindo') {\r\n          incluindoContaResultado(contaResultadoFormProps);\r\n        } else if (status === 'alterando') {\r\n          alterandoContaResultado(contaResultadoFormProps);\r\n        } else if (status === 'excluindo') {\r\n          excluindoContaResultado();\r\n        }\r\n        setShowModalView(showModal);\r\n      } else {\r\n        alertManager.emit(ACTION_EVENTS.SHOW, {\r\n          message: 'Selecione um Registro',\r\n          type: AlertType.INFORMATION,\r\n        });\r\n      }\r\n    };\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setTabela(\r\n        contaResultadoAtual ? (\r\n          contaResultadoAtual.contas.map((item, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <td>{item.planoConta.conta}</td>\r\n                <td>{item.planoConta.descricao}</td>\r\n                <td>\r\n                  <Button id=\"editButton\" size=\"sm\" color=\"link\" className=\"text-warning\" onClick={handleOpenModalPlanoConta(item.planoConta.id)}>\r\n                    <FontAwesomeIcon icon=\"pen\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"editButton\">Clique aqui para alterar</UncontrolledTooltip>\r\n                  <Button id=\"removeButton\" size=\"sm\" color=\"link\" className=\"text-danger\" onClick={removerDaLista(item.planoConta.id)}>\r\n                    <FontAwesomeIcon icon=\"trash\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"removeButton\">Clique aqui para remover</UncontrolledTooltip>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n          </tr>\r\n        )\r\n      );\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [contaResultadoAtual, atualizado]\r\n  );\r\n\r\n  const addNaLista = () => {\r\n    if (formPropsConta.getValues().planoConta) {\r\n      if (\r\n        listaContaResultadoCompleta.filter(contaResultado =>\r\n          contaResultado.contas.find(conta => conta.planoConta.id === formPropsConta.getValues().planoConta.id)\r\n        ).length > 0\r\n      ) {\r\n        mostrarErro('Conta já informada');\r\n      } else if (\r\n        formPropsConta.getValues().planoConta.conta.charAt(0) === digitoAtivo ||\r\n        formPropsConta.getValues().planoConta.conta.charAt(0) === digitoPassivo\r\n      ) {\r\n        mostrarErro('A conta informada não deve pertencer a Ativo ou Passivo');\r\n      } else {\r\n        if (statusPlanoContaIS === 'alterando') {\r\n          contaResultadoAtual.contas = contaResultadoAtual.contas.filter(element => element.planoConta.id !== idPlanoConta);\r\n        }\r\n        const contaResultadoClassificacao: ContaResultadoClassificacao = {\r\n          planoConta: formPropsConta.getValues().planoConta,\r\n        };\r\n        contaResultadoAtual.contas.push(contaResultadoClassificacao);\r\n        setAtualizado(!atualizado);\r\n        setShowModalViewPlanoConta(false);\r\n        formPropsConta.setValue('planoConta', undefined);\r\n      }\r\n    } else {\r\n      mostrarErro('Conta não pode estar em branco');\r\n    }\r\n  };\r\n\r\n  const removerDaLista = id => {\r\n    return () => {\r\n      contaResultadoAtual.contas = contaResultadoAtual.contas.filter(element => element.planoConta.id !== id);\r\n      setAtualizado(!atualizado);\r\n    };\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (formProps.getValues().descricao) {\r\n      contaResultadoAtual.descricao = formProps.getValues().descricao;\r\n      if (\r\n        (statusTela === 'alterando' &&\r\n          listaContaResultadoCompleta.find(\r\n            element => element.descricao === contaResultadoAtual.descricao && element.id !== contaResultadoAtual.id\r\n          )) ||\r\n        (statusTela === 'incluindo' && listaContaResultadoCompleta.find(element => element.descricao === formProps.getValues().descricao))\r\n      ) {\r\n        mostrarErro('Já existe um Grupo com este nome');\r\n      } else {\r\n        salvarContaResultado(contaResultadoAtual, {\r\n          thenFunction: () => {\r\n            showToast('Registro alterado com sucesso!', SUCCESS);\r\n            setShowModalView(false);\r\n            montarTree();\r\n          },\r\n        });\r\n      }\r\n    } else {\r\n      mostrarErro('Campo Descrição é obrigatório');\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: 'As alterações da página atual serão perdidas, deseja continuar?',\r\n      onOkClick: () => {\r\n        setShowModalView(false);\r\n        formPropsConta.setValue('planoConta', undefined);\r\n        montarTree();\r\n      },\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const handleOpenModalPlanoConta = idConta => {\r\n    return () => {\r\n      setIdPlanoConta(idConta);\r\n      if (idConta !== '') {\r\n        setStatusPlanoContaIS('alterando');\r\n        formPropsConta.reset(contaResultadoAtual.contas.find(element => element.planoConta.id === idConta));\r\n      }\r\n      setShowModalViewPlanoConta(true);\r\n    };\r\n  };\r\n\r\n  const handleCloseModalPlanoConta = () => {\r\n    setShowModalViewPlanoConta(false);\r\n    formPropsConta.setValue('planoConta', undefined);\r\n  };\r\n\r\n  const mostrarErro = mensagemErro => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: mensagemErro,\r\n      type: AlertType.ERROR,\r\n    });\r\n  };\r\n\r\n  const restaurarDescOriginal = () => {\r\n    let descricao;\r\n\r\n    switch (contaResultadoAtual.tipoContaResultado) {\r\n      case RECEITA_OPERACIONAL_BRUTA.value:\r\n        descricao = RECEITA_OPERACIONAL_BRUTA.label;\r\n        break;\r\n\r\n      case DEDUCAO_RECEITA_BRUTA.value:\r\n        descricao = DEDUCAO_RECEITA_BRUTA.label;\r\n        break;\r\n\r\n      case CUSTO_PROD_VEND_SERV_PRESTADO.value:\r\n        descricao = CUSTO_PROD_VEND_SERV_PRESTADO.label;\r\n        break;\r\n\r\n      case CUSTO_DE_MERCADORIA_VENDIDA.value:\r\n        descricao = CUSTO_DE_MERCADORIA_VENDIDA.label;\r\n        break;\r\n\r\n      case DESPESA_OPERACIONAL.value:\r\n        descricao = DESPESA_OPERACIONAL.label;\r\n        break;\r\n\r\n      case DESPESA_FINANCEIRA.value:\r\n        descricao = DESPESA_FINANCEIRA.label;\r\n        break;\r\n\r\n      case RECEITA_FINANCEIRA.value:\r\n        descricao = RECEITA_FINANCEIRA.label;\r\n        break;\r\n\r\n      case OUTRA_RECEITA_OPERACIONAL.value:\r\n        descricao = OUTRA_RECEITA_OPERACIONAL.label;\r\n        break;\r\n\r\n      case RECEITA_NAO_OPERACIONAL.value:\r\n        descricao = RECEITA_NAO_OPERACIONAL.label;\r\n        break;\r\n\r\n      case DESPESA_NAO_OPERACIONAL.value:\r\n        descricao = DESPESA_NAO_OPERACIONAL.label;\r\n        break;\r\n\r\n      case RECEITA_NAO_TRIBUTAVEL.value:\r\n        descricao = RECEITA_NAO_TRIBUTAVEL.label;\r\n        break;\r\n\r\n      case DESPESA_NAO_TRIBUTAVEL.value:\r\n        descricao = DESPESA_NAO_TRIBUTAVEL.label;\r\n        break;\r\n\r\n      case RESULTADO_DO_IMPOSTO_DE_RENDA.value:\r\n        descricao = RESULTADO_DO_IMPOSTO_DE_RENDA.label;\r\n        break;\r\n\r\n      case PROVISAO_CSLL.value:\r\n        descricao = PROVISAO_CSLL.label;\r\n        break;\r\n\r\n      case PROVISAO_IRPJ.value:\r\n        descricao = PROVISAO_IRPJ.label;\r\n        break;\r\n\r\n      case DISTRIBUICAO_DE_RESERVA.value:\r\n        descricao = DISTRIBUICAO_DE_RESERVA.label;\r\n        break;\r\n    }\r\n    formProps.setValue('descricao', descricao);\r\n  };\r\n\r\n  const retornoLabelFunc = () => {\r\n    return (node: any) => {\r\n      return <div className={node.contaResultadoPai ? null : 'font-weight-bold'}>{node.descricao}</div>;\r\n    };\r\n  };\r\n\r\n  const getFiltro = () => {\r\n    const valores: FiltroContaResultado[] = [];\r\n\r\n    listaContaResultadoCompleta.forEach(contaResultado => {\r\n      contaResultado.contas.forEach(it => {\r\n        valores.push({ conta: it.planoConta.conta });\r\n        let aux = '';\r\n        for (const caracter of it.planoConta.conta) {\r\n          aux += caracter;\r\n          valores.push({ caracteres: aux });\r\n        }\r\n      });\r\n    });\r\n\r\n    return valores;\r\n  };\r\n\r\n  const getExtraExpressions = (indice: number) => {\r\n    const extraExpressions: SearchExpression[] = [];\r\n\r\n    const valores = getFiltro();\r\n\r\n    if (valores[indice]) {\r\n      extraExpressions.push({\r\n        alias: 'c' + indice,\r\n        conditionalGroup: valores[indice].conta ? 'c' : 'c_',\r\n        fieldName: 'conta',\r\n        operation: valores[indice].conta ? OperationEnum.START_NOT_LIKE : OperationEnum.DIFERENT,\r\n        value: valores[indice].conta || valores[indice].caracteres,\r\n      });\r\n      extraExpressions[0].expressions = getExtraExpressions(indice + 1);\r\n    }\r\n\r\n    return extraExpressions;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Contas de Resultado\"\r\n      wikiId={1215}\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasGrupoEmpresaConfig(globalReducer.globalParameter)]}\r\n    >\r\n      <Row>\r\n        <Col>\r\n          <Button className=\"mb-2 mr-2\" color=\"success\" onClick={handleAcoes('incluindo', true)}>\r\n            Incluir\r\n          </Button>\r\n          <Button className=\"mb-2 mr-2\" color=\"first\" onClick={handleAcoes('alterando', true)}>\r\n            Alterar\r\n          </Button>\r\n          <Button className=\"mb-2 mr-2\" color=\"danger\" onClick={handleAcoes('excluindo', false)}>\r\n            Excluir\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Box style={{ overflowY: 'scroll', height: 450 }}>\r\n        <Tree\r\n          parentNodesIdList={listaContaResultado.map((it, index) => index)}\r\n          listenerRenderTree={ehRenderizaTree}\r\n          nodeList={listaContaResultado}\r\n          labelFunc={retornoLabelFunc()}\r\n          labelClickFunc={handleLabelClick()}\r\n        />\r\n      </Box>\r\n      <Modal isOpen={showModalView} backdrop=\"static\" centered={true} toggle={handleCloseModal} size=\"lg\">\r\n        <ModalHeader toggle={handleCloseModal}>Conta Resultado</ModalHeader>\r\n        <CardDeck>\r\n          <Card>\r\n            <CardBody>\r\n              <InputGroupInline id=\"id\" formProps={formProps} hidden={true} />\r\n              <InputGroupInline id=\"grupoPlanoConta.id\" formProps={formProps} hidden={true} />\r\n              <InputGroupInline id=\"tipoContaResultado\" formProps={formProps} hidden={true} />\r\n              <Row>\r\n                <Col>\r\n                  <InputGroupInline id=\"contaResultadoPai.descricao\" formProps={formProps} isPrependLabel={true} label=\"Grupo\" disabled={true} />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <InputGroupInline formProps={formProps} id=\"descricao\" isPrependLabel={true} label=\"Descrição\" placeholder=\"Informe a Descrição\" />\r\n                </Col>\r\n                {contaResultadoAtual && contaResultadoAtual.contaResultadoPai === null ? (\r\n                  <Col className=\"col-2\">\r\n                    <Button id=\"resetDesc\" size=\"lg\" color=\"link\" className=\"text-success\" onClick={restaurarDescOriginal}>\r\n                      <FontAwesomeIcon icon=\"reply\" />\r\n                    </Button>\r\n                    <UncontrolledTooltip target=\"resetDesc\">Restaurar nome original</UncontrolledTooltip>\r\n                  </Col>\r\n                ) : null}\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Table style={{ textAlign: 'center' }} hover={true} striped={true} bordered={true}>\r\n                    <thead>\r\n                      <tr>\r\n                        <th style={{ width: '30%' }}>Conta</th>\r\n                        <th style={{ width: '40%' }}>Descrição</th>\r\n                        <th style={{ width: '30%' }}>Ações</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>{tabela}</tbody>\r\n                  </Table>\r\n                </Col>\r\n                <Col className=\"col-2\">\r\n                  <Button id=\"addButton\" size=\"lg\" color=\"link\" className=\"text-success\" onClick={handleOpenModalPlanoConta('')}>\r\n                    <FontAwesomeIcon icon=\"plus-circle\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"addButton\">Clique aqui para adicionar</UncontrolledTooltip>\r\n                </Col>\r\n              </Row>\r\n              <ModalBody />\r\n              <ModalFooter>\r\n                <Row>\r\n                  <Col>\r\n                    <ProcessBar handleSubmit={handleSubmit} handleClose={handleCloseModal} />\r\n                  </Col>\r\n                </Row>\r\n              </ModalFooter>\r\n            </CardBody>\r\n          </Card>\r\n        </CardDeck>\r\n        <Modal isOpen={showModalViewPlanoConta} backdrop=\"static\" centered={true} toggle={handleCloseModalPlanoConta} size=\"lg\">\r\n          <ModalHeader toggle={handleCloseModalPlanoConta}>Conta Resultado</ModalHeader>\r\n          <CardDeck>\r\n            <Card>\r\n              <CardBody>\r\n                <InputGroupInline id=\"descricao\" formProps={formProps} isPrependLabel={true} label=\"Grupo\" disabled={true} />\r\n                <Row>\r\n                  <Col>\r\n                    <PlanoContaIS\r\n                      id=\"planoConta\"\r\n                      formProps={{ ...formPropsConta, validation: { required: true } }}\r\n                      label=\"Conta\"\r\n                      placeholder=\"Informe a Conta\"\r\n                      filtroContaResultado={getExtraExpressions(0)}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <ProcessBar handleSubmit={addNaLista} handleClose={handleCloseModalPlanoConta} />\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </CardDeck>\r\n        </Modal>\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ContaResultadoMCGTreeView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardDeck = function CardDeck(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-deck'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardDeck.propTypes = propTypes;\nCardDeck.defaultProps = defaultProps;\nexport default CardDeck;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;"],"sourceRoot":""}