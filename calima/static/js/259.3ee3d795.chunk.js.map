{"version":3,"sources":["models/enumerated/mcg/tipoDebitoCreditoFluxoCaixaEnum.ts","views/pages/mcg/contaFluxoCaixa/ContaFluxoCaixaDiretoTreeView.tsx","dependencies/grupoEmpresaConfigDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/Table.js"],"names":["DEBITO","label","value","CREDITO","TIPO_DEBITO_CREDITO_FLUXO_CAIXA_ENUM_VALUES","ContaFluxoCaixaDiretoTreeView","globalReducer","useSelector","state","_useState","useState","_useState2","Object","slicedToArray","showModalView","setShowModalView","_useState3","_useState4","listaContaFluxoCaixa","setListaContaFluxoCaixa","_useForm","useForm","mode","reset","formProps","objectWithoutProperties","formPropsConta","_useState5","_useState6","contaFluxoAtual","setContaFluxoAtual","_useState7","_useState8","tabela","setTabela","_useState9","_useState10","tabelaAtualizada","setTabelaAtualizada","_useState11","_useState12","renderizarArvore","setRenderizarArvore","_useState13","_useState14","listaDeNosPais","setListaDeNosPais","useEffect","montarTree","obterContasClassificacaoDireto","globalParameter","grupoPlanoConta","id","thenFunction","result","forEach","item","index","tipo","subTipo","push","children","filter","possivelFilho","ehFilho","listClassificacao","instanceOfFluxoCaixa","object","removerDaLista","element","planoConta","map","react_default","a","createElement","key","conta","codigoReduzido","descricao","naturezaConta","analitica","Button","size","color","className","onClick","index_es","icon","UncontrolledTooltip","target","handleCloseModal","alertManager","emit","ACTION_EVENTS","SHOW","message","onOkClick","setValue","undefined","type","AlertType","WARNING_YES_NO","summer_esm","title","useGlobalParameter","dependencies","hasGrupoEmpresaConfig","wikiId","parentNodesIdList","listenerRenderTree","nodeList","labelFunc","node","labelClickFunc","e","preventDefault","contaFluxoCaixa","find","Modal","isOpen","backdrop","centered","toggle","ModalHeader","Form","Card","CardBody","hidden","Row","Col","isPrependLabel","PlanoContaIS","disabled","itemAtual","controladorHabilitarPlanoConta","objectSpread2","validation","required","placeholder","inputDropDownProps","optionsProvider","InputType","DROP_DOWN","controladorHabilitarNaturezaConta","getValues","WARNING","ERROR","contaFluxoCaixaClassificacao","Table","style","textAlign","hover","striped","bordered","width","ModalBody","ModalFooter","handleSubmit","replace","length","salvarClassificacaoDireto","showToast","SUCCESS","handleClose","empresa","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","__webpack_require__","d","__webpack_exports__","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","props","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","expressions","alias","conditionalGroup","fieldName","sintetica","filtro","searchViewId","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","string","cssModule","bool","borderless","dark","responsive","oneOfType","tag","responsiveTag","innerRef","func","Tag","ResponsiveTag","attributes","classes","table","ref","responsiveClassName","defaultProps"],"mappings":"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","file":"static/js/259.3ee3d795.chunk.js","sourcesContent":["export const DEBITO = { label: 'Débito', value: 0 };\r\nexport const CREDITO = { label: 'Crédito', value: 1 };\r\n\r\nexport const TIPO_DEBITO_CREDITO_FLUXO_CAIXA_ENUM_VALUES = [DEBITO, CREDITO];\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button, Card, CardBody, Col, Form, Modal, ModalBody, ModalFooter, ModalHeader, Row, Table, UncontrolledTooltip } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertType,\r\n  Box,\r\n  InputGroupInline,\r\n  InputType,\r\n  ProcessBar,\r\n  showToast,\r\n  SUCCESS,\r\n  Tree,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { ContaFluxoCaixa } from '../../../../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaClassificacao } from '../../../../models/dtos/mcg/contaFluxoCaixaClassificacao';\r\nimport { CREDITO, DEBITO, TIPO_DEBITO_CREDITO_FLUXO_CAIXA_ENUM_VALUES } from '../../../../models/enumerated/mcg/tipoDebitoCreditoFluxoCaixaEnum';\r\nimport { obterContasClassificacaoDireto, salvarClassificacaoDireto } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\nconst ContaFluxoCaixaDiretoTreeView: FC<ContaFluxoCaixa> = () => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [showModalView, setShowModalView] = useState(false);\r\n  const [listaContaFluxoCaixa, setListaContaFluxoCaixa] = useState<ContaFluxoCaixa[]>([]);\r\n  const { reset, ...formProps } = useForm<ContaFluxoCaixa>({ mode: 'onBlur' });\r\n  const formPropsConta = useForm<ContaFluxoCaixaClassificacao>({ mode: 'onBlur' });\r\n  const [contaFluxoAtual, setContaFluxoAtual] = useState<ContaFluxoCaixa>();\r\n  const [tabela, setTabela] = useState();\r\n  const [tabelaAtualizada, setTabelaAtualizada] = useState();\r\n  const [renderizarArvore, setRenderizarArvore] = useState();\r\n  const [listaDeNosPais, setListaDeNosPais] = useState([]);\r\n\r\n  useEffect(\r\n    () => {\r\n      montarTree();\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const montarTree = () => {\r\n    obterContasClassificacaoDireto(globalReducer.globalParameter.grupoPlanoConta.id, {\r\n      thenFunction: (result: ContaFluxoCaixa[]) => {\r\n        result.forEach((item, index) => {\r\n          if (item.tipo === 1 && item.subTipo === null) {\r\n            listaDeNosPais.push(index);\r\n            item.children = result.filter(possivelFilho => ehFilho(possivelFilho, 1));\r\n          } else if (item.tipo === 2) {\r\n            listaDeNosPais.push(index);\r\n            item.children = item.listClassificacao;\r\n          } else if (item.tipo === 3) {\r\n            listaDeNosPais.push(index);\r\n            item.children = item.listClassificacao;\r\n          } else {\r\n            item.children = item.listClassificacao;\r\n          }\r\n        });\r\n        setListaContaFluxoCaixa(result);\r\n        setRenderizarArvore(!renderizarArvore);\r\n        setListaDeNosPais(listaDeNosPais);\r\n      },\r\n    });\r\n  };\r\n\r\n  const ehFilho = (possivelFilho: ContaFluxoCaixa, tipo: number) => {\r\n    return possivelFilho.tipo === tipo && possivelFilho.subTipo !== null;\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    return (e, id) => {\r\n      e.preventDefault();\r\n      const contaFluxoCaixa = listaContaFluxoCaixa.find(element => element.id === id);\r\n      if (contaFluxoCaixa && instanceOfFluxoCaixa(contaFluxoCaixa)) {\r\n        reset(contaFluxoCaixa);\r\n        setContaFluxoAtual(contaFluxoCaixa);\r\n        setShowModalView(true);\r\n        if (contaFluxoCaixa.subTipo === 1) {\r\n          formPropsConta.reset({ naturezaConta: CREDITO.value });\r\n        } else if (contaFluxoCaixa.subTipo === 2) {\r\n          formPropsConta.reset({ naturezaConta: DEBITO.value });\r\n        } else {\r\n          formPropsConta.reset({ naturezaConta: undefined });\r\n        }\r\n      }\r\n    };\r\n  };\r\n\r\n  const instanceOfFluxoCaixa = (object: any): object is ContaFluxoCaixa => {\r\n    return 'listClassificacao' in object;\r\n  };\r\n\r\n  const removerDaLista = (id: number) => {\r\n    return () => {\r\n      contaFluxoAtual.listClassificacao = contaFluxoAtual.listClassificacao.filter(element => element.planoConta.id !== id);\r\n      setTabelaAtualizada(!tabelaAtualizada);\r\n    };\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setTabela(\r\n        contaFluxoAtual ? (\r\n          contaFluxoAtual.listClassificacao.map((item, index) => {\r\n            return (\r\n              <tr key={index}>\r\n                <td>{item.planoConta.conta}</td>\r\n                <td>{item.planoConta.codigoReduzido}</td>\r\n                <td>{item.planoConta.descricao}</td>\r\n                <td>{item.naturezaConta}</td>\r\n                <td>{item.planoConta.analitica ? 'Sim' : 'Não'}</td>\r\n                <td>\r\n                  <Button id=\"removeButton\" size=\"sm\" color=\"link\" className=\"text-danger\" onClick={removerDaLista(item.planoConta.id)}>\r\n                    <FontAwesomeIcon icon=\"trash\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"removeButton\">Clique aqui para remover</UncontrolledTooltip>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })\r\n        ) : (\r\n          <tr>\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td />\r\n            <td />\r\n          </tr>\r\n        )\r\n      );\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [contaFluxoAtual, tabelaAtualizada]\r\n  );\r\n\r\n  const addNaLista = () => {\r\n    if (!formPropsConta.getValues().planoConta) {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Selecione uma conta',\r\n        type: AlertType.WARNING,\r\n      });\r\n    } else if (formPropsConta.getValues().naturezaConta === undefined) {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Selecione uma natureza',\r\n        type: AlertType.WARNING,\r\n      });\r\n    } else if (contaFluxoAtual.listClassificacao.find(element => element.planoConta.id === formPropsConta.getValues().planoConta.id)) {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message:\r\n          'Conta ' +\r\n          formPropsConta.getValues().planoConta.conta +\r\n          ' - ' +\r\n          formPropsConta.getValues().planoConta.descricao +\r\n          ' já foi adicionada na lista.',\r\n        type: AlertType.ERROR,\r\n      });\r\n    } else {\r\n      const contaFluxoCaixaClassificacao: ContaFluxoCaixaClassificacao = {\r\n        naturezaConta: formPropsConta.getValues().naturezaConta,\r\n        planoConta: formPropsConta.getValues().planoConta,\r\n      };\r\n      contaFluxoAtual.listClassificacao.push(contaFluxoCaixaClassificacao);\r\n      formPropsConta.setValue('planoConta', undefined);\r\n      setTabelaAtualizada(!tabelaAtualizada);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // regex verifica se o campo descricao está vazio ou se contém somente espaços em branco\r\n    if (formProps.getValues().descricao.replace(/\\s/g, '').length) {\r\n      contaFluxoAtual.descricao = formProps.getValues().descricao;\r\n      salvarClassificacaoDireto(contaFluxoAtual, {\r\n        thenFunction: () => {\r\n          showToast('Registro alterado com sucesso!', SUCCESS);\r\n          setShowModalView(false);\r\n          formPropsConta.setValue('planoConta', undefined);\r\n          formPropsConta.setValue('naturezaConta', undefined);\r\n          montarTree();\r\n        },\r\n      });\r\n    } else {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Campo descrição não pode estar em branco',\r\n        type: AlertType.ERROR,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: 'As alterações da página atual serão perdidas, deseja continuar?',\r\n      onOkClick: () => {\r\n        setShowModalView(false);\r\n        formPropsConta.setValue('planoConta', undefined);\r\n        formPropsConta.setValue('naturezaConta', undefined);\r\n        montarTree();\r\n      },\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const controladorHabilitarPlanoConta = (itemAtual: ContaFluxoCaixa) => {\r\n    let result: boolean;\r\n\r\n    if (itemAtual.tipo === 1 && itemAtual.subTipo === null) {\r\n      result = true;\r\n    } else {\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const controladorHabilitarNaturezaConta = (itemAtual: ContaFluxoCaixa) => {\r\n    let result: boolean;\r\n\r\n    result = !(itemAtual.tipo === 2 || itemAtual.tipo === 3);\r\n\r\n    return result;\r\n  };\r\n\r\n  const retornoLabelFunc = () => {\r\n    return (node: any) => {\r\n      return (\r\n        <div className={node.planoConta ? null : 'font-weight-bold'}>\r\n          {node.planoConta ? node.planoConta.conta + ' -> ' + node.planoConta.descricao : node.descricao}\r\n        </div>\r\n      );\r\n    };\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Classificação das Contas de Fluxo de Caixa - Direto\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[() => hasGrupoEmpresaConfig(globalReducer.globalParameter)]}\r\n      wikiId={787}\r\n    >\r\n      <Box>\r\n        <Tree\r\n          parentNodesIdList={listaDeNosPais}\r\n          listenerRenderTree={renderizarArvore}\r\n          nodeList={listaContaFluxoCaixa}\r\n          labelFunc={retornoLabelFunc()}\r\n          labelClickFunc={handleOpenModal()}\r\n        />\r\n      </Box>\r\n      <Modal isOpen={showModalView} backdrop=\"static\" centered={true} toggle={handleCloseModal} size=\"lg\">\r\n        <ModalHeader toggle={handleCloseModal}>Fluxo de Caixa Direto - Classificação Contas</ModalHeader>\r\n        <Form>\r\n          <Card>\r\n            <CardBody>\r\n              <InputGroupInline id=\"id\" formProps={formProps} hidden={true} />\r\n              <Row>\r\n                <Col>\r\n                  <InputGroupInline formProps={formProps} id=\"descricao\" isPrependLabel={true} label=\"Descrição\" />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    disabled={contaFluxoAtual ? controladorHabilitarPlanoConta(contaFluxoAtual) : true}\r\n                    id=\"planoConta\"\r\n                    formProps={{ ...formPropsConta, validation: { required: true } }}\r\n                    label=\"Conta\"\r\n                    placeholder=\"Informe a Conta\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <InputGroupInline\r\n                    id=\"naturezaConta\"\r\n                    label=\"Tipo de Natureza\"\r\n                    isPrependLabel={true}\r\n                    placeholder=\"Selecione a natureza\"\r\n                    formProps={{ ...formPropsConta, validation: { required: true } }}\r\n                    inputDropDownProps={{\r\n                      optionsProvider: TIPO_DEBITO_CREDITO_FLUXO_CAIXA_ENUM_VALUES,\r\n                    }}\r\n                    type={InputType.DROP_DOWN}\r\n                    disabled={contaFluxoAtual ? controladorHabilitarNaturezaConta(contaFluxoAtual) : true}\r\n                  />\r\n                </Col>\r\n                <Col className=\"col-2\">\r\n                  <Button id=\"addButton\" size=\"lg\" color=\"link\" className=\"text-success\" onClick={addNaLista}>\r\n                    <FontAwesomeIcon icon=\"plus-circle\" />\r\n                  </Button>\r\n                  <UncontrolledTooltip target=\"addButton\">Clique aqui para adicionar</UncontrolledTooltip>\r\n                </Col>\r\n              </Row>\r\n              <Table style={{ textAlign: 'center' }} hover={true} striped={true} bordered={true}>\r\n                <thead>\r\n                  <tr>\r\n                    <th style={{ width: '25%' }}>Conta</th>\r\n                    <th style={{ width: '15%' }}>C.R.</th>\r\n                    <th style={{ width: '30%' }}>Descrição</th>\r\n                    <th style={{ width: '10%' }}>Natureza</th>\r\n                    <th style={{ width: '10%' }}>Analítica</th>\r\n                    <th style={{ width: '10%' }}>Ações</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>{tabela}</tbody>\r\n              </Table>\r\n            </CardBody>\r\n          </Card>\r\n        </Form>\r\n        <ModalBody />\r\n        <ModalFooter>\r\n          <Row>\r\n            <Col>\r\n              <ProcessBar handleSubmit={handleSubmit} handleClose={handleCloseModal} />\r\n            </Col>\r\n          </Row>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ContaFluxoCaixaDiretoTreeView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;"],"sourceRoot":""}