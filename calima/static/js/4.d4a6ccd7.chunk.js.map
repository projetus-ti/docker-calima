{"version":3,"sources":["views/pages/mcg/conciliacaoBancaria/ConciliacaoBancariaView.tsx","views/pages/mcg/bancoExtratoPlanoConta/BancoExtratoPlanoContaEditView.tsx","views/pages/mcg/importacaoExtratoBancario/ImportacaoExtratoBancarioView.tsx","models/dtos/mcg/contaHistorico.ts","models/dtos/mcg/bancoMCG.ts","views/pages/mcg/historicoExtratoPlanoConta/HistoricoExtratoPlanoContaEditView.tsx"],"names":["ConciliacaoBancariaView","props","globalReducer","useSelector","state","formProps","useForm","mode","dispatch","useDispatch","_useState","useState","_useState2","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","lNaoConciliadosExtrato","setLNaoConciliadosExtrato","_useState3","_useState4","lNaoConciliadosContabeis","setLNaoConciliadosContabeis","_useState5","_useState6","lConciliadosExtrato","setLConciliadosExtrato","_useState7","_useState8","lConciliadosContabeis","setLConciliadosContabeis","_useState9","_useState10","mapExtratoContabil","setMapExtratoContabil","_useState11","_useState12","mapContabilExtrato","setMapContabilExtrato","_useState13","_useState14","selectedItemsExtratoNConciliado","setSelecItemsExtratoNConciliado","_useState15","_useState16","selectedItemsLancNConciliado","setSelectedItemsLancNConciliado","_useState17","_useState18","bancoMCG","setBancoMCG","_useState19","_useState20","isDisabledBanco","setIsDisabledBanco","_useState21","_useState22","valorExtratoNConciliado","setValorExtratoNConciliado","_useState23","_useState24","valorLancamentoNConciliado","setValorLancamentoNConciliado","_useState25","_useState26","valorExtratoConciliado","setValorExtratoConciliado","_useState27","_useState28","valorLancamentoConciliado","setValorLancamentoConciliado","_useState29","_useState30","selectedItemsExtratoConciliado","setSelecItemsExtratoConciliado","_useState31","_useState32","selectedItemsLancConciliado","setSelectedItemsLancConciliado","_useState33","_useState34","selectedLacamento","setSelectedLacamento","_useState35","_useState36","selectedExtrato","setSelectedExtrato","idEmpresaAtual","globalParameter","empresa","id","promisedAlertWithCatch","message","type","AlertType","WARNING_YES_NO","Promise","resolve","reject","alertManager","emit","ACTION_EVENTS","SHOW","onCancelClick","onNoClick","onOkClick","alertInformation","INFORMATION","showLoading","progressActions","showProgress","animated","className","color","label","striped","value","columnsExtrato","dataField","sort","text","formatter","decimalFormatter","columnsContabeis","buscarBanco","idEmpresaSelecionada","idGrupoPlanoConta","obterBancoListPlanoConta","errorFunction","mensagem","showToast","ERROR","thenFunction","result","length","obterDadosConciliacaoBancariaPe","getValues","planoConta","idEmpresa","dtInicial","periodoDe","dtFinal","periodoAte","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","infoConciliacaoBancariaDTO","isEmpty","hideProgress","lancamentosNaoConciliadosExtrato","lancamentosNaoConciliadosContabeis","lancamentosConciliadosExtrato","lancamentosConciliadosContabeis","selectRowLancamentoConciliado","clickToSelect","SelectModeEnum","CHECKBOX","onSelect","row","isSelect","resultadoSelectedLancamentos","filter","it","parseFloat","valor","selectLancamento","selectExtrato","valExtratoSelected","valorExtrato","contabilExtrato","Map","entries","forEach","lancamento","get","String","push","bancoExtrato","itt","valores","selected","selectRowLExtratoConciliado","resultadoSelectedExtrato","valLancamentoSelected","valorLancamento","extratoContabil","lancamentoContabil","selectRowLExtratoNConciliado","selectRowLancamentoNaoConciliado","useEffect","setTimeout","setDock","openInmportacaExtratoBancario","openMultiPage","ImportacaoExtratoBancarioView","openPlanoContaHistorico","HistoricoExtratoPlanoContaEditView","openPlanoContaBanco","BancoExtratoPlanoContaEditView","componente","onDockSubmit","Page","pageProps","history","location","match","openViaDock","multiPageActions","showPage","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","dockActions","createDock","summer__WEBPACK_IMPORTED_MODULE_12__","icon","onClick","isFromVerifyError","dataFinal","moment","toDate","dtLancamento","endOf","setValue","title","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoPlanoContas","wikiId","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_18__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","onChange","analitica","placeholder","inputDropDownProps","optionsProvider","isPrependLabel","InputType","DROP_DOWN","disabled","DATE","onBlur","md","reactstrap__WEBPACK_IMPORTED_MODULE_11__","erros","validateExtras","params","WARNING","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_5___default","bordered","columns","condensed","data","hover","keyField","noDataIndication","responsive","tabIndexCell","selectRow","bodyClasses","listaRemoverNConciliacao","then","removerLancamentosExtratoBancario","listConciliacaoBancaria","conciliacaoBancaria","conciliarLancamentosExtrato","listaRemover","bancoExtratoId","removerConciliarLancamentosExtrato","_useForm","reset","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2___default","summer__WEBPACK_IMPORTED_MODULE_7__","editViewProps","dtoClassName","CLASS_NAME","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_11__","maxLength","setbancoExtrato","selectedItems","setSelectedItems","abrirVincularHistorico","setAbrirVincularHistorico","isHiddenUtilizarContaHistorico","setIsHiddenUtilizarContaHistorico","isGerarLancamento","setIsGerarLancamento","defaultSorted","order","OrderType","ASC","bancoExtratoColumns","editable","cell","react__WEBPACK_IMPORTED_MODULE_3___default","reactstrap__WEBPACK_IMPORTED_MODULE_7__","doc","openVincularHistorico","target","placement","headerAlign","style","backgroundColor","textAlign","RADIO","historico","contaSelecionadaObterPlanoConta","bancoPlanoConta","obterBancoPlanoConta","obterDadosArquivoExtrato","arquivoSelecionado","bancoExtratoResult","importarArquivo","propToolTip","messagem","executeSearch","selectedItem","summer__WEBPACK_IMPORTED_MODULE_14__","useGlobalParameter","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_17__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","tag","Row","reactstrap__WEBPACK_IMPORTED_MODULE_13__","innerRef","register","name","checked","withTooltip","acceptedTypes","isMultiple","limitSizeBytes","SIZE_ONE_HUNDRED_BYTES","propImageName","maxFiles","handleSubmit","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_4___default","__webpack_require__","d","__webpack_exports__","historicoExtrato","tooltipProps"],"mappings":"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","file":"static/js/4.d4a6ccd7.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport moment from 'moment';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Col, Form, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  Box,\r\n  ColumnsProps,\r\n  decimalFormatter,\r\n  dockActions,\r\n  DockItem,\r\n  DockItemList,\r\n  ErroList,\r\n  ERROR,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  progressActions,\r\n  SelectModeEnum,\r\n  showToast,\r\n  Tab,\r\n  TabGroup,\r\n  toDate,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoPlanoContas } from '../../../../dependencies/grupoPlanoContasDependency';\r\nimport { PlanoConta } from '../../../../models/dtos/ger/planoConta';\r\nimport { BancoExtrato } from '../../../../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../../../../models/dtos/mcg/bancoMCG';\r\nimport { ConciliacaoBancaria } from '../../../../models/dtos/mcg/conciliacaoBancaria';\r\nimport { InfoConciliacaoBancaria } from '../../../../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { Lancamento } from '../../../../models/dtos/mcg/lancamento';\r\nimport {\r\n  conciliarLancamentosExtrato,\r\n  obterBancoListPlanoConta,\r\n  obterDadosConciliacaoBancariaPeriodo,\r\n  removerConciliarLancamentosExtrato,\r\n  removerLancamentosExtratoBancario,\r\n} from '../../../../services/mcg.service';\r\nimport { multiPageActions, Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport BancoExtratoPlanoContaEditView from '../bancoExtratoPlanoConta/BancoExtratoPlanoContaEditView';\r\nimport HistoricoExtratoPlanoContaEditView from '../historicoExtratoPlanoConta/HistoricoExtratoPlanoContaEditView';\r\nimport ImportacaoExtratoBancarioView from '../importacaoExtratoBancario/ImportacaoExtratoBancarioView';\r\n\r\ninterface OpenFromVerifyError {\r\n  dtLancamento: string;\r\n  idMcgLancamentoLote: number;\r\n  isFromVerifyError: true;\r\n  planoConta: PlanoConta;\r\n}\r\n\r\nconst ConciliacaoBancariaView: FC<RouteComponentProps & OpenFromVerifyError> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm({ mode: 'onBlur' });\r\n  const dispatch = useDispatch();\r\n\r\n  const [lNaoConciliadosExtrato, setLNaoConciliadosExtrato] = useState([]);\r\n  const [lNaoConciliadosContabeis, setLNaoConciliadosContabeis] = useState([]);\r\n  const [lConciliadosExtrato, setLConciliadosExtrato] = useState([]);\r\n  const [lConciliadosContabeis, setLConciliadosContabeis] = useState([]);\r\n  const [mapExtratoContabil, setMapExtratoContabil] = useState();\r\n  const [mapContabilExtrato, setMapContabilExtrato] = useState();\r\n  const [selectedItemsExtratoNConciliado, setSelecItemsExtratoNConciliado] = useState([]);\r\n  const [selectedItemsLancNConciliado, setSelectedItemsLancNConciliado] = useState([]);\r\n  const [bancoMCG, setBancoMCG] = useState([]);\r\n  const [isDisabledBanco, setIsDisabledBanco] = useState(true);\r\n  const [valorExtratoNConciliado, setValorExtratoNConciliado] = useState(0);\r\n  const [valorLancamentoNConciliado, setValorLancamentoNConciliado] = useState(0);\r\n  const [valorExtratoConciliado, setValorExtratoConciliado] = useState(0);\r\n  const [valorLancamentoConciliado, setValorLancamentoConciliado] = useState(0);\r\n  const [selectedItemsExtratoConciliado, setSelecItemsExtratoConciliado] = useState([]);\r\n  const [selectedItemsLancConciliado, setSelectedItemsLancConciliado] = useState([]);\r\n  const [selectedLacamento, setSelectedLacamento] = useState([]);\r\n  const [selectedExtrato, setSelectedExtrato] = useState([]);\r\n\r\n  const idEmpresaAtual = globalReducer.globalParameter.empresa.id;\r\n\r\n  const promisedAlertWithCatch = (message, type = AlertType.WARNING_YES_NO) =>\r\n    new Promise((resolve, reject) => {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message,\r\n        onCancelClick: () => reject(),\r\n        onNoClick: () => reject(),\r\n        onOkClick: () => resolve(),\r\n        type,\r\n      });\r\n    });\r\n\r\n  const alertInformation = (message, type = AlertType.INFORMATION) => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message,\r\n      type,\r\n    });\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      label: 'Aguarde processando...',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const columnsExtrato: ColumnsProps[] = [\r\n    {\r\n      dataField: 'dataMov',\r\n      sort: true,\r\n      text: 'Data',\r\n    },\r\n    {\r\n      dataField: 'historico',\r\n      sort: true,\r\n      text: 'Histórico ',\r\n    },\r\n    {\r\n      dataField: 'doc',\r\n      sort: true,\r\n      text: 'Nº Extrato',\r\n    },\r\n    {\r\n      dataField: 'valor',\r\n      formatter: decimalFormatter,\r\n      text: 'Valor',\r\n    },\r\n  ];\r\n\r\n  const columnsContabeis: ColumnsProps[] = [\r\n    {\r\n      dataField: 'data',\r\n      sort: true,\r\n      text: 'Data',\r\n    },\r\n    {\r\n      dataField: 'planoContaDebito.descricao',\r\n      sort: true,\r\n\r\n      text: 'Débito',\r\n    },\r\n    {\r\n      dataField: 'planoContaCredito.descricao',\r\n      sort: true,\r\n      text: 'Crédito',\r\n    },\r\n    {\r\n      dataField: 'valor',\r\n      formatter: decimalFormatter,\r\n      sort: true,\r\n      text: 'Valor do Lançamento',\r\n    },\r\n    {\r\n      dataField: 'historicos[0].historicoVariavel',\r\n      sort: true,\r\n      text: 'Histórico Variável',\r\n    },\r\n  ];\r\n\r\n  const contaSelecionadaObterPlanoConta = () => {\r\n    setIsDisabledBanco(true);\r\n    formProps.setValue('bancoMCG', '', true);\r\n\r\n    if (!isEmpty(formProps.getValues().planoConta)) {\r\n      if (formProps.getValues().planoConta.analitica) {\r\n        buscarBanco(idEmpresaAtual, formProps.getValues().planoConta.id);\r\n      } else {\r\n        alertInformation('A conta selecionada deve ser analítica');\r\n      }\r\n    }\r\n  };\r\n\r\n  const buscarBanco = (idEmpresaSelecionada, idGrupoPlanoConta) => {\r\n    obterBancoListPlanoConta(\r\n      { idEmpresaSelecionada, idGrupoPlanoConta },\r\n      {\r\n        errorFunction: (mensagem: string): void => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: (result: BancoMCG[]): void => {\r\n          if (result.length === 0) {\r\n            alertInformation(\r\n              'O Plano de Contas selecionado não possui uma Conta Bancária relacionada. Configure esses dados utilizando o Botão Plano de Contas - Banco'\r\n            );\r\n          } else {\r\n            setIsDisabledBanco(false);\r\n            setBancoMCG(result);\r\n          }\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const validaObterDadosConciliacaoBancaria = () => {\r\n    const erros = validateExtras();\r\n    if (erros.length > 0) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      dispatch(showLoading());\r\n      obterDadosConciliacaoBancariaPe();\r\n    }\r\n  };\r\n\r\n  const obterDadosConciliacaoBancariaPe = () => {\r\n    const idGrupoPlanoConta = formProps.getValues().planoConta.id;\r\n    const idEmpresa = globalReducer.globalParameter.empresa.id;\r\n    const dtInicial = formProps.getValues().periodoDe;\r\n    const dtFinal = formProps.getValues().periodoAte;\r\n    const idBancoMCG = formProps.getValues().bancoMCG;\r\n\r\n    obterDadosConciliacaoBancariaPeriodo(idGrupoPlanoConta, idEmpresa, idBancoMCG, dtInicial, dtFinal, {\r\n      errorFunction: (mensagem: string): void => {\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: (infoConciliacaoBancariaDTO: InfoConciliacaoBancaria): void => {\r\n        if (isEmpty(infoConciliacaoBancariaDTO)) {\r\n          setLNaoConciliadosExtrato([]);\r\n          setLNaoConciliadosContabeis([]);\r\n          setLConciliadosExtrato([]);\r\n          setLConciliadosContabeis([]);\r\n          alertInformation('Não existem informações a serem exibidas');\r\n        } else {\r\n          dispatch(progressActions.hideProgress());\r\n          setLNaoConciliadosExtrato(infoConciliacaoBancariaDTO.lancamentosNaoConciliadosExtrato);\r\n          setLNaoConciliadosContabeis(infoConciliacaoBancariaDTO.lancamentosNaoConciliadosContabeis);\r\n          setLConciliadosExtrato(infoConciliacaoBancariaDTO.lancamentosConciliadosExtrato);\r\n          setLConciliadosContabeis(infoConciliacaoBancariaDTO.lancamentosConciliadosContabeis);\r\n          setMapExtratoContabil(infoConciliacaoBancariaDTO.mapExtratoContabil);\r\n          setMapContabilExtrato(infoConciliacaoBancariaDTO.mapContabilExtrato);\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  const conciliarLancExtrato = () => {\r\n    if (lNaoConciliadosContabeis.length === 0 && lNaoConciliadosExtrato) {\r\n      alertInformation('Realizar uma consulta para fazer uma Conciliação.');\r\n    } else if (selectedItemsExtratoNConciliado.length === 0 || selectedItemsLancNConciliado.length === 0) {\r\n      alertInformation('Selecionar um dos lançamentos Bancários e Contábil para conciliar.');\r\n    } else {\r\n      if (valorExtratoNConciliado !== valorLancamentoNConciliado) {\r\n        promisedAlertWithCatch('A soma dos valores a serem conciliados são diferentes, deseja conciliar?').then(() => {\r\n          dispatch(showLoading());\r\n          const listConciliacaoBancaria = [];\r\n          selectedItemsExtratoNConciliado.forEach((bancoExtrato: BancoExtrato) => {\r\n            selectedItemsLancNConciliado.forEach((lancamento: Lancamento) => {\r\n              const conciliacaoBancaria: ConciliacaoBancaria = {\r\n                bancoExtrato,\r\n                lancamentoContabil: lancamento,\r\n              };\r\n              listConciliacaoBancaria.push(conciliacaoBancaria);\r\n            });\r\n          });\r\n          conciliarLancamentosExtrato(listConciliacaoBancaria, {\r\n            errorFunction: (mensagem: string): void => {\r\n              showToast(mensagem, ERROR);\r\n            },\r\n            thenFunction: (result: string): void => {\r\n              if (result === 'success') {\r\n                dispatch(progressActions.hideProgress());\r\n                alertInformation('Os lançamentos selecionados foram conciliados.');\r\n                obterDadosConciliacaoBancariaPe();\r\n              }\r\n            },\r\n          });\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const removerConciliarLancExtrato = () => {\r\n    const listaRemover = [];\r\n    if (lConciliadosExtrato.length === 0 && lConciliadosContabeis.length === 0) {\r\n      alertInformation('Realizar uma consulta para para remover uma Conciliação.');\r\n    } else if (selectedExtrato.length === 0 && selectedLacamento.length === 0) {\r\n      alertInformation('Selecionar um dos lançamentos Bancários para remover a conciliação.');\r\n    } else {\r\n      promisedAlertWithCatch('Tem certeza que deseja excluir todas as conciliações selecionadas?').then(() => {\r\n        dispatch(showLoading());\r\n        const extratoContabil = new Map(Object.entries(mapExtratoContabil));\r\n        selectedExtrato.forEach(bancoExtratoId => {\r\n          const conciliacoesBancaria: ConciliacaoBancaria[] = extratoContabil.get(String(bancoExtratoId));\r\n          conciliacoesBancaria.forEach((conciliacaoBancaria: ConciliacaoBancaria) => {\r\n            listaRemover.push(conciliacaoBancaria);\r\n          });\r\n        });\r\n        removerConciliarLancamentosExtrato(listaRemover, {\r\n          errorFunction: (mensagem: string): void => {\r\n            showToast(mensagem, ERROR);\r\n          },\r\n          thenFunction: (result: string): void => {\r\n            if (result === 'success') {\r\n              dispatch(progressActions.hideProgress());\r\n              alertInformation('A conciliação selecionada foi removida.');\r\n              obterDadosConciliacaoBancariaPe();\r\n            }\r\n          },\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const removerLExtratoBancario = () => {\r\n    const listaRemoverNConciliacao = [];\r\n    if (lNaoConciliadosContabeis.length === 0 && lNaoConciliadosExtrato) {\r\n      alertInformation('Realizar uma consulta para remover Lançamento Extrato Bancário.');\r\n    } else if (selectedItemsExtratoNConciliado.length === 0) {\r\n      alertInformation('Selecionar um dos Lançamentos do Extrato Bancário para remover.');\r\n    } else {\r\n      promisedAlertWithCatch('Tem certeza que deseja excluir todos os lançamentos selecionados?').then(() => {\r\n        dispatch(showLoading());\r\n        selectedItemsExtratoNConciliado.forEach((bancoExtrato: BancoExtrato) => {\r\n          listaRemoverNConciliacao.push(bancoExtrato);\r\n        });\r\n        removerLancamentosExtratoBancario(listaRemoverNConciliacao, {\r\n          errorFunction: (mensagem: string): void => {\r\n            showToast(mensagem, ERROR);\r\n          },\r\n          thenFunction: (result: string): void => {\r\n            if (result === 'success') {\r\n              dispatch(progressActions.hideProgress());\r\n              alertInformation('Os Lançamentos de Extrato Bancário selecionados foram removidos.');\r\n              obterDadosConciliacaoBancariaPe();\r\n            }\r\n          },\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSelectExtrato = (row, isSelect) => {\r\n    const resultadoSelectedExtrato = isSelect\r\n      ? [...selectedItemsExtratoConciliado, row]\r\n      : selectedItemsExtratoConciliado.filter(it => it.id !== row.id);\r\n    const selectLancamento = [];\r\n    const selectExtrato = [];\r\n    const valLancamentoSelected = [];\r\n    let valorLancamento = 0;\r\n    const extratoContabil = new Map(Object.entries(mapExtratoContabil));\r\n\r\n    setValorExtratoConciliado(isSelect ? valorExtratoConciliado + parseFloat(row.valor) : valorExtratoConciliado - parseFloat(row.valor));\r\n\r\n    if (resultadoSelectedExtrato.length === 0) {\r\n      setSelectedLacamento([]);\r\n    } else {\r\n      resultadoSelectedExtrato.forEach((bancoExtrato: BancoExtrato) => {\r\n        const conciliacaoBancaria: ConciliacaoBancaria[] = extratoContabil.get(String(bancoExtrato.id));\r\n        conciliacaoBancaria.forEach(it => {\r\n          if (isSelect) {\r\n            selectLancamento.push(it.lancamentoContabil.id);\r\n            selectExtrato.push(bancoExtrato.id);\r\n            valLancamentoSelected.push(it.lancamentoContabil.valor);\r\n          } else {\r\n            setSelectedLacamento(\r\n              selectLancamento.filter(itt => {\r\n                return itt === it.lancamentoContabil.id;\r\n              })\r\n            );\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    if (valLancamentoSelected.length === 0) {\r\n      setValorLancamentoConciliado(0);\r\n    } else {\r\n      valLancamentoSelected.forEach(valores => {\r\n        valorLancamento += valores;\r\n      });\r\n    }\r\n\r\n    if (resultadoSelectedExtrato.length === 0) {\r\n      setValorExtratoConciliado(0);\r\n    }\r\n\r\n    setSelectedLacamento(selectLancamento);\r\n    setSelecItemsExtratoConciliado(resultadoSelectedExtrato);\r\n    setSelectedExtrato(selectExtrato);\r\n    setValorLancamentoConciliado(valorLancamento);\r\n  };\r\n\r\n  const handleSelectLancExtrato = (row, isSelect) => {\r\n    const resultadoSelectedLancamentos = isSelect\r\n      ? [...selectedItemsLancConciliado, row]\r\n      : selectedItemsLancConciliado.filter(it => it.id !== row.id);\r\n    setValorLancamentoConciliado(isSelect ? valorLancamentoConciliado + parseFloat(row.valor) : valorLancamentoConciliado - parseFloat(row.valor));\r\n    const selectLancamento = [];\r\n    const selectExtrato = [];\r\n    const valExtratoSelected = [];\r\n    let valorExtrato = 0;\r\n    const contabilExtrato = new Map(Object.entries(mapContabilExtrato));\r\n\r\n    if (resultadoSelectedLancamentos.length === 0) {\r\n      setSelectedLacamento([]);\r\n    } else {\r\n      resultadoSelectedLancamentos.forEach((lancamento: Lancamento) => {\r\n        const conciliacaoBancaria: ConciliacaoBancaria[] = contabilExtrato.get(String(lancamento.id));\r\n        conciliacaoBancaria.forEach(it => {\r\n          if (isSelect) {\r\n            selectExtrato.push(it.bancoExtrato.id);\r\n            selectLancamento.push(lancamento.id);\r\n            valExtratoSelected.push(it.bancoExtrato.valor);\r\n          } else {\r\n            setSelectedExtrato(\r\n              selectExtrato.filter(itt => {\r\n                return itt === it.bancoExtrato.id;\r\n              })\r\n            );\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    if (valExtratoSelected.length === 0) {\r\n      setValorExtratoConciliado(0);\r\n    } else {\r\n      valExtratoSelected.forEach(valores => {\r\n        valorExtrato += valores;\r\n      });\r\n    }\r\n\r\n    if (resultadoSelectedLancamentos.length === 0) {\r\n      setValorLancamentoConciliado(0);\r\n    }\r\n\r\n    setSelectedLacamento(selectLancamento);\r\n    setSelectedItemsLancConciliado(resultadoSelectedLancamentos);\r\n    setSelectedExtrato(selectExtrato);\r\n    setValorExtratoConciliado(valorExtrato);\r\n  };\r\n\r\n  const selectRowLancamentoConciliado = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleSelectLancExtrato,\r\n    selected: selectedLacamento,\r\n  };\r\n\r\n  const selectRowLExtratoConciliado = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleSelectExtrato,\r\n    selected: selectedExtrato,\r\n  };\r\n\r\n  const selectRowLExtratoNConciliado = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: (row, isSelect) => {\r\n      setSelecItemsExtratoNConciliado(\r\n        isSelect ? [...selectedItemsExtratoNConciliado, row] : selectedItemsExtratoNConciliado.filter(it => it !== row)\r\n      );\r\n      setValorExtratoNConciliado(isSelect ? valorExtratoNConciliado + parseFloat(row.valor) : valorExtratoNConciliado - parseFloat(row.valor));\r\n    },\r\n  };\r\n\r\n  const selectRowLancamentoNaoConciliado = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: (row, isSelect) => {\r\n      setSelectedItemsLancNConciliado(isSelect ? [...selectedItemsLancNConciliado, row] : selectedItemsLancNConciliado.filter(it => it !== row));\r\n      setValorLancamentoNConciliado(\r\n        isSelect ? valorLancamentoNConciliado + parseFloat(row.valor) : valorLancamentoNConciliado - parseFloat(row.valor)\r\n      );\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setDock();\r\n    }, 100);\r\n  }, []);\r\n\r\n  const openInmportacaExtratoBancario = () => openMultiPage(ImportacaoExtratoBancarioView);\r\n  const openPlanoContaHistorico = () => openMultiPage(HistoricoExtratoPlanoContaEditView);\r\n  const openPlanoContaBanco = () => openMultiPage(BancoExtratoPlanoContaEditView);\r\n\r\n  const openMultiPage = (componente: any, onDockSubmit: (formData) => void = null) => {\r\n    const Page = componente as FC<any>;\r\n    const pageProps = {\r\n      history: props.history,\r\n      location: props.location,\r\n      match: props.match,\r\n      onDockSubmit,\r\n      openViaDock: true,\r\n    };\r\n    dispatch(multiPageActions.showPage(<Page {...pageProps} />));\r\n  };\r\n\r\n  const setDock = () => {\r\n    dispatch(\r\n      dockActions.createDock(\r\n        <DockItemList>\r\n          <DockItem id=\"dockPlanoContasBanco\" icon={['fas', 'university']} color=\"danger\" text=\"Plano Contas - Banco\" onClick={openPlanoContaBanco} />\r\n          <DockItem\r\n            id=\"dockPlanoContaHistorico\"\r\n            icon={['fas', 'money-check']}\r\n            color=\"primary\"\r\n            text=\"Plano Contas Histórico\"\r\n            onClick={openPlanoContaHistorico}\r\n          />\r\n          <DockItem\r\n            id=\"dockImportarExtratoBancario\"\r\n            icon={['fas', 'funnel-dollar']}\r\n            color=\"success\"\r\n            text=\"Importar Extrato\"\r\n            onClick={openInmportacaExtratoBancario}\r\n          />\r\n        </DockItemList>\r\n      )\r\n    );\r\n  };\r\n\r\n  function validateExtras(): string[] {\r\n    const erros = [];\r\n\r\n    if (isEmpty(formProps.getValues().periodoDe)) {\r\n      erros.push('O filtro de Data Inicial é de preenchimento obrigatório.');\r\n    }\r\n\r\n    if (isEmpty(formProps.getValues().periodoAte)) {\r\n      erros.push('O filtro de Data Final é de preenchimento obrigatório.');\r\n    }\r\n\r\n    if (isEmpty(formProps.getValues().planoConta)) {\r\n      erros.push('Selecione uma Conta Contábil para consultar.');\r\n    }\r\n\r\n    if (isEmpty(formProps.getValues().bancoMCG)) {\r\n      erros.push('É obrigatório que o Plano de Contas selecionado esteja relacionado a uma Conta Bancária.');\r\n    }\r\n\r\n    if (toDate(formProps.getValues().periodoDe) > toDate(formProps.getValues().periodoAte)) {\r\n      erros.push('A Data Inicial deve ser menor que a Data Final.');\r\n    }\r\n\r\n    return erros;\r\n  }\r\n\r\n  const handleBlurPeriodoAte = () => {\r\n    const periodoAte = moment(toDate(formProps.getValues().periodoDe)).endOf('month');\r\n    formProps.setValue('periodoAte', periodoAte, true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.isFromVerifyError) {\r\n      const dataFinal = moment(toDate(props.dtLancamento)).endOf('month');\r\n      setTimeout(() => {\r\n        formProps.setValue('planoConta', props.planoConta);\r\n        formProps.setValue('periodoDe', props.dtLancamento);\r\n        formProps.setValue('periodoAte', dataFinal);\r\n        buscarBanco(idEmpresaAtual, props.planoConta.id);\r\n      }, 800);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Conciliação Bancária - Extratos\"\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoPlanoContas(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={173}\r\n    >\r\n      <Form>\r\n        <Box title=\"Consultar Conciliação Bancária - Extratos\">\r\n          <Row>\r\n            <Col>\r\n              <PlanoContaIS\r\n                id=\"planoConta\"\r\n                formProps={{ ...formProps, validation: { required: true } }}\r\n                label=\"Conta\"\r\n                onChange={contaSelecionadaObterPlanoConta}\r\n                placeholder=\"Informe a Conta\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <InputGroupInline\r\n                formProps={{ ...formProps, validation: { required: true } }}\r\n                id=\"bancoMCG\"\r\n                inputDropDownProps={{ optionsProvider: bancoMCG }}\r\n                isPrependLabel={true}\r\n                label=\"Conta Bancária\"\r\n                placeholder=\"Informe a Conta Bancária\"\r\n                type={InputType.DROP_DOWN}\r\n                disabled={isDisabledBanco}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <InputGroupInline\r\n                formProps={{ ...formProps, validation: { required: true } }}\r\n                id=\"periodoDe\"\r\n                isPrependLabel={true}\r\n                label=\"Data Inicial\"\r\n                placeholder=\"Informe a Data Inicial\"\r\n                type={InputType.DATE}\r\n                onBlur={handleBlurPeriodoAte}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <InputGroupInline\r\n                formProps={{ ...formProps, validation: { required: true } }}\r\n                id=\"periodoAte\"\r\n                isPrependLabel={true}\r\n                label=\"Data Final\"\r\n                placeholder=\"Informe a Data Final\"\r\n                type={InputType.DATE}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"divider my-3\" />\r\n          <Row>\r\n            <Col md=\"auto\">\r\n              <Button className=\"ml-0\" color=\"primary\" onClick={validaObterDadosConciliacaoBancaria}>\r\n                <FontAwesomeIcon icon=\"sync\" /> Consultar\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Box>\r\n        <TabGroup formProps={formProps}>\r\n          <Tab title=\"Não Conciliados\">\r\n            <Box>\r\n              <Row>\r\n                <Col>\r\n                  <Box title=\"Lançamentos Extrato Bancário\">\r\n                    <div className=\"table-area\">\r\n                      <BootstrapTable\r\n                        bordered={true}\r\n                        columns={columnsExtrato}\r\n                        condensed={true}\r\n                        data={lNaoConciliadosExtrato}\r\n                        hover={true}\r\n                        keyField=\"id\"\r\n                        noDataIndication=\"Nenhum informação a ser exibida.\"\r\n                        responsive={true}\r\n                        striped={true}\r\n                        tabIndexCell={true}\r\n                        selectRow={selectRowLExtratoNConciliado}\r\n                        bodyClasses=\"table-alternate-spaced table\"\r\n                      />\r\n                    </div>\r\n                    <Col>\r\n                      <div className=\"d-flex align-items-center float-right mt-lg-4\">\r\n                        <div className=\"d-40 rounded-circle bg-first text-white d-flex align-items-center justify-content-center font-size-lg mr-3\">\r\n                          <FontAwesomeIcon icon={['fas', 'hand-holding-usd']} />\r\n                        </div>\r\n                        <div className=\"text-black-50\">\r\n                          Total Selecionado: <span className=\"font-weight-bold text-black\">R$ {valorExtratoNConciliado}</span>\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  </Box>\r\n                </Col>\r\n                <Col>\r\n                  <Box title=\"Lançamentos Contábeis\">\r\n                    <div className=\"table-area\">\r\n                      <BootstrapTable\r\n                        bordered={true}\r\n                        columns={columnsContabeis}\r\n                        condensed={true}\r\n                        className=\"table-scroll\"\r\n                        data={lNaoConciliadosContabeis}\r\n                        hover={true}\r\n                        keyField=\"id\"\r\n                        noDataIndication=\"Nenhum informação a ser exibida.\"\r\n                        responsive={true}\r\n                        striped={true}\r\n                        tabIndexCell={true}\r\n                        selectRow={selectRowLancamentoNaoConciliado}\r\n                      />\r\n                    </div>\r\n                    <Col>\r\n                      <div className=\"d-flex align-items-center float-right mt-lg-4\">\r\n                        <div className=\"d-40 rounded-circle bg-first text-white d-flex align-items-center justify-content-center font-size-lg mr-3\">\r\n                          <FontAwesomeIcon icon={['fas', 'hand-holding-usd']} />\r\n                        </div>\r\n                        <div className=\"text-black-50\">\r\n                          Lançamentos Contábeis Selecionados: <span className=\"font-weight-bold text-black\">R$ {valorLancamentoNConciliado}</span>\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  </Box>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Button onClick={removerLExtratoBancario} color=\"danger\">\r\n                    <FontAwesomeIcon icon=\"check-circle\" /> Remover Lançamentos de Extrato Bancário\r\n                  </Button>\r\n                </Col>\r\n                <Col>\r\n                  <Button onClick={conciliarLancExtrato} color=\"success\" className=\"float-right\">\r\n                    <FontAwesomeIcon icon=\"check-circle\" /> Conciliar\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Box>\r\n          </Tab>\r\n          <Tab title=\"Conciliados\">\r\n            <Box>\r\n              <Row>\r\n                <Col>\r\n                  <Box title=\"Lançamentos Extrato Bancário\">\r\n                    <div className=\"table-area\">\r\n                      <BootstrapTable\r\n                        bordered={true}\r\n                        columns={columnsExtrato}\r\n                        condensed={true}\r\n                        className=\"table-scroll\"\r\n                        data={lConciliadosExtrato}\r\n                        hover={true}\r\n                        keyField=\"id\"\r\n                        noDataIndication=\"Nenhum informação a ser exibida.\"\r\n                        responsive={true}\r\n                        striped={true}\r\n                        tabIndexCell={true}\r\n                        selectRow={selectRowLExtratoConciliado}\r\n                      />\r\n                    </div>\r\n                    <Col>\r\n                      <div className=\"d-flex align-items-center float-right mt-lg-4\">\r\n                        <div className=\"d-40 rounded-circle bg-first text-white d-flex align-items-center justify-content-center font-size-lg mr-3\">\r\n                          <FontAwesomeIcon icon={['fas', 'hand-holding-usd']} />\r\n                        </div>\r\n                        <div className=\"text-black-50\">\r\n                          Total Selecionado: <span className=\"font-weight-bold text-black\">R$ {valorExtratoConciliado}</span>\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  </Box>\r\n                </Col>\r\n                <Col>\r\n                  <Box title=\"Lançamentos Contábeis\">\r\n                    <div className=\"table-area\">\r\n                      <BootstrapTable\r\n                        bordered={true}\r\n                        columns={columnsContabeis}\r\n                        condensed={true}\r\n                        className=\"table-scroll\"\r\n                        data={lConciliadosContabeis}\r\n                        hover={true}\r\n                        keyField=\"id\"\r\n                        noDataIndication=\"Nenhum informação a ser exibida.\"\r\n                        responsive={true}\r\n                        striped={true}\r\n                        tabIndexCell={true}\r\n                        selectRow={selectRowLancamentoConciliado}\r\n                      />\r\n                    </div>\r\n                    <Col>\r\n                      <div className=\"d-flex align-items-center float-right mt-lg-4\">\r\n                        <div className=\"d-40 rounded-circle bg-first text-white d-flex align-items-center justify-content-center font-size-lg mr-3\">\r\n                          <FontAwesomeIcon icon={['fas', 'hand-holding-usd']} />\r\n                        </div>\r\n                        <div className=\"text-black-50\">\r\n                          Lançamentos Contábeis Selecionados: <span className=\"font-weight-bold text-black\">R$ {valorLancamentoConciliado}</span>\r\n                        </div>\r\n                      </div>\r\n                    </Col>\r\n                  </Box>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Button onClick={removerConciliarLancExtrato} color=\"danger\" className=\"float-right\">\r\n                    <FontAwesomeIcon icon=\"check-circle\" /> Remover Conciliação\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Box>\r\n          </Tab>\r\n        </TabGroup>\r\n      </Form>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ConciliacaoBancariaView;\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { EditForm, EditViewProps, InputGroupInline, WindowComponent } from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { BancoMCG, CLASS_NAME } from '../../../../models/dtos/mcg/bancoMCG';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface BancoExtratoPlanoContaEditView extends EditViewProps<BancoMCG> {}\r\n\r\nconst BancoExtratoPlanoContaEditView: FC<BancoExtratoPlanoContaEditView & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { reset, ...formProps } = useForm<BancoMCG>({ mode: 'onBlur' });\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa !== null) {\r\n        const { empresa } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          reset({\r\n            empresa: {\r\n              id: empresa.id,\r\n            },\r\n          });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Banco - Plano Contas Extratos\"\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n    >\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME}>\r\n        <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"banco\"\r\n              label=\"Banco\"\r\n              placeholder=\"Informe o Banco\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"agencia\"\r\n              label=\"Agência\"\r\n              placeholder=\"Informe a Agência\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"conta\"\r\n              label=\"Conta\"\r\n              placeholder=\"Informe a Conta \"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default BancoExtratoPlanoContaEditView;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Col, CustomInput, Form, FormGroup, Row, UncontrolledTooltip } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  Box,\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  EditViewProps,\r\n  ErroList,\r\n  ERROR,\r\n  FileInputPreview,\r\n  InputTooltipProps,\r\n  isEmpty,\r\n  OrderType,\r\n  progressActions,\r\n  SelectModeEnum,\r\n  showToast,\r\n  SIZE_ONE_HUNDRED_BYTES,\r\n  Tab,\r\n  TabGroup,\r\n  WindowComponent,\r\n  withTooltip,\r\n} from 'summer';\r\nimport { BancoExtrato } from '../../../../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../../../../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../../../../models/dtos/mcg/bancoPlanoConta';\r\nimport { ImportacaoExtratoBancario } from '../../../../models/dtos/mcg/importacaoExtratoBancario';\r\nimport { obterBancoPlanoConta, obterDadosArquivoExtrato } from '../../../../services/mcg.service';\r\nimport { multiPageActions, Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport HistoricoExtratoPlanoContaEditView from '../historicoExtratoPlanoConta/HistoricoExtratoPlanoContaEditView';\r\n\r\ninterface ImportacaoExtratoBancarioViewProps extends EditViewProps<ImportacaoExtratoBancario> {}\r\n\r\nconst ImportacaoExtratoBancarioView: FC<ImportacaoExtratoBancarioViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<ImportacaoExtratoBancario>({ mode: 'onBlur' });\r\n\r\n  const [bancoExtrato, setbancoExtrato] = useState<BancoExtrato[]>([]);\r\n  const [selectedItems, setSelectedItems] = useState('');\r\n  const [abrirVincularHistorico, setAbrirVincularHistorico] = useState(false);\r\n  const [isHiddenUtilizarContaHistorico, setIsHiddenUtilizarContaHistorico] = useState(true);\r\n  const [isGerarLancamento, setIsGerarLancamento] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const MAX_FILES: number = 1;\r\n\r\n  const defaultSorted: DefaultSortProps[] = [\r\n    {\r\n      dataField: 'doc',\r\n      order: OrderType.ASC,\r\n    },\r\n  ];\r\n\r\n  const bancoExtratoColumns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'rowNumber',\r\n      hidden: true,\r\n      text: 'Row Number',\r\n    },\r\n    {\r\n      dataField: 'dataMov',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Data',\r\n    },\r\n    {\r\n      dataField: 'historico',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Histórico',\r\n    },\r\n    {\r\n      dataField: 'doc',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Doc',\r\n    },\r\n    {\r\n      dataField: 'valor',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Valor',\r\n    },\r\n    {\r\n      dataField: 'actions',\r\n      formatter: (cell, row) => {\r\n        return (\r\n          <Button\r\n            id={'buttonEdit' + row.doc}\r\n            color=\"neutral-secondary\"\r\n            onClick={openVincularHistorico}\r\n            className=\"btn-pill d-30 p-0 align-top btn-animated-icon btn-animated-icon--secondary\"\r\n          >\r\n            <span className=\"btn-wrapper--icon\">\r\n              <FontAwesomeIcon color={'black'} icon={'pen'} />\r\n            </span>\r\n            <UncontrolledTooltip target={'buttonEdit' + row.doc} placement=\"top\">\r\n              Vincular Histórico\r\n            </UncontrolledTooltip>\r\n          </Button>\r\n        );\r\n      },\r\n      headerAlign: () => {\r\n        return 'center';\r\n      },\r\n      style: (cell, row) => {\r\n        return { backgroundColor: row.color, color: 'white', textAlign: 'center' };\r\n      },\r\n      text: 'Víncular Histórico',\r\n    },\r\n  ];\r\n\r\n  const selectRow = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.RADIO,\r\n    onSelect: row => {\r\n      setSelectedItems(row.historico);\r\n    },\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      label: 'Aguarde processando...',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const validateContaSelecionadaObterPlanoConta = () => {\r\n    const erros = validateExtras();\r\n    if (erros.length > 0) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      dispatch(showLoading());\r\n      contaSelecionadaObterPlanoConta();\r\n    }\r\n  };\r\n\r\n  const contaSelecionadaObterPlanoConta = () => {\r\n    if (formProps.getValues().planoConta) {\r\n      const bancoPlanoConta: BancoPlanoConta = {\r\n        idEmpresaSelecionada: globalReducer.globalParameter.empresa.id,\r\n        idGrupoPlanoConta: formProps.getValues().planoConta.id,\r\n      };\r\n      obterBancoPlanoConta(bancoPlanoConta, {\r\n        errorFunction: (mensagem: string): void => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: (bancoMCG: BancoMCG): void => {\r\n          if (!isEmpty(bancoMCG)) {\r\n            importarArquivo(bancoMCG);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  function importarArquivo(bancoMCG: BancoMCG): void {\r\n    obterDadosArquivoExtrato(formProps.getValues().arquivoSelecionado, bancoMCG.id, {\r\n      thenFunction: (bancoExtratoResult: BancoExtrato[]) => {\r\n        setbancoExtrato(bancoExtratoResult);\r\n        dispatch(progressActions.hideProgress());\r\n      },\r\n    });\r\n  }\r\n\r\n  function validateExtras(): string[] {\r\n    const erros = [];\r\n    if (isEmpty(formProps.getValues().arquivoSelecionado)) {\r\n      erros.push('Nenhum Arquivo selecionado');\r\n    }\r\n\r\n    return erros;\r\n  }\r\n\r\n  const propToolTip = (messagem: string): InputTooltipProps => {\r\n    return {\r\n      message: messagem,\r\n      placement: 'top-start',\r\n    };\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (abrirVincularHistorico && !isEmpty(selectedItems)) {\r\n        openMultiPage(HistoricoExtratoPlanoContaEditView, true);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [selectedItems, abrirVincularHistorico]\r\n  );\r\n\r\n  const openVincularHistorico = () => {\r\n    setAbrirVincularHistorico(true);\r\n  };\r\n\r\n  const openMultiPage = (componente: any, executeSearch: boolean) => {\r\n    const Page = componente as FC<any>;\r\n    const pageProps = {\r\n      executeSearch,\r\n      history: props.history,\r\n      location: props.location,\r\n      match: props.match,\r\n      selectedItem: selectedItems,\r\n    };\r\n    dispatch(multiPageActions.showPage(<Page {...pageProps} />));\r\n  };\r\n  const changeGerarLancamento = () => {\r\n    if (isGerarLancamento) {\r\n      setIsHiddenUtilizarContaHistorico(true);\r\n      setIsGerarLancamento(false);\r\n      formProps.setValue('isUtilizarContaHistorico', false, true);\r\n    } else {\r\n      setIsHiddenUtilizarContaHistorico(false);\r\n      setIsGerarLancamento(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"Importação Extrato Bancário\" useGlobalParameter={true} globalParameter={globalReducer.globalParameter} wikiId={173}>\r\n      <Form>\r\n        <Box>\r\n          <Row>\r\n            <Col>\r\n              <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n            </Col>\r\n          </Row>\r\n          <FormGroup tag={Row} className=\"mt-2\">\r\n            <Col>\r\n              <CustomInput\r\n                id=\"idgerarLancamento\"\r\n                innerRef={formProps.register}\r\n                label=\"Selecione para gerar Lançamentos Contábeis para cada transação do Extrato.\"\r\n                type=\"switch\"\r\n                name=\"isGerarLancamento\"\r\n                checked={isGerarLancamento}\r\n                onChange={changeGerarLancamento}\r\n              />\r\n              {withTooltip(\r\n                propToolTip(\r\n                  'Caso o campo seja marcado, os Lançamentos Contábeis anteriores serão sobrescritos. Essa ação não sobrescreve os Planos de Contas importados anteriormente.'\r\n                ),\r\n                'gerarLancamento'\r\n              )}\r\n            </Col>\r\n            <Col>\r\n              <CustomInput\r\n                id=\"idutilizarContaHistorico\"\r\n                innerRef={formProps.register}\r\n                label=\"Utilizar Conta Vinculada ao Histórico do Extrato\"\r\n                type=\"switch\"\r\n                name=\"isUtilizarContaHistorico\"\r\n                disabled={isHiddenUtilizarContaHistorico}\r\n              />\r\n              {withTooltip(\r\n                propToolTip(\r\n                  'Caso exista uma conta Vinculada ao Histórico do Extrato, essa será utilizada nos Lançamentos Contábeis para cada Transação do Extrato.'\r\n                ),\r\n                'utilizarContaHistorico'\r\n              )}\r\n            </Col>\r\n          </FormGroup>\r\n          <Row>\r\n            <Col>\r\n              <FileInputPreview\r\n                acceptedTypes=\".ofx\"\r\n                formProps={formProps}\r\n                isMultiple={true}\r\n                limitSizeBytes={SIZE_ONE_HUNDRED_BYTES}\r\n                propImageName=\"arquivoSelecionado\"\r\n                maxFiles={MAX_FILES}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          {/*// TODO onSubmit componente File */}\r\n          <Row>\r\n            <Col className=\"mb-3 mt-5\">\r\n              <Button onClick={formProps.handleSubmit(validateContaSelecionadaObterPlanoConta)} color=\"danger\">\r\n                <FontAwesomeIcon icon=\"check-circle\" /> Importar extrato Bancário\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Box>\r\n        <TabGroup formProps={formProps}>\r\n          <Tab title=\"Extrato Bancário\">\r\n            <div className=\"table-area\">\r\n              <BootstrapTable\r\n                bordered={true}\r\n                columns={bancoExtratoColumns}\r\n                condensed={true}\r\n                className=\"table-alternate-spaced text-nowrap mb-0 table\"\r\n                data={bancoExtrato || []}\r\n                defaultSorted={defaultSorted}\r\n                hover={true}\r\n                keyField=\"doc\"\r\n                noDataIndication=\"Nenhum informação a ser exibida.\"\r\n                responsive={true}\r\n                striped={true}\r\n                tabIndexCell={true}\r\n                selectRow={selectRow}\r\n              />\r\n            </div>\r\n          </Tab>\r\n        </TabGroup>\r\n      </Form>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ImportacaoExtratoBancarioView;\r\n","import { Basic } from 'summer';\r\nimport { Empresa } from '../ger/empresa';\r\nimport { PlanoConta } from '../ger/planoConta';\r\n\r\nexport interface ContaHistorico extends Basic {\r\n  empresa?: Empresa;\r\n  historicoExtrato?: string;\r\n  planoConta?: PlanoConta;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.contahistorico';\r\n","import { Basic } from 'summer';\r\nimport { Empresa } from '../ger/empresa';\r\nimport { PlanoConta } from '../ger/planoConta';\r\n\r\nexport interface BancoMCG extends Basic {\r\n  agencia?: string;\r\n  banco?: string;\r\n  conta?: string;\r\n  empresa?: Empresa;\r\n  planoConta?: PlanoConta;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.bancomcg';\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { EditForm, EditViewProps, InputGroupInline, WindowComponent } from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, ContaHistorico } from '../../../../models/dtos/mcg/contaHistorico';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface HistoricoExtratoPlanoContaEditView extends EditViewProps<ContaHistorico> {}\r\n\r\ninterface OpenFromFechamentoRestauracao {\r\n  executeSearch: true;\r\n}\r\n\r\nconst HistoricoExtratoPlanoContaEditView: FC<HistoricoExtratoPlanoContaEditView & RouteComponentProps & OpenFromFechamentoRestauracao> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { reset, ...formProps } = useForm<ContaHistorico>({ mode: 'onBlur' });\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa !== null) {\r\n        const { empresa } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          reset({\r\n            empresa: {\r\n              id: empresa.id,\r\n            },\r\n            historicoExtrato: props.selectedItem,\r\n          });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      title=\"Histórico - Plano Contas Extratos\"\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n    >\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME}>\r\n        <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"historicoExtrato\"\r\n              label=\"Histórico de Extrato\"\r\n              placeholder=\"Informe o Histórico de Extrato\"\r\n              tooltipProps={{\r\n                message: 'Informar a parte fixa do histórico, com isso os históricos que possuem a parte fixa será relacionada a mesma conta. ',\r\n              }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default HistoricoExtratoPlanoContaEditView;\r\n"],"sourceRoot":""}