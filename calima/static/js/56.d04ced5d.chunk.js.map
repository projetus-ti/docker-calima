{"version":3,"sources":["views/pages/mcg/grupoPlanoConta/GrupoPlanoContaConfigEditView.tsx","views/pages/mcg/encerrarContasResultado/EncerrarContasResultadoProcessView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/CardTitle.js","../node_modules/reactstrap/es/Alert.js","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx"],"names":["GrupoPlanoContaConfigEditView","props","selectedItem","getSelectedItem","formProps","useForm","defaultValues","mode","dispatch","useDispatch","editFormRef","useRef","globalReducer","useSelector","state","useEffect","openViaDock","grupoPlanoConta","globalParameter","setTimeout","reset","loadGrupoPlanoConta","onLoad","mapKey","values","getValues","isEmpty","showLoading","findById","CLASS_NAME","thenFunction","res","data","progressActions","hideProgress","setValue","Object","keys","map","key","[object Object]","showProgress","animated","className","color","striped","value","onCancel","current","close","handleSubmit","submit","then","wizardFinishProps","confirmButton","label","onConfirm","getMainEditView","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","style","marginBottom","borderWidth","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_16__","id","labelWidth","placeholder","sintetica","summer__WEBPACK_IMPORTED_MODULE_9__","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","wrapBody","wikiId","ref","editViewProps","dtoClassName","externalSubmit","validateExtras","erros","planoContaFornecedor","planoContaFornecedorGrupo","push","planoContaCliente","planoContaClienteGrupo","planoContaTransportadora","planoContaTransportadoraGrupo","afterPersist","atualizarGlobalParameter","usuario","setGlobalParameter","handleClose","btnSubmitIcon","btnSubmitLabel","onAfterPageChange","currentPageId","finishProps","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_15__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","EncerrarContasResultadoProcessView","formPropsLimparEncerramento","_useState","useState","_useState2","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","showModalView","setShowModalView","_useState3","undefined","_useState4","dataUltimoEncerramento","setDataUltimoEncerramento","_useState5","_useState6","lblUltimasContasEncerradas","setLblUltimasContasEncerradas","doClosure","formData","forceParam","encerrarContas","errorFunction","mensagem","params","message","type","AlertType","ERROR","alertManager","emit","ACTION_EVENTS","SHOW","onOkClick","openGrupoPlanoConta","WARNING_YES_NO","showToast","result","INFORMATION","atualizarDataUltimoEncerramento","encerramentoContas","getDataUltimaContaEncerrada","empresa","formatDate","empresaMCG","refAtual","parseLastDay","concat","handleCloseModal","componente","Page","pageProps","editItemProps","history","location","match","multiPageActions","showPage","react__WEBPACK_IMPORTED_MODULE_2___default","openMultiPage","ConfigGrupoPlanoContaEditView","summer__WEBPACK_IMPORTED_MODULE_14__","hasGrupoEmpresaConfig","hidden","xs","isPrependLabel","inputProps","autoFocus","InputType","DATE","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_9__","_globalReducer$global","_globalReducer$global2","digitoAtivo","digitoPassivo","idGerEmpresa","ativo","idGerGrupoPlanoConta","passivo","goBack","dispatchClose","onClose","reactstrap__WEBPACK_IMPORTED_MODULE_10__","isOpen","centered","toggle","size","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","compare","dataBase","limparEncerramentoContaResultado","reactstrap__WEBPACK_IMPORTED_MODULE_13__","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","contaResultadoEncerramento","force","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","PlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","forEach","filtro","searchViewId","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","CardTitle","Tag","attributes","classes","defaultProps","_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_3___default","prop_types__WEBPACK_IMPORTED_MODULE_4__","prop_types__WEBPACK_IMPORTED_MODULE_4___default","classnames__WEBPACK_IMPORTED_MODULE_5__","classnames__WEBPACK_IMPORTED_MODULE_5___default","_utils__WEBPACK_IMPORTED_MODULE_6__","_Fade__WEBPACK_IMPORTED_MODULE_7__","children","node","closeClassName","closeAriaLabel","fade","bool","func","transition","shape","innerRef","oneOfType","unmountOnExit","Alert","alert-dismissible","closeClasses","alertTransition","baseClass","timeout","in","role","aria-label","aria-hidden","GrupoPlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"static/js/56.d04ced5d.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap';\r\nimport {\r\n  EditForm,\r\n  EditFormRefProps,\r\n  EditViewProps,\r\n  findById,\r\n  getSelectedItem,\r\n  isEmpty,\r\n  ProcessBar,\r\n  progressActions,\r\n  WindowComponent,\r\n  Wizard,\r\n  WizardActionFinishProps,\r\n  WizardPage,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, GrupoPlanoConta } from '../../../../models/dtos/ger/grupoPlanoConta';\r\nimport { atualizarGlobalParameter } from '../../../../services/ger.service';\r\nimport { GlobalState, setGlobalParameter } from '../../../../store/ducks/global.duck';\r\nimport { Reducers } from '../../../../store/ducks/index';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface ScreenFields {\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n}\r\n\r\ninterface GrupoPlanoContaConfigEditProps extends EditViewProps<GrupoPlanoConta> {\r\n  openViaDock?: boolean;\r\n}\r\n\r\nconst GrupoPlanoContaConfigEditView: FC<GrupoPlanoContaConfigEditProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<GrupoPlanoConta & ScreenFields>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n  const dispatch = useDispatch();\r\n\r\n  const editFormRef = useRef<EditFormRefProps>();\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.openViaDock) {\r\n        const { grupoPlanoConta } = globalReducer.globalParameter;\r\n\r\n        setTimeout(() => {\r\n          formProps.reset(grupoPlanoConta);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onPageChange = currentPageId => {\r\n    if (currentPageId === 'configuracao') {\r\n      loadGrupoPlanoConta();\r\n    }\r\n  };\r\n\r\n  const loadGrupoPlanoConta = (onLoad: (rawData?: any) => void = null, mapKey = null) => {\r\n    const values = formProps.getValues();\r\n    if (!isEmpty(values.grupoPlanoConta)) {\r\n      dispatch(showLoading());\r\n      findById(values.grupoPlanoConta, CLASS_NAME, {\r\n        thenFunction: res => {\r\n          const data = mapKey ? res[mapKey] : res;\r\n          dispatch(progressActions.hideProgress());\r\n          formProps.setValue(Object.keys(data).map(key => ({ [key]: data[key] })));\r\n          if (onLoad) {\r\n            onLoad(res);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const reset = () => {\r\n    formProps.setValue('grupoPlanoConta', null);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    editFormRef.current.close(true);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    editFormRef.current.submit().then(reset);\r\n  };\r\n\r\n  const wizardFinishProps: WizardActionFinishProps = {\r\n    confirmButton: {\r\n      label: 'Salvar',\r\n    },\r\n    onCancel: () => {\r\n      reset();\r\n      onCancel();\r\n    },\r\n    onConfirm: handleSubmit,\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaFornecedor) && !isEmpty(formProps.getValues().planoContaFornecedorGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Fornecedor');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaCliente) && !isEmpty(formProps.getValues().planoContaClienteGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Cliente');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaTransportadora) && !isEmpty(formProps.getValues().planoContaTransportadoraGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para a Transportadora');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  const defaultWidth = 200;\r\n\r\n  const afterPersist = (): void => {\r\n    atualizarGlobalParameter(\r\n      { id: globalReducer.globalParameter.usuario.id },\r\n      {\r\n        thenFunction: globalParameter => {\r\n          dispatch(setGlobalParameter(globalParameter));\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const getMainEditView = () => (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Contas de Encerramento</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaLucro\"\r\n                    label=\"Lucro Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Lucro Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaPrejuizo\"\r\n                    label=\"Prejuízo Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Prejuízo Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaResultado\"\r\n                    label=\"Resultado do Exercício\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Resultado do Exercício\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Fornecedor</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedor\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os fornecedores.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedorGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os fornecedores.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Cliente</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaCliente\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os clientes.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaClienteGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os clientes.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Transportadora</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadora\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todas as transportadoras.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadoraGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para as transportadoras.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Configuração de Grupo de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      globalParameter={globalReducer.globalParameter}\r\n      wrapBody={props.openViaDock === true}\r\n      wikiId={1363}\r\n    >\r\n      <EditForm\r\n        ref={editFormRef}\r\n        formProps={formProps}\r\n        editViewProps={props}\r\n        dtoClassName={CLASS_NAME}\r\n        externalSubmit={true}\r\n        validateExtras={validateExtras}\r\n        afterPersist={afterPersist}\r\n      >\r\n        {props.openViaDock === true ? (\r\n          <div className=\"m-3\">\r\n            {getMainEditView()}\r\n            <ProcessBar handleSubmit={handleSubmit} handleClose={onCancel} btnSubmitIcon=\"save\" btnSubmitLabel=\"Salvar\" />\r\n          </div>\r\n        ) : (\r\n          <Wizard formProps={formProps} onAfterPageChange={onPageChange} finishProps={wizardFinishProps}>\r\n            <WizardPage id=\"grupoPlanoConta\" title=\"Seleção do Grupo de Plano de Contas\">\r\n              <Row>\r\n                <Col>\r\n                  <GrupoPlanoContaIS id=\"grupoPlanoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n                </Col>\r\n              </Row>\r\n            </WizardPage>\r\n            <WizardPage id=\"configuracao\" title=\"Configurações\">\r\n              {getMainEditView()}\r\n            </WizardPage>\r\n          </Wizard>\r\n        )}\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaConfigEditView;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Alert, Button, Col, Form, Modal, ModalBody, ModalFooter, ModalHeader, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  compare,\r\n  dispatchClose,\r\n  EditViewProps,\r\n  ERROR,\r\n  formatDate,\r\n  INFORMATION,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  parseLastDay,\r\n  ProcessBar,\r\n  progressActions,\r\n  showToast,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { ContaResultadoLimpeza } from '../../../../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../../../../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { encerrarContas, getDataUltimaContaEncerrada, limparEncerramentoContaResultado } from '../../../../services/mcg.service';\r\nimport { multiPageActions, Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport ConfigGrupoPlanoContaEditView from '../grupoPlanoConta/GrupoPlanoContaConfigEditView';\r\n\r\ninterface EncerrarContasResultadoProcessEditViewProps extends EditViewProps<ContaResultadoMCGEncerramento> {}\r\n\r\nconst EncerrarContasResultadoProcessView: FC<EncerrarContasResultadoProcessEditViewProps & RouteComponentProps> = props => {\r\n  const formProps = useForm<ContaResultadoMCGEncerramento>({ mode: 'onBlur' });\r\n  const formPropsLimparEncerramento = useForm<ContaResultadoLimpeza>({ mode: 'onBlur' });\r\n\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const MSG_LABEL_ULTIMA_REFERENCIA: string = 'Último Encerramento de Contas de Resultado';\r\n  const MSG_NENHUM_ENCERRAMENTO: string = 'Ainda não houve um Encerramento de Contas de Resultado.';\r\n\r\n  const [showModalView, setShowModalView] = useState(false);\r\n  const [dataUltimoEncerramento, setDataUltimoEncerramento] = useState(undefined);\r\n\r\n  const [lblUltimasContasEncerradas, setLblUltimasContasEncerradas] = useState(MSG_LABEL_ULTIMA_REFERENCIA);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa !== null) {\r\n        atualizarDataUltimoEncerramento();\r\n\r\n        if (globalReducer.globalParameter.empresaMCG !== null) {\r\n          const { refAtual } = globalReducer.globalParameter.empresaMCG;\r\n          setTimeout(() => {\r\n            formProps.setValue('dataEncerramento', formatDate(parseLastDay(refAtual)), true);\r\n          }, 500);\r\n        }\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataUltimoEncerramento)) {\r\n      setLblUltimasContasEncerradas(MSG_NENHUM_ENCERRAMENTO);\r\n    } else {\r\n      setLblUltimasContasEncerradas(`${MSG_LABEL_ULTIMA_REFERENCIA} ${dataUltimoEncerramento}`);\r\n    }\r\n  }, [dataUltimoEncerramento]);\r\n\r\n  function handleClosure(data: ContaResultadoMCGEncerramento): void {\r\n    const {\r\n      grupoPlanoConta: { digitoAtivo, digitoPassivo, id },\r\n      empresa: { id: idGerEmpresa },\r\n    } = globalReducer.globalParameter;\r\n\r\n    data.ativo = digitoAtivo;\r\n    data.idGerEmpresa = idGerEmpresa;\r\n    data.idGerGrupoPlanoConta = id;\r\n    data.passivo = digitoPassivo;\r\n\r\n    dispatch(\r\n      progressActions.showProgress({\r\n        animated: true,\r\n        className: 'progress-bar-rounded progress-animated-alt',\r\n        color: 'first',\r\n        label: 'Aguarde processando...',\r\n        striped: true,\r\n        value: 100,\r\n      })\r\n    );\r\n    doClosure(data, null);\r\n  }\r\n\r\n  function doClosure(formData: ContaResultadoMCGEncerramento, forceParam: boolean): void {\r\n    encerrarContas(formData, forceParam, {\r\n      errorFunction: mensagem => {\r\n        dispatch(progressActions.hideProgress());\r\n        if (mensagem === 'Não existem contas à encerrar.' || mensagem === 'Nenhuma conta possui saldo para ser encerrada.') {\r\n          const params: AlertProps = {\r\n            message: mensagem,\r\n            type: AlertType.ERROR,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        } else if (mensagem === 'FALTA_CONFIG_CONTA') {\r\n          const params: AlertProps = {\r\n            message:\r\n              'As contas de resultado, prejuízo ou lucro não estão configuradas corretamente para este plano de contas. Deseja configurá-las agora?',\r\n            onOkClick: () => openGrupoPlanoConta(),\r\n            type: AlertType.WARNING_YES_NO,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        } else {\r\n          showToast(mensagem, ERROR);\r\n        }\r\n      },\r\n      thenFunction: result => {\r\n        dispatch(progressActions.hideProgress());\r\n        encerramentoContas(formData, result);\r\n      },\r\n    });\r\n  }\r\n\r\n  function encerramentoContas(formData: ContaResultadoMCGEncerramento, result: any): void {\r\n    if (result) {\r\n      const params: AlertProps = {\r\n        message: 'Contas de resultado encerradas com sucesso.',\r\n        type: AlertType.INFORMATION,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n      atualizarDataUltimoEncerramento();\r\n    } else {\r\n      const params: AlertProps = {\r\n        message: 'Existem contas de resultado encerradas no período informado. Deseja continuar?',\r\n        onOkClick: () => doClosure(formData, true),\r\n        type: AlertType.WARNING_YES_NO,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    }\r\n  }\r\n\r\n  function atualizarDataUltimoEncerramento(): void {\r\n    getDataUltimaContaEncerrada(globalReducer.globalParameter.empresa.id, {\r\n      errorFunction: mensagem => {\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: result => {\r\n        setDataUltimoEncerramento(formatDate(result));\r\n      },\r\n    });\r\n  }\r\n\r\n  function limparContaResultado(formData: ContaResultadoLimpeza): void {\r\n    if (compare(formData.dataBase, dataUltimoEncerramento) > 0) {\r\n      const mensagem: string = 'Não existem encerramentos de contas posteriores a data do último encerramento';\r\n      showToast(mensagem, INFORMATION);\r\n      return;\r\n    }\r\n\r\n    limparEncerramentoContaResultado(formData, {\r\n      errorFunction: mensagem => {\r\n        setShowModalView(false);\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: result => {\r\n        setShowModalView(false);\r\n        if (result > 0) {\r\n          showToast(`Lançamentos de Encerramento de Contas de Resultado após ${formData.dataBase} apagadas com sucesso.`, INFORMATION);\r\n          atualizarDataUltimoEncerramento();\r\n        } else {\r\n          showToast(`Nenhum lançamento de encerramento de contas de resultado após ${formData.dataBase}`, INFORMATION);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  function handleClean(): void {\r\n    setShowModalView(true);\r\n    setTimeout(() => {\r\n      formPropsLimparEncerramento.setValue('idGerEmpresa', globalReducer.globalParameter.empresa.id, true);\r\n      formPropsLimparEncerramento.setValue('dataBase', dataUltimoEncerramento, true);\r\n    }, 1000);\r\n  }\r\n\r\n  function handleCloseModal(): void {\r\n    setShowModalView(false);\r\n    atualizarDataUltimoEncerramento();\r\n  }\r\n\r\n  const openMultiPage = (componente: any, openViaDock: boolean) => {\r\n    const Page = componente as FC<any>;\r\n    const pageProps = {\r\n      editItemProps: props.editItemProps,\r\n      history: props.history,\r\n      location: props.location,\r\n      match: props.match,\r\n      openViaDock,\r\n      selectedItem: formProps.getValues(),\r\n    };\r\n    dispatch(multiPageActions.showPage(<Page {...pageProps} />));\r\n  };\r\n\r\n  const openGrupoPlanoConta = () => openMultiPage(ConfigGrupoPlanoContaEditView, true);\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Contas de Resultado - Encerramento\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={2235}\r\n    >\r\n      <Form>\r\n        <InputGroupInline formProps={formProps} id=\"ativo\" hidden={true} />\r\n        <InputGroupInline formProps={formProps} id=\"idGerEmpresa\" hidden={true} />\r\n        <InputGroupInline formProps={formProps} id=\"idGerGrupoPlanoConta\" hidden={true} />\r\n        <InputGroupInline formProps={formProps} id=\"passivo\" hidden={true} />\r\n        <Row>\r\n          <Col xs={9}>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"dataEncerramento\"\r\n              label=\"Data de Fechamento\"\r\n              placeholder=\"Informe a Data de Fechamento\"\r\n              isPrependLabel={true}\r\n              inputProps={{ autoFocus: true }}\r\n              type={InputType.DATE}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Button color=\"primary\" type=\"button\" onClick={handleClean}>\r\n              Limpar Contas de Resultado\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Alert color=\"primary\" className=\"text-center\">\r\n          {lblUltimasContasEncerradas}\r\n        </Alert>\r\n        <ProcessBar btnSubmitIcon=\"save\" btnSubmitLabel=\"Encerrar\" handleSubmit={formProps.handleSubmit(handleClosure)} handleClose={handleCancel} />\r\n      </Form>\r\n\r\n      <Modal isOpen={showModalView} centered={true} toggle={handleCloseModal} size=\"lg\">\r\n        <ModalHeader toggle={handleCloseModal}>Contas de Resultado - Encerramento</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <Row>\r\n              <Col xs={9}>\r\n                <InputGroupInline formProps={formPropsLimparEncerramento} id=\"idGerEmpresa\" hidden={true} />\r\n                <InputGroupInline\r\n                  formProps={{ ...formPropsLimparEncerramento, validation: { required: true } }}\r\n                  id=\"dataBase\"\r\n                  isPrependLabel={true}\r\n                  label=\"Lançamento de Encerramento após a Data\"\r\n                  type={InputType.DATE}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Button color=\"primary\" type=\"button\" onClick={formPropsLimparEncerramento.handleSubmit(limparContaResultado)}>\r\n                  Limpar\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Alert color=\"primary\" className=\"text-center\">\r\n                  {lblUltimasContasEncerradas}\r\n                </Alert>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter />\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default EncerrarContasResultadoProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread2({}, Fade.defaultProps, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread2({}, Fade.defaultProps, {}, transition, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n"],"sourceRoot":""}