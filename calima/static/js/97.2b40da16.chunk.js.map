{"version":3,"sources":["views/pages/mcg/importacaoPlanoConta/ImportacaoPlanoContaProcessView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","models/dtos/ger/grupoPlanoConta.ts","views/components/resultadoIntegracao/ResultadoIntegracao.tsx","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","models/dtos/mcg/planoContaReferencialInstituicao.ts","views/components/mcg/planoContaMCGReferencialInstituicao/PlanoContaMCGReferencialInstituicaoIS.tsx"],"names":["ImportacaoPlanoContaCSVProcessView","props","globalReducer","useSelector","state","_useState","useState","_useState2","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","showResultView","setShowResultView","_useState3","_useState4","isDisabledInstituicao","setIsDisabledInstituicao","_useState5","_useState6","isDisabledGrupo","setIsDisabledGrupo","_useState7","_useState8","listResult","setListResult","dispatch","useDispatch","_useForm","useForm","mode","reset","formProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","useEffect","globalParameter","grupoPlanoConta","setTimeout","grupoPlanoContaDestino","id","importarPlanoContaReferencial","getValues","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_11__","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","wikiId","_components_resultadoIntegracao_ResultadoIntegracao__WEBPACK_IMPORTED_MODULE_18__","assign","errorList","filter","it","success","successList","hidePrintButton","tabFailure","tabSuccess","reactstrap__WEBPACK_IMPORTED_MODULE_6__","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_7__","tag","Row","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","type","label","name","innerRef","register","reactstrap__WEBPACK_IMPORTED_MODULE_8__","_components_mcg_planoContaMCGReferencialInstituicao_PlanoContaMCGReferencialInstituicaoIS__WEBPACK_IMPORTED_MODULE_17__","placeholder","disabled","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_16__","handleSubmit","data","erros","grupoPlanoContaOrigem","Number","push","idInstituicao","validateExtras","length","params","message","AlertType","WARNING","alertManager","emit","ACTION_EVENTS","SHOW","progressActions","showProgress","animated","className","color","striped","value","dadosAjustados","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","importarPlanoConta","errorFunction","mensagem","hideProgress","showToast","ERROR","thenFunction","result","callImport","handleClose","goBack","dispatchClose","history","onClose","empresa","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","_step4","_iterator4","importarHistorico","importacaoHistorico","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado","CLASS_NAME","ResultadoIntegracao","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","activeTab","setActiveTab","columns","dataField","sort","text","defaultSorted","order","OrderType","ASC","toggleTab","target","tabIndex","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_5__","tabs","cx","active","onClick","tabId","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_4___default","bootstrap4","bordered","condensed","hover","keyField","noDataIndication","responsive","tabIndexCell","key","style","marginTop","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__","icon","printReport","GrupoPlanoContaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_2__","isPrependLabel","inputSearchProps","dtoClassName","searchViewId","InputType","INPUT_SEARCH","PlanoContaMCGReferencialInstituicaoIS"],"mappings":"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","file":"static/js/97.2b40da16.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  dispatchClose,\r\n  EditViewProps,\r\n  ErroList,\r\n  ERROR,\r\n  InputGroupInline,\r\n  ProcessBar,\r\n  progressActions,\r\n  showToast,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { RuleMessage } from '../../../../models/dtos/ger/ruleMessage';\r\nimport { ImportacaoPlanoConta } from '../../../../models/dtos/mcg/importacaoPlanoConta';\r\nimport { importarPlanoConta } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaMCGReferencialInstituicaoIS from '../../../components/mcg/planoContaMCGReferencialInstituicao/PlanoContaMCGReferencialInstituicaoIS';\r\nimport ResultadoIntegracao from '../../../components/resultadoIntegracao/ResultadoIntegracao';\r\n\r\ninterface ImportacaoPlanoContaProcessViewProps extends EditViewProps<ImportacaoPlanoConta> {}\r\n\r\nconst ImportacaoPlanoContaCSVProcessView: FC<ImportacaoPlanoContaProcessViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const [showResultView, setShowResultView] = useState(false);\r\n\r\n  const [isDisabledInstituicao, setIsDisabledInstituicao] = useState(false);\r\n\r\n  const [isDisabledGrupo, setIsDisabledGrupo] = useState(true);\r\n\r\n  const [listResult, setListResult] = useState<RuleMessage[]>([]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { reset, ...formProps } = useForm<ImportacaoPlanoConta>({ mode: 'onBlur' });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.grupoPlanoConta !== null) {\r\n        const { grupoPlanoConta } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          reset({\r\n            grupoPlanoContaDestino: { id: grupoPlanoConta.id },\r\n            importarPlanoContaReferencial: true,\r\n          });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (formProps.getValues().importarPlanoContaReferencial) {\r\n        setIsDisabledGrupo(true);\r\n        setIsDisabledInstituicao(false);\r\n      } else {\r\n        setIsDisabledGrupo(false);\r\n        setIsDisabledInstituicao(true);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [formProps.getValues().importarPlanoContaReferencial]\r\n  );\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  const handleImport = (data: ImportacaoPlanoConta) => {\r\n    const erros = validateExtras();\r\n    if (erros.length > 0) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      dispatch(\r\n        progressActions.showProgress({\r\n          animated: true,\r\n          className: 'progress-bar-rounded progress-animated-alt',\r\n          color: 'first',\r\n          label: 'Aguarde processando...',\r\n          striped: true,\r\n          value: 100,\r\n        })\r\n      );\r\n      callImport(data);\r\n    }\r\n  };\r\n\r\n  function callImport(data: ImportacaoPlanoConta): void {\r\n    // @ts-ignore\r\n    const dadosAjustados = { ...data, idInstituicao: data.idInstituicao.id, grupoPlanoContaOrigem: data.grupoPlanoContaOrigem || null };\r\n    importarPlanoConta(dadosAjustados, {\r\n      errorFunction: mensagem => {\r\n        dispatch(progressActions.hideProgress());\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: (result: RuleMessage[]) => {\r\n        dispatch(progressActions.hideProgress());\r\n        setListResult(result);\r\n        setShowResultView(true);\r\n      },\r\n    });\r\n  }\r\n\r\n  function validateExtras(): string[] {\r\n    const erros = [];\r\n    if (formProps.getValues().grupoPlanoContaOrigem) {\r\n      if (formProps.getValues().grupoPlanoContaOrigem.id === Number(formProps.getValues()['grupoPlanoContaDestino.id'])) {\r\n        erros.push('O Grupo de Plano de Contas de Origem não pode ser igual ao Grupo de Plano de Contas de Destino');\r\n      }\r\n    }\r\n\r\n    if (!formProps.getValues().grupoPlanoContaOrigem && !formProps.getValues().importarPlanoContaReferencial) {\r\n      erros.push(\r\n        'A importação deve ser realizada selecionando um Grupo de Plano de Contas de Origem ou marcando a opções de Importar pelo Plano de Contas Referencial'\r\n      );\r\n    }\r\n\r\n    if (formProps.getValues().importarPlanoContaReferencial && !formProps.getValues().idInstituicao) {\r\n      erros.push('A Instituição é de preenchimento obrigatório');\r\n    }\r\n\r\n    return erros;\r\n  }\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Importação Plano de Contas\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={686}\r\n    >\r\n      {showResultView ? (\r\n        <ResultadoIntegracao\r\n          {...props}\r\n          errorList={listResult.filter(it => !it.success)}\r\n          successList={listResult.filter(it => it.success)}\r\n          hidePrintButton={true}\r\n          tabFailure=\"Registros Rejeitados\"\r\n          tabSuccess=\"Registros Aceitos\"\r\n        />\r\n      ) : (\r\n        <Form>\r\n          <InputGroupInline id=\"grupoPlanoContaDestino.id\" hidden={true} formProps={formProps} />\r\n          <FormGroup tag={Row}>\r\n            <Col>\r\n              <CustomInput\r\n                type=\"switch\"\r\n                label=\"Importar do Plano de Contas Referencial\"\r\n                name=\"importarPlanoContaReferencial\"\r\n                id=\"importarPlanoContaReferencial\"\r\n                innerRef={formProps.register}\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n          <Row>\r\n            <Col>\r\n              <PlanoContaMCGReferencialInstituicaoIS\r\n                formProps={formProps}\r\n                id=\"idInstituicao\"\r\n                label=\"Instituição\"\r\n                placeholder=\"Informe a Instituição\"\r\n                disabled={isDisabledInstituicao}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <GrupoPlanoContaIS\r\n                formProps={formProps}\r\n                id=\"grupoPlanoContaOrigem\"\r\n                label=\"Grupo Plano de Contas de Origem\"\r\n                placeholder=\"Informe o Grupo Plano de Contas de Origem\"\r\n                disabled={isDisabledGrupo}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <ProcessBar handleSubmit={formProps.handleSubmit(handleImport)} handleClose={handleCancel} />\r\n        </Form>\r\n      )}\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ImportacaoPlanoContaCSVProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport cx from 'clsx';\r\nimport React, { FC, MouseEvent, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Button, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';\r\nimport { ColumnsProps, DefaultSortProps, dispatchClose, OrderType } from 'summer';\r\n\r\nexport interface ResultadoIntegracaoProps {\r\n  /** Lista de erros da integração */\r\n  errorList?: any[];\r\n  /** Lista de sucessos da integração */\r\n  successList?: any[];\r\n  /** History do navegador */\r\n  history?: any;\r\n  /** Relatório a ser impresso */\r\n  printReport?: any;\r\n  /** Oculta o botão para imprimir o relatório */\r\n  hidePrintButton?: boolean | false;\r\n  /** Texto da aba de sucesso */\r\n  tabSuccess?: string;\r\n  /** Texto da aba de falhas */\r\n  tabFailure?: string;\r\n}\r\n\r\nconst ResultadoIntegracao: FC<ResultadoIntegracaoProps> = props => {\r\n  const [activeTab, setActiveTab] = useState(1);\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'message',\r\n      sort: true,\r\n      text: 'Descrição',\r\n    },\r\n  ];\r\n\r\n  const defaultSorted: DefaultSortProps[] = [\r\n    {\r\n      dataField: 'message',\r\n      order: OrderType.ASC,\r\n    },\r\n  ];\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  const toggleTab = ({ target }: MouseEvent) => {\r\n    const { tabIndex } = target as HTMLElement;\r\n    if (activeTab !== tabIndex) {\r\n      setActiveTab(tabIndex);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Nav tabs={true}>\r\n        <NavItem>\r\n          <NavLink className={cx({ active: activeTab === 1 })} tabIndex={1} onClick={toggleTab}>\r\n            {props.tabSuccess || 'Sucessos'}\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink className={cx({ active: activeTab === 2 })} tabIndex={2} onClick={toggleTab}>\r\n            {props.tabFailure || 'Falhas'}\r\n          </NavLink>\r\n        </NavItem>\r\n      </Nav>\r\n      <TabContent className=\"mb-5\" activeTab={activeTab}>\r\n        <TabPane tabId={1} className=\"mb-0 p-3\">\r\n          <div className=\"table-area\">\r\n            <BootstrapTable\r\n              bootstrap4={true}\r\n              bordered={true}\r\n              columns={columns}\r\n              condensed={true}\r\n              className=\"table-scroll\"\r\n              data={props.successList || []}\r\n              defaultSorted={defaultSorted}\r\n              hover={true}\r\n              keyField=\"id\"\r\n              noDataIndication=\"Nenhum registro a ser exibido.\"\r\n              responsive={true}\r\n              striped={true}\r\n              tabIndexCell={true}\r\n            />\r\n          </div>\r\n          <div key=\"divFotterKey\" className=\"text-left\">\r\n            Registros: {props.successList.length}\r\n          </div>\r\n        </TabPane>\r\n        <TabPane tabId={2} className=\"mb-0 p-3\">\r\n          <div className=\"table-area\">\r\n            <BootstrapTable\r\n              bootstrap4={true}\r\n              bordered={true}\r\n              columns={columns}\r\n              condensed={true}\r\n              className=\"table-scroll\"\r\n              data={props.errorList || []}\r\n              defaultSorted={defaultSorted}\r\n              hover={true}\r\n              keyField=\"id\"\r\n              noDataIndication=\"Nenhum registro a ser exibido.\"\r\n              responsive={true}\r\n              striped={true}\r\n              tabIndexCell={true}\r\n            />\r\n          </div>\r\n          <div key=\"divFotterKey\" className=\"text-left\">\r\n            Registros: {props.errorList.length}\r\n          </div>\r\n        </TabPane>\r\n      </TabContent>\r\n\r\n      <div className=\"float-right\" style={{ marginTop: 10 }}>\r\n        <Button color=\"danger\" className=\"mr-2\" onClick={handleCancel}>\r\n          <FontAwesomeIcon icon=\"times\" /> Cancelar\r\n        </Button>\r\n      </div>\r\n      {props.hidePrintButton ? null : (\r\n        <div className=\"float-left\" style={{ marginTop: 10 }}>\r\n          <Button className=\"mr-2\" disabled={props.errorList.length === 0} onClick={props.printReport} color=\"success\">\r\n            <FontAwesomeIcon icon=\"paste\" /> Imprimir Falhas\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultadoIntegracao;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import { Basic } from 'summer';\r\n\r\nexport interface PlanoContaReferencialInstituicao extends Basic {\r\n  codigo?: string;\r\n  instituicao?: string;\r\n  codigoECD?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencialinstituicao';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaReferencialInstituicao';\r\n\r\nconst PlanoContaMCGReferencialInstituicaoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'instituicao',\r\n            text: 'Instituição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaMCGReferencialInstituicaoSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Referencial'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas Referencial'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaMCGReferencialInstituicaoIS;\r\n"],"sourceRoot":""}