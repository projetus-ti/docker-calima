{"version":3,"sources":["models/enumerated/mcg/situacaoEspecialFCONTEnum.ts","models/enumerated/mcg/tipoEscrituracaoFCONTEnum.ts","views/pages/mcg/exportacaoFcont/ExportacaoFcontProcessView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","models/enumerated/ger/tipoTributacaoEnum.ts","models/enumerated/mcg/lalurBMCGTipoEmissaoEnum.ts","models/enumerated/mfp/tipoTributacaoRealFCONTEnum.ts"],"names":["SITUACAO_ESPECIAL_FCONT_ENUM_VALUES","value","label","RETIFICADO","TIPO_ESCRITURACAO_FCONT_ENUM_VALUES","ExportacaoFcontProcessView","props","globalReducer","useSelector","state","headerDrawerToggle","_useForm","useForm","mode","reset","formProps","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","isDisabledDataSPED","setIsDisabledDataSPED","_useState3","_useState4","isHiddenNumReciboAnterior","setIsHiddenNumReciboAnterior","_useState5","_useState6","isConsiderarDataAlteracaoSped","setIsConsiderarDataAlteracaoSped","_useState7","globalParameter","empresaMCG","emissaoLalur","dispatch","useDispatch","useEffect","empresa","_globalReducer$global","refAtual","erros","validateInfo","length","params","message","react_default","a","createElement","summer_esm","headerMessage","onOkClick","onClose","type","AlertType","INFORMATION","alertManager","emit","ACTION_EVENTS","SHOW","setTimeout","ano","format","parseRefToDate","idGerEmpresa","id","goBack","dispatchClose","history","tipoTributacao","LUCRO_REAL","push","forTribFCONT","REAL","ANUAL","validateExtras","dataMaximaPadrao","isEmpty","getValues","dataPadraoAlteracaoSPED","toDate","title","useGlobalParameter","dependencies","hasGrupoEmpresaConfig","hasEmpresa","hasEmpresaMCG","wikiId","Form","hidden","Row","Col","isPrependLabel","InputType","NUMBER","style","marginBottom","CustomInput","name","innerRef","register","objectSpread2","validation","required","inputDropDownProps","optionsProvider","placeholder","DROP_DOWN","onChange","tipoEscrituracao","maxLength","FormGroup","tag","xs","checked","setValue","DATE","disabled","handleSubmit","data","WARNING","gerarFCONTContabil","errorFunction","mensagem","showToast","ERROR","thenFunction","toggleHeaderDrawer","handleClose","result","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado","SIMPLES_NACIONAL","TIPO_TRIBUTACAO_ENUM_VALUES","AUTOMATIZACAO_EMPRESA_VALUES","TRIBUTACAO_LUCRO_REAL_ENUM_VALUES","LUCRO_REAL_ARBITRADO","LUCRO_PRESUMIDO_REAL_ARBITRADO","LUCRO_PRESUMIDO","IMUNE","ISENTO","TRIMESTRAL","LALURB_MCG_TIPO_EMISSAO_ENUM_VALUES","TIPO_TRIBUTACAO_REAL_FCONT_ENUM_VALUES"],"mappings":"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","file":"static/js/150.391afec9.chunk.js","sourcesContent":["export const CISAO = { value: '1', label: 'Cisão' };\r\nexport const FUSAO = { value: '2', label: 'Fusão' };\r\nexport const INCORPORACAO = { value: '3', label: 'Incorporação' };\r\nexport const ENCERRAMENTO = { value: '4', label: 'Encerramento' };\r\n\r\nexport const SITUACAO_ESPECIAL_FCONT_ENUM_VALUES = [CISAO, FUSAO, INCORPORACAO, ENCERRAMENTO];\r\n","export const ORIGINAL = { value: '0', label: 'Original' };\r\nexport const RETIFICADO = { value: '1 ', label: 'Retificado' };\r\n\r\nexport const TIPO_ESCRITURACAO_FCONT_ENUM_VALUES = [ORIGINAL, RETIFICADO];\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  Box,\r\n  dispatchClose,\r\n  EditViewProps,\r\n  ErroList,\r\n  ERROR,\r\n  format,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  parseRefToDate,\r\n  ProcessBar,\r\n  showToast,\r\n  toDate,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { Empresa } from '../../../../models/dtos/ger/empresa';\r\nimport { EmpresaMCG } from '../../../../models/dtos/mcg/empresaMCG';\r\nimport { FCONTContabilCrit } from '../../../../models/dtos/mcg/fContContabilCrit';\r\nimport { LUCRO_REAL } from '../../../../models/enumerated/ger/tipoTributacaoEnum';\r\nimport { ANUAL } from '../../../../models/enumerated/mcg/lalurBMCGTipoEmissaoEnum';\r\nimport { SITUACAO_ESPECIAL_FCONT_ENUM_VALUES } from '../../../../models/enumerated/mcg/situacaoEspecialFCONTEnum';\r\nimport { RETIFICADO, TIPO_ESCRITURACAO_FCONT_ENUM_VALUES } from '../../../../models/enumerated/mcg/tipoEscrituracaoFCONTEnum';\r\nimport { REAL } from '../../../../models/enumerated/mfp/tipoTributacaoRealFCONTEnum';\r\nimport { gerarFCONTContabil } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState, toggleHeaderDrawer } from '../../../../store/ducks/global.duck';\r\n\r\ninterface ExportacaoFcontProcessViewProps extends EditViewProps<FCONTContabilCrit> {}\r\n\r\nconst ExportacaoFcontProcessView: FC<ExportacaoFcontProcessViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { headerDrawerToggle } = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { reset, ...formProps } = useForm<FCONTContabilCrit>({ mode: 'onBlur' });\r\n  const [isDisabledDataSPED, setIsDisabledDataSPED] = useState(true);\r\n  const [isHiddenNumReciboAnterior, setIsHiddenNumReciboAnterior] = useState(false);\r\n  const [isConsiderarDataAlteracaoSped, setIsConsiderarDataAlteracaoSped] = useState(false);\r\n  const [emissaoLalur] = useState(globalReducer.globalParameter.empresaMCG.emissaoLalur);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresaMCG !== null && globalReducer.globalParameter.empresa != null) {\r\n        const {\r\n          empresaMCG: { refAtual },\r\n          empresa,\r\n        } = globalReducer.globalParameter;\r\n        const erros = validateInfo();\r\n        if (erros.length > 0) {\r\n          const params: AlertProps = {\r\n            message: <ErroList headerMessage=\"Existem pendências que impendem a execução da sua solicitação. Lista de pendencias:\" erros={erros} />,\r\n            onOkClick: () => onClose(),\r\n            type: AlertType.INFORMATION,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        }\r\n        setTimeout(() => {\r\n          reset({\r\n            ano: format(parseRefToDate(refAtual, 1), 'YYYY'),\r\n            idGerEmpresa: empresa.id,\r\n          });\r\n        }, 400);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n  const onChangeTipoEscrituracao = () => {\r\n    if (!isEmpty(formProps.getValues().tipoEscrituracao)) {\r\n      if (formProps.getValues().tipoEscrituracao === RETIFICADO.value) {\r\n        setIsHiddenNumReciboAnterior(false);\r\n      } else {\r\n        setIsHiddenNumReciboAnterior(true);\r\n      }\r\n    }\r\n  };\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  const validateInfo = (): string[] => {\r\n    const erros = [];\r\n    const empresa: Empresa = globalReducer.globalParameter.empresa;\r\n    const empresaMCG: EmpresaMCG = globalReducer.globalParameter.empresaMCG;\r\n\r\n    if (!empresa.tipoTributacao || empresa.tipoTributacao !== LUCRO_REAL.value) {\r\n      erros.push(\r\n        'Para a geração do FCONT a Empresa deve possuir Tributação do Tipo Lucro Real, configurado no cadastro de Empresa do Módulo Principal.'\r\n      );\r\n    }\r\n\r\n    if (!empresa.forTribFCONT) {\r\n      erros.push('Para a geração do FCONT é obrigatório o preenchimento do campo Trib. Real (FCONT) no cadastro de Empresa do Módulo Principal.');\r\n    }\r\n\r\n    if (empresa.forTribFCONT !== REAL.value && empresaMCG.emissaoLalur === ANUAL.value) {\r\n      erros.push(\r\n        'Em empresas cujo a Forma de Tributação é Anual o  Trib. Real (FCONT) deve ser Real. Verifique no Cadastro de Empresa do Módulo Contábil.'\r\n      );\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  function callExport(data: FCONTContabilCrit): void {\r\n    const erros = validateExtras();\r\n    if (erros.length > 0) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      gerarFCONTContabil(data, {\r\n        errorFunction: mensagem => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: () => {\r\n          if (!headerDrawerToggle) {\r\n            dispatch(toggleHeaderDrawer());\r\n          }\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  const changeConsidDataAlteracaoSped = () => {\r\n    if (isConsiderarDataAlteracaoSped) {\r\n      setIsDisabledDataSPED(true);\r\n      setIsConsiderarDataAlteracaoSped(false);\r\n      formProps.setValue('dataPadraoAlteracaoSPED', ' ', true);\r\n    } else {\r\n      setIsDisabledDataSPED(false);\r\n      setIsConsiderarDataAlteracaoSped(true);\r\n      formProps.setValue('dataPadraoAlteracaoSPED', format(parseRefToDate(globalReducer.globalParameter.empresaMCG.refAtual, 0), 'DD/MM/YYYY'), true);\r\n    }\r\n  };\r\n\r\n  const validateExtras = (): string[] => {\r\n    const erros = [];\r\n    const dataMaximaPadrao = parseRefToDate(globalReducer.globalParameter.empresaMCG.refAtual, 0);\r\n    const ano = format(parseRefToDate(globalReducer.globalParameter.empresaMCG.refAtual, 1), 'YYYY');\r\n\r\n    if (isConsiderarDataAlteracaoSped) {\r\n      if (isEmpty(formProps.getValues().dataPadraoAlteracaoSPED)) {\r\n        erros.push('A Data Padrão de Alteração do SPED não pode estar em branco.');\r\n      }\r\n\r\n      if (toDate(formProps.getValues().dataPadraoAlteracaoSPED) > dataMaximaPadrao) {\r\n        erros.push('A Data Padrão de Alteração deve ser anterior ao período de apuração do FCONT, iniciado em 01/01/' + ano);\r\n      }\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de FCONT\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={226}\r\n    >\r\n      <Form>\r\n        <InputGroupInline formProps={formProps} id=\"idGerEmpresa\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline id=\"ano\" formProps={formProps} isPrependLabel={true} label=\"Ano\" type={InputType.NUMBER} />\r\n          </Col>\r\n        </Row>\r\n        {emissaoLalur === 'T' && (\r\n          <Row>\r\n            <Col style={{ marginBottom: '30px' }}>\r\n              <Box title=\"Tipo\">\r\n                <Row style={{ marginBottom: '10px' }}>\r\n                  <Col>\r\n                    <CustomInput type=\"switch\" value={'1'} id=\"trimestres1\" name=\"trimestres\" label=\"1º Trimestre\" innerRef={formProps.register} />\r\n                  </Col>\r\n                  <Col>\r\n                    <CustomInput type=\"switch\" value={'2'} id=\"trimestres2\" name=\"trimestres\" label=\"2º Trimestre\" innerRef={formProps.register} />\r\n                  </Col>\r\n                  <Col>\r\n                    <CustomInput type=\"switch\" value={'3'} id=\"trimestres3\" name=\"trimestres\" label=\"3º Trimestre\" innerRef={formProps.register} />\r\n                  </Col>\r\n                  <Col>\r\n                    <CustomInput type=\"switch\" value={'4'} id=\"trimestres4\" name=\"trimestres\" label=\"4º Trimestre\" innerRef={formProps.register} />\r\n                  </Col>\r\n                </Row>\r\n              </Box>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"tipoEscrituracao\"\r\n              inputDropDownProps={{ optionsProvider: TIPO_ESCRITURACAO_FCONT_ENUM_VALUES }}\r\n              isPrependLabel={true}\r\n              label=\"Tipo de Escrituração\"\r\n              placeholder=\"Informe a Tipo de Escrituração\"\r\n              type={InputType.DROP_DOWN}\r\n              onChange={onChangeTipoEscrituracao}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"situacaoEspecial\"\r\n              inputDropDownProps={{ optionsProvider: SITUACAO_ESPECIAL_FCONT_ENUM_VALUES }}\r\n              isPrependLabel={true}\r\n              label=\"Situação Especial\"\r\n              placeholder=\"Informe a Situação Especial\"\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        {isHiddenNumReciboAnterior && (\r\n          <Row>\r\n            <Col>\r\n              <InputGroupInline\r\n                id=\"numReciboAnterior\"\r\n                isPrependLabel={true}\r\n                formProps={{ ...formProps, validation: { maxLength: 40, required: true } }}\r\n                label=\" Nº do Recibo Anterior.\"\r\n                placeholder=\"Informe o Nº do Recibo Anterior.\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n        )}\r\n        <FormGroup tag={Row}>\r\n          <Col xs={3}>\r\n            <CustomInput\r\n              id=\"isConsiderarDataAlteracaoSped\"\r\n              label=\"Definir Alteração SPED Padrão\"\r\n              name=\"isEmpresasSelecionadas\"\r\n              type=\"switch\"\r\n              checked={isConsiderarDataAlteracaoSped}\r\n              onChange={changeConsidDataAlteracaoSped}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <InputGroupInline\r\n              id=\"dataPadraoAlteracaoSPED\"\r\n              formProps={formProps}\r\n              isPrependLabel={true}\r\n              label=\"Data Padrão Alteração do SPED\"\r\n              type={InputType.DATE}\r\n              disabled={isDisabledDataSPED}\r\n            />\r\n          </Col>\r\n        </FormGroup>\r\n        <ProcessBar handleSubmit={formProps.handleSubmit(callExport)} handleClose={handleCancel} />\r\n      </Form>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ExportacaoFcontProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","export const LUCRO_REAL = { value: 'lucroReal', label: 'Lucro Real' };\r\nexport const LUCRO_REAL_ARBITRADO = { value: 'lucroRealArbitrado', label: 'Lucro Real/Arbitrado' };\r\nexport const LUCRO_PRESUMIDO_REAL = { value: 'lucroPresumidoReal', label: 'Lucro Presumido/Real' };\r\nexport const LUCRO_PRESUMIDO_REAL_ARBITRADO = { value: 'lucroPresumidoRealArbitrado', label: 'Lucro Presumido/Real/Arbitrado' };\r\nexport const LUCRO_PRESUMIDO = { value: 'lucroPresumido', label: 'Lucro Presumido' };\r\nexport const LUCRO_ARBITRADO = { value: 'lucroArbitrado', label: 'Lucro Arbitrado' };\r\nexport const LUCRO_PRESUMIDO_ARBITRADO = { value: 'lucroPresumidoArbitrado', label: 'Lucro Presumido/Arbitrado' };\r\nexport const IMUNE = { value: 'imune', label: 'Imune do IRPJ' };\r\nexport const ISENTO = { value: 'isento', label: 'Isenta do IRPJ' };\r\nexport const SIMPLES_NACIONAL = { value: 'simplesNacional', label: 'Simples Nacional' };\r\n\r\nexport const TIPO_TRIBUTACAO_ENUM_VALUES = [\r\n  IMUNE,\r\n  ISENTO,\r\n  LUCRO_ARBITRADO,\r\n  LUCRO_PRESUMIDO,\r\n  LUCRO_PRESUMIDO_ARBITRADO,\r\n  LUCRO_PRESUMIDO_REAL,\r\n  LUCRO_PRESUMIDO_REAL_ARBITRADO,\r\n  LUCRO_REAL,\r\n  LUCRO_REAL_ARBITRADO,\r\n  SIMPLES_NACIONAL,\r\n];\r\n\r\nexport const AUTOMATIZACAO_EMPRESA_VALUES = [LUCRO_REAL, LUCRO_PRESUMIDO, ISENTO, IMUNE, SIMPLES_NACIONAL];\r\n\r\nexport const TRIBUTACAO_LUCRO_REAL_ENUM_VALUES = [LUCRO_REAL, LUCRO_REAL_ARBITRADO, LUCRO_PRESUMIDO_REAL_ARBITRADO];\r\n","export const ANUAL = { label: 'Anual', value: 'A' };\r\nexport const TRIMESTRAL = { label: 'Trimestral', value: 'T' };\r\n\r\nexport const LALURB_MCG_TIPO_EMISSAO_ENUM_VALUES = [ANUAL, TRIMESTRAL];\r\n","export const REAL = { label: 'Real', value: 'real' };\r\nexport const REAL_ARBITRADO = { label: 'Real Arbitrado', value: 'realArbitrado' };\r\nexport const REAL_TRIMESTRE = { label: 'Real Presumido (Trimestre)', value: 'realTrimestre' };\r\nexport const REAL_ARBITRADO_TRIMESTRE = { label: 'Real Presumido Arbitrado (Trimestre)', value: 'realArbitradoTrimestre' };\r\n\r\nexport const TIPO_TRIBUTACAO_REAL_FCONT_ENUM_VALUES = [REAL, REAL_ARBITRADO, REAL_TRIMESTRE, REAL_ARBITRADO_TRIMESTRE];\r\n"],"sourceRoot":""}