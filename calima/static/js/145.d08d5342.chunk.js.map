{"version":3,"sources":["views/pages/mcg/importacaoExtratoBancario/ImportacaoExtratoBancarioView.tsx","dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/mcg/contaHistorico.ts","views/pages/mcg/historicoExtratoPlanoConta/HistoricoExtratoPlanoContaEditView.tsx"],"names":["ImportacaoExtratoBancarioView","props","globalReducer","useSelector","state","formProps","useForm","mode","_useState","useState","_useState2","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","bancoExtrato","setbancoExtrato","_useState3","_useState4","selectedItems","setSelectedItems","_useState5","_useState6","abrirVincularHistorico","setAbrirVincularHistorico","_useState7","_useState8","isHiddenUtilizarContaHistorico","setIsHiddenUtilizarContaHistorico","_useState9","_useState10","isGerarLancamento","setIsGerarLancamento","dispatch","useDispatch","defaultSorted","dataField","order","OrderType","ASC","bancoExtratoColumns","hidden","text","editable","sort","formatter","cell","row","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_7__","id","doc","color","onClick","openVincularHistorico","className","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__","icon","reactstrap__WEBPACK_IMPORTED_MODULE_8__","target","placement","headerAlign","style","backgroundColor","textAlign","selectRow","clickToSelect","SelectModeEnum","RADIO","onSelect","historico","contaSelecionadaObterPlanoConta","getValues","planoConta","bancoPlanoConta","idEmpresaSelecionada","globalParameter","empresa","idGrupoPlanoConta","obterBancoPlanoConta","errorFunction","mensagem","showToast","ERROR","thenFunction","bancoMCG","isEmpty","obterDadosArquivoExtrato","arquivoSelecionado","bancoExtratoResult","progressActions","hideProgress","importarArquivo","propToolTip","messagem","message","useEffect","openMultiPage","HistoricoExtratoPlanoContaEditView","componente","executeSearch","Page","pageProps","history","location","match","selectedItem","multiPageActions","showPage","summer__WEBPACK_IMPORTED_MODULE_14__","title","useGlobalParameter","wikiId","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_17__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","reactstrap__WEBPACK_IMPORTED_MODULE_12__","tag","Row","reactstrap__WEBPACK_IMPORTED_MODULE_13__","innerRef","register","label","type","name","checked","onChange","setValue","withTooltip","disabled","acceptedTypes","isMultiple","limitSizeBytes","SIZE_ONE_HUNDRED_BYTES","propImageName","maxFiles","handleSubmit","erros","push","validateExtras","length","params","AlertType","WARNING","alertManager","emit","ACTION_EVENTS","SHOW","showProgress","animated","striped","value","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_4___default","bordered","columns","condensed","data","hover","keyField","noDataIndication","responsive","tabIndexCell","hasEmpresa","result","__webpack_require__","d","__webpack_exports__","hasEmpresaMCG","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","PlanoContaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","isPrependLabel","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","dtoClassName","CLASS_NAME","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","grupoPlanoConta","forEach","filtro","searchViewId","placeholder","InputType","INPUT_SEARCH","_useForm","reset","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","setTimeout","historicoExtrato","react__WEBPACK_IMPORTED_MODULE_2___default","summer__WEBPACK_IMPORTED_MODULE_7__","dependencies","editViewProps","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_11__","maxLength","tooltipProps"],"mappings":"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","file":"static/js/145.d08d5342.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Button, Col, CustomInput, Form, FormGroup, Row, UncontrolledTooltip } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  Box,\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  EditViewProps,\r\n  ErroList,\r\n  ERROR,\r\n  FileInputPreview,\r\n  InputTooltipProps,\r\n  isEmpty,\r\n  OrderType,\r\n  progressActions,\r\n  SelectModeEnum,\r\n  showToast,\r\n  SIZE_ONE_HUNDRED_BYTES,\r\n  Tab,\r\n  TabGroup,\r\n  WindowComponent,\r\n  withTooltip,\r\n} from 'summer';\r\nimport { BancoExtrato } from '../../../../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../../../../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../../../../models/dtos/mcg/bancoPlanoConta';\r\nimport { ImportacaoExtratoBancario } from '../../../../models/dtos/mcg/importacaoExtratoBancario';\r\nimport { obterBancoPlanoConta, obterDadosArquivoExtrato } from '../../../../services/mcg.service';\r\nimport { multiPageActions, Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport HistoricoExtratoPlanoContaEditView from '../historicoExtratoPlanoConta/HistoricoExtratoPlanoContaEditView';\r\n\r\ninterface ImportacaoExtratoBancarioViewProps extends EditViewProps<ImportacaoExtratoBancario> {}\r\n\r\nconst ImportacaoExtratoBancarioView: FC<ImportacaoExtratoBancarioViewProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<ImportacaoExtratoBancario>({ mode: 'onBlur' });\r\n\r\n  const [bancoExtrato, setbancoExtrato] = useState<BancoExtrato[]>([]);\r\n  const [selectedItems, setSelectedItems] = useState('');\r\n  const [abrirVincularHistorico, setAbrirVincularHistorico] = useState(false);\r\n  const [isHiddenUtilizarContaHistorico, setIsHiddenUtilizarContaHistorico] = useState(true);\r\n  const [isGerarLancamento, setIsGerarLancamento] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const MAX_FILES: number = 1;\r\n\r\n  const defaultSorted: DefaultSortProps[] = [\r\n    {\r\n      dataField: 'doc',\r\n      order: OrderType.ASC,\r\n    },\r\n  ];\r\n\r\n  const bancoExtratoColumns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'rowNumber',\r\n      hidden: true,\r\n      text: 'Row Number',\r\n    },\r\n    {\r\n      dataField: 'dataMov',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Data',\r\n    },\r\n    {\r\n      dataField: 'historico',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Histórico',\r\n    },\r\n    {\r\n      dataField: 'doc',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Doc',\r\n    },\r\n    {\r\n      dataField: 'valor',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Valor',\r\n    },\r\n    {\r\n      dataField: 'actions',\r\n      formatter: (cell, row) => {\r\n        return (\r\n          <Button\r\n            id={'buttonEdit' + row.doc}\r\n            color=\"neutral-secondary\"\r\n            onClick={openVincularHistorico}\r\n            className=\"btn-pill d-30 p-0 align-top btn-animated-icon btn-animated-icon--secondary\"\r\n          >\r\n            <span className=\"btn-wrapper--icon\">\r\n              <FontAwesomeIcon color={'black'} icon={'pen'} />\r\n            </span>\r\n            <UncontrolledTooltip target={'buttonEdit' + row.doc} placement=\"top\">\r\n              Vincular Histórico\r\n            </UncontrolledTooltip>\r\n          </Button>\r\n        );\r\n      },\r\n      headerAlign: () => {\r\n        return 'center';\r\n      },\r\n      style: (cell, row) => {\r\n        return { backgroundColor: row.color, color: 'white', textAlign: 'center' };\r\n      },\r\n      text: 'Víncular Histórico',\r\n    },\r\n  ];\r\n\r\n  const selectRow = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.RADIO,\r\n    onSelect: row => {\r\n      setSelectedItems(row.historico);\r\n    },\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      label: 'Aguarde processando...',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const validateContaSelecionadaObterPlanoConta = () => {\r\n    const erros = validateExtras();\r\n    if (erros.length > 0) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      dispatch(showLoading());\r\n      contaSelecionadaObterPlanoConta();\r\n    }\r\n  };\r\n\r\n  const contaSelecionadaObterPlanoConta = () => {\r\n    if (formProps.getValues().planoConta) {\r\n      const bancoPlanoConta: BancoPlanoConta = {\r\n        idEmpresaSelecionada: globalReducer.globalParameter.empresa.id,\r\n        idGrupoPlanoConta: formProps.getValues().planoConta.id,\r\n      };\r\n      obterBancoPlanoConta(bancoPlanoConta, {\r\n        errorFunction: (mensagem: string): void => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: (bancoMCG: BancoMCG): void => {\r\n          if (!isEmpty(bancoMCG)) {\r\n            importarArquivo(bancoMCG);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  function importarArquivo(bancoMCG: BancoMCG): void {\r\n    obterDadosArquivoExtrato(formProps.getValues().arquivoSelecionado, bancoMCG.id, {\r\n      thenFunction: (bancoExtratoResult: BancoExtrato[]) => {\r\n        setbancoExtrato(bancoExtratoResult);\r\n        dispatch(progressActions.hideProgress());\r\n      },\r\n    });\r\n  }\r\n\r\n  function validateExtras(): string[] {\r\n    const erros = [];\r\n    if (isEmpty(formProps.getValues().arquivoSelecionado)) {\r\n      erros.push('Nenhum Arquivo selecionado');\r\n    }\r\n\r\n    return erros;\r\n  }\r\n\r\n  const propToolTip = (messagem: string): InputTooltipProps => {\r\n    return {\r\n      message: messagem,\r\n      placement: 'top-start',\r\n    };\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (abrirVincularHistorico && !isEmpty(selectedItems)) {\r\n        openMultiPage(HistoricoExtratoPlanoContaEditView, true);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [selectedItems, abrirVincularHistorico]\r\n  );\r\n\r\n  const openVincularHistorico = () => {\r\n    setAbrirVincularHistorico(true);\r\n  };\r\n\r\n  const openMultiPage = (componente: any, executeSearch: boolean) => {\r\n    const Page = componente as FC<any>;\r\n    const pageProps = {\r\n      executeSearch,\r\n      history: props.history,\r\n      location: props.location,\r\n      match: props.match,\r\n      selectedItem: selectedItems,\r\n    };\r\n    dispatch(multiPageActions.showPage(<Page {...pageProps} />));\r\n  };\r\n  const changeGerarLancamento = () => {\r\n    if (isGerarLancamento) {\r\n      setIsHiddenUtilizarContaHistorico(true);\r\n      setIsGerarLancamento(false);\r\n      formProps.setValue('isUtilizarContaHistorico', false, true);\r\n    } else {\r\n      setIsHiddenUtilizarContaHistorico(false);\r\n      setIsGerarLancamento(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"Importação Extrato Bancário\" useGlobalParameter={true} globalParameter={globalReducer.globalParameter} wikiId={173}>\r\n      <Form>\r\n        <Box>\r\n          <Row>\r\n            <Col>\r\n              <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n            </Col>\r\n          </Row>\r\n          <FormGroup tag={Row} className=\"mt-2\">\r\n            <Col>\r\n              <CustomInput\r\n                id=\"idgerarLancamento\"\r\n                innerRef={formProps.register}\r\n                label=\"Selecione para gerar Lançamentos Contábeis para cada transação do Extrato.\"\r\n                type=\"switch\"\r\n                name=\"isGerarLancamento\"\r\n                checked={isGerarLancamento}\r\n                onChange={changeGerarLancamento}\r\n              />\r\n              {withTooltip(\r\n                propToolTip(\r\n                  'Caso o campo seja marcado, os Lançamentos Contábeis anteriores serão sobrescritos. Essa ação não sobrescreve os Planos de Contas importados anteriormente.'\r\n                ),\r\n                'gerarLancamento'\r\n              )}\r\n            </Col>\r\n            <Col>\r\n              <CustomInput\r\n                id=\"idutilizarContaHistorico\"\r\n                innerRef={formProps.register}\r\n                label=\"Utilizar Conta Vinculada ao Histórico do Extrato\"\r\n                type=\"switch\"\r\n                name=\"isUtilizarContaHistorico\"\r\n                disabled={isHiddenUtilizarContaHistorico}\r\n              />\r\n              {withTooltip(\r\n                propToolTip(\r\n                  'Caso exista uma conta Vinculada ao Histórico do Extrato, essa será utilizada nos Lançamentos Contábeis para cada Transação do Extrato.'\r\n                ),\r\n                'utilizarContaHistorico'\r\n              )}\r\n            </Col>\r\n          </FormGroup>\r\n          <Row>\r\n            <Col>\r\n              <FileInputPreview\r\n                acceptedTypes=\".ofx\"\r\n                formProps={formProps}\r\n                isMultiple={true}\r\n                limitSizeBytes={SIZE_ONE_HUNDRED_BYTES}\r\n                propImageName=\"arquivoSelecionado\"\r\n                maxFiles={MAX_FILES}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          {/*// TODO onSubmit componente File */}\r\n          <Row>\r\n            <Col className=\"mb-3 mt-5\">\r\n              <Button onClick={formProps.handleSubmit(validateContaSelecionadaObterPlanoConta)} color=\"danger\">\r\n                <FontAwesomeIcon icon=\"check-circle\" /> Importar extrato Bancário\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Box>\r\n        <TabGroup formProps={formProps}>\r\n          <Tab title=\"Extrato Bancário\">\r\n            <div className=\"table-area\">\r\n              <BootstrapTable\r\n                bordered={true}\r\n                columns={bancoExtratoColumns}\r\n                condensed={true}\r\n                className=\"table-alternate-spaced text-nowrap mb-0 table\"\r\n                data={bancoExtrato || []}\r\n                defaultSorted={defaultSorted}\r\n                hover={true}\r\n                keyField=\"doc\"\r\n                noDataIndication=\"Nenhum informação a ser exibida.\"\r\n                responsive={true}\r\n                striped={true}\r\n                tabIndexCell={true}\r\n                selectRow={selectRow}\r\n              />\r\n            </div>\r\n          </Tab>\r\n        </TabGroup>\r\n      </Form>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default ImportacaoExtratoBancarioView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { Empresa } from '../ger/empresa';\r\nimport { PlanoConta } from '../ger/planoConta';\r\n\r\nexport interface ContaHistorico extends Basic {\r\n  empresa?: Empresa;\r\n  historicoExtrato?: string;\r\n  planoConta?: PlanoConta;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.contahistorico';\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { EditForm, EditViewProps, InputGroupInline, WindowComponent } from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, ContaHistorico } from '../../../../models/dtos/mcg/contaHistorico';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface HistoricoExtratoPlanoContaEditView extends EditViewProps<ContaHistorico> {}\r\n\r\ninterface OpenFromFechamentoRestauracao {\r\n  executeSearch: true;\r\n}\r\n\r\nconst HistoricoExtratoPlanoContaEditView: FC<HistoricoExtratoPlanoContaEditView & RouteComponentProps & OpenFromFechamentoRestauracao> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { reset, ...formProps } = useForm<ContaHistorico>({ mode: 'onBlur' });\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa !== null) {\r\n        const { empresa } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          reset({\r\n            empresa: {\r\n              id: empresa.id,\r\n            },\r\n            historicoExtrato: props.selectedItem,\r\n          });\r\n        }, 500);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      title=\"Histórico - Plano Contas Extratos\"\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n    >\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME}>\r\n        <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true, maxLength: 500 } }}\r\n              isPrependLabel={true}\r\n              id=\"historicoExtrato\"\r\n              label=\"Histórico de Extrato\"\r\n              placeholder=\"Informe o Histórico de Extrato\"\r\n              tooltipProps={{\r\n                message: 'Informar a parte fixa do histórico, com isso os históricos que possuem a parte fixa será relacionada a mesma conta. ',\r\n              }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default HistoricoExtratoPlanoContaEditView;\r\n"],"sourceRoot":""}