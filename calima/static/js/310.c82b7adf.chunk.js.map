{"version":3,"sources":["models/dtos/mcg/saldoAnteriorPlanoConta.ts","views/pages/mcg/saldoAnteriorPlanoConta/SaldoAnteriorPlanoContaEditView.tsx","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/enumerated/mcg/naturezaCredorDevedorEnum.ts"],"names":["__webpack_require__","d","__webpack_exports__","CLASS_NAME","SaldoAnteriorPlanoContaEditView","props","selectedItem","getSelectedItem","globalReducer","useSelector","state","formProps","useForm","defaultValues","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","empresa","globalParameter","valor","natureza","CREDOR","value","mode","useEffect","getValues","setTimeout","setValue","DEVEDOR","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_6__","title","editViewProps","dtoClassName","beforePersist","formData","id","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_9__","validation","required","label","min","isPrependLabel","placeholder","type","InputType","NUMBER","inputDropDownProps","optionsProvider","NATUREZA_CREDOR_DEVEDOR_ENUM_VALUES","selectProps","isClearable","DROP_DOWN","PlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","searchExpressions","expressions","analitica","push","alias","conditionalGroup","fieldName","sintetica","forEach","filtro","idGrupoPlanoConta","grupoPlanoConta","searchViewId","INPUT_SEARCH"],"mappings":"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","file":"static/js/310.c82b7adf.chunk.js","sourcesContent":["import { Basic } from 'summer';\r\nimport { Empresa } from '../ger/empresa';\r\nimport { PlanoConta } from '../ger/planoConta';\r\n\r\nexport interface SaldoAnteriorPlanoConta extends Basic {\r\n  empresa?: Empresa;\r\n  planoConta?: PlanoConta;\r\n  valor?: number;\r\n  natureza?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.saldoanteriorplanoconta';\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Box, EditForm, EditViewProps, getSelectedItem, InputGroupInline, InputType, WindowComponent } from 'summer';\r\nimport { CLASS_NAME, SaldoAnteriorPlanoConta } from '../../../../models/dtos/mcg/saldoAnteriorPlanoConta';\r\nimport { CREDOR, DEVEDOR, NATUREZA_CREDOR_DEVEDOR_ENUM_VALUES } from '../../../../models/enumerated/mcg/naturezaCredorDevedorEnum';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface SaldoAnteriorPlanoContaEditViewProps extends EditViewProps<SaldoAnteriorPlanoConta> {}\r\n\r\nconst SaldoAnteriorPlanoContaEditView: FC<SaldoAnteriorPlanoContaEditViewProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<SaldoAnteriorPlanoConta>({\r\n    defaultValues: { empresa: globalReducer.globalParameter.empresa, valor: 0, natureza: CREDOR.value, ...selectedItem },\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (formProps.getValues().valor < 0) {\r\n        setTimeout(() => {\r\n          formProps.setValue('valor', -formProps.getValues().valor);\r\n          formProps.setValue('natureza', DEVEDOR.value);\r\n        }, 400);\r\n      } else {\r\n        formProps.setValue('natureza', CREDOR.value);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const beforePersist = (formData: SaldoAnteriorPlanoConta): SaldoAnteriorPlanoConta => {\r\n    formData.valor = formData.natureza === DEVEDOR.value ? -formData.valor : formData.valor;\r\n    return formData;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"Manutenção de Saldo Anterior - Plano Conta\">\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} beforePersist={beforePersist}>\r\n        <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS id=\"planoConta\" formProps={{ ...formProps, validation: { required: true } }} label=\"Plano Conta\" />\r\n          </Col>\r\n        </Row>\r\n        <Box title={'Saldo Anterior'}>\r\n          <Row>\r\n            <Col>\r\n              <InputGroupInline\r\n                formProps={{ ...formProps, validation: { min: 0, required: true } }}\r\n                id=\"valor\"\r\n                isPrependLabel={true}\r\n                label=\"Valor\"\r\n                placeholder=\"Informe o Valor\"\r\n                type={InputType.NUMBER}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <InputGroupInline\r\n                id=\"natureza\"\r\n                label=\"Natureza\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Selecione uma Natureza\"\r\n                formProps={{ ...formProps, validation: { required: true } }}\r\n                inputDropDownProps={{\r\n                  optionsProvider: NATUREZA_CREDOR_DEVEDOR_ENUM_VALUES,\r\n                  selectProps: { isClearable: false },\r\n                }}\r\n                type={InputType.DROP_DOWN}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Box>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default SaldoAnteriorPlanoContaEditView;\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","export const DEVEDOR = { value: 'DEVEDOR', label: 'Devedora' };\r\nexport const CREDOR = { value: 'CREDOR', label: 'Credora' };\r\n\r\nexport const NATUREZA_CREDOR_DEVEDOR_ENUM_VALUES = [DEVEDOR, CREDOR];\r\n"],"sourceRoot":""}