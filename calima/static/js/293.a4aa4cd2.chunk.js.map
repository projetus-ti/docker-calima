{"version":3,"sources":["views/pages/mcg/planoContaReferencial/PlanoContaReferencialSearchView.tsx","dependencies/grupoEmpresaConfigDependency.ts","models/dtos/mcg/planoContaReferencialInstituicao.ts","models/dtos/mcg/planoContaReferencial.ts","views/components/mcg/planoContaMCGReferencialInstituicao/PlanoContaMCGReferencialInstituicaoIS.tsx"],"names":["defaultSorted","dataField","order","OrderType","ASC","cellEditProps","blurToSave","mode","ClickEnum","CLICK","PlanoContaReferencialSearchView","props","_useForm","useForm","reset","formProps","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","globalReducer","useSelector","state","_useState","useState","undefined","_useState2","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","expressions","setExpressions","searchRef","useRef","planoContaReferencialInstituicao","globalParameter","grupoPlanoConta","useEffect","instituicao","columns","editable","filter","type","FilterType","NUMBER","sort","text","TEXT","formatter","cell","row","codigo","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_7__","title","dependencies","hasGrupoEmpresaConfig","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","_components_mcg_planoContaMCGReferencialInstituicao_PlanoContaMCGReferencialInstituicaoIS__WEBPACK_IMPORTED_MODULE_10__","id","label","placeholder","onChange","getValues","fieldName","value","current","notifySearchExpressionChange","className","assign","searchDataGridProps","rowEvents","onClick","e","setValue","observacao","dtoClassName","CLASS_NAME","extraData","getExtraData","searchExpressionsProps","defaultSearchExpressions","defaultExpressions","push","ref","disabled","isPrependLabel","InputType","TEXT_AREA","result","empresa","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","__webpack_require__","d","__webpack_exports__","PlanoContaMCGReferencialInstituicaoIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_2__","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","searchViewId","INPUT_SEARCH"],"mappings":"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","file":"static/js/293.a4aa4cd2.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport {\r\n  CellEditProps,\r\n  ClickEnum,\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  FilterType,\r\n  getExtraData,\r\n  InputGroupInline,\r\n  InputType,\r\n  OrderType,\r\n  SearchDataGrid,\r\n  SearchDataGridRefProps,\r\n  SearchExpression,\r\n  SearchViewProps,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { CLASS_NAME, PlanoContaReferencial } from '../../../../models/dtos/mcg/planoContaReferencial';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaMCGReferencialInstituicaoIS from '../../../components/mcg/planoContaMCGReferencialInstituicao/PlanoContaMCGReferencialInstituicaoIS';\r\n\r\nconst defaultSorted: DefaultSortProps[] = [\r\n  {\r\n    dataField: 'conta',\r\n    order: OrderType.ASC,\r\n  },\r\n];\r\n\r\nconst cellEditProps: CellEditProps = {\r\n  blurToSave: true,\r\n  mode: ClickEnum.CLICK,\r\n};\r\n\r\nconst PlanoContaReferencialSearchView: FC<SearchViewProps<PlanoContaReferencial>> = props => {\r\n  const { reset, ...formProps } = useForm<PlanoContaReferencial>({ mode: 'onBlur' });\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [expressions, setExpressions] = useState<SearchExpression[]>(undefined);\r\n  const searchRef = useRef<SearchDataGridRefProps>();\r\n  const { planoContaReferencialInstituicao } = globalReducer.globalParameter.grupoPlanoConta;\r\n\r\n  useEffect(\r\n    () => {\r\n      reset({\r\n        instituicao: planoContaReferencialInstituicao,\r\n      });\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const rowClickHandle = (e, row) => {\r\n    formProps.setValue('observacao', row.observacao, true);\r\n  };\r\n\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'conta',\r\n      editable: false,\r\n      filter: {\r\n        type: FilterType.NUMBER,\r\n      },\r\n      sort: true,\r\n      text: 'Conta',\r\n    },\r\n    {\r\n      dataField: 'descricao',\r\n      editable: false,\r\n      filter: {\r\n        type: FilterType.TEXT,\r\n      },\r\n      sort: true,\r\n      text: 'Descrição',\r\n    },\r\n    {\r\n      dataField: 'analitica',\r\n      editable: false,\r\n      formatter: cell => {\r\n        return cell === 'T' || cell === 'S' ? 'Sim' : 'Não';\r\n      },\r\n      sort: true,\r\n      text: 'Analítica',\r\n    },\r\n    {\r\n      dataField: 'instituicao.instituicao',\r\n      editable: false,\r\n      filter: {\r\n        type: FilterType.TEXT,\r\n      },\r\n      formatter: (cell, row) => {\r\n        return row.instituicao.codigo + ' - ' + row.instituicao.instituicao;\r\n      },\r\n      sort: true,\r\n      text: 'Instituição',\r\n    },\r\n  ];\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    return [\r\n      {\r\n        fieldName: 'instituicao.id',\r\n        value: formProps.getValues().instituicao.id,\r\n      },\r\n    ];\r\n  }\r\n\r\n  function defaultSearchExpression(): SearchExpression[] {\r\n    const defaultExpressions: SearchExpression[] = [];\r\n\r\n    if (planoContaReferencialInstituicao) {\r\n      defaultExpressions.push({\r\n        fieldName: 'instituicao.id',\r\n        value: planoContaReferencialInstituicao.id,\r\n      });\r\n    }\r\n\r\n    return defaultExpressions;\r\n  }\r\n\r\n  const onChangeInstituicao = () => {\r\n    if (formProps.getValues().instituicao) {\r\n      setExpressions(getSearchExpression());\r\n      searchRef.current.notifySearchExpressionChange();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"Manutenção de Plano de Contas Referencial\" dependencies={[() => hasGrupoEmpresaConfig(globalReducer.globalParameter)]}>\r\n      <Row>\r\n        <Col>\r\n          <PlanoContaMCGReferencialInstituicaoIS\r\n            formProps={formProps}\r\n            id=\"instituicao\"\r\n            label=\"instituicao\"\r\n            placeholder=\"Informe a Instituição\"\r\n            onChange={onChangeInstituicao}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <SearchDataGrid\r\n            {...props}\r\n            {...props.searchDataGridProps}\r\n            {...{\r\n              rowEvents: {\r\n                onClick: rowClickHandle,\r\n              },\r\n            }}\r\n            dtoClassName={CLASS_NAME}\r\n            columns={columns}\r\n            cellEditProps={cellEditProps}\r\n            defaultSorted={defaultSorted}\r\n            extraData={getExtraData(props, 'PlanoContaReferencialEditView', CLASS_NAME)}\r\n            searchExpressionsProps={expressions}\r\n            defaultSearchExpressions={defaultSearchExpression}\r\n            ref={searchRef}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            id=\"observacao\"\r\n            label=\"Descrição\"\r\n            formProps={formProps}\r\n            disabled={true}\r\n            placeholder={' '}\r\n            isPrependLabel={true}\r\n            type={InputType.TEXT_AREA}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default PlanoContaReferencialSearchView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Basic } from 'summer';\r\n\r\nexport interface PlanoContaReferencialInstituicao extends Basic {\r\n  codigo?: string;\r\n  instituicao?: string;\r\n  codigoECD?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencialinstituicao';\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from './planoContaReferencialInstituicao';\r\n\r\nexport interface PlanoContaReferencial extends Basic {\r\n  conta?: string;\r\n  descricao?: string;\r\n  analitica?: boolean;\r\n  observacao?: string;\r\n  codigoInstituicao?: string;\r\n  instituicao?: PlanoContaReferencialInstituicao;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencial';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaReferencialInstituicao';\r\n\r\nconst PlanoContaMCGReferencialInstituicaoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'instituicao',\r\n            text: 'Instituição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaMCGReferencialInstituicaoSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Referencial'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas Referencial'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaMCGReferencialInstituicaoIS;\r\n"],"sourceRoot":""}