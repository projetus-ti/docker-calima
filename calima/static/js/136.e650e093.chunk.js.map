{"version":3,"sources":["views/components/mcg/planoContaReferencialIS/PlanoContaReferencialIS.tsx","models/enumerated/mcg/planoContaGerConfigEnum.ts","views/components/mcg/planoContaLalurAIS/PlanoContaLalurAIS.tsx","views/pages/mcg/planoConta/PlanoContaEditView.tsx","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","models/dtos/mcg/planoContaReferencial.ts","models/dtos/mcg/planoContaLalurA.ts"],"names":["PlanoContaReferencialIS","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","isPrependLabel","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","label","placeholder","type","InputType","INPUT_SEARCH","GRUPO_ATIVO_CIRCULANTE","value","GRUPO_RECEITA_FINANCEIRA","GRUPO_RECEITA_NAO_OPERACIONAL","GRUPO_ATIVO_IMOBILIZADO","GRUPO_PASSIVO_CIRCULANTE","CONTA_COMPENSACAO","CONTA_PATRIMONIO_LIQUIDO","CONTA_RESULTADO","OUTRAS","PlanoContaLalurAIS","react_default","summer_esm","objectSpread2","PlanoContaEditView","selectedItem","getSelectedItem","globalReducer","useSelector","state","formProps","useForm","defaultValues","grupoPlanoConta","globalParameter","mode","formPropsMCG","mcgPlanoConta","_useState","useState","_useState2","slicedToArray","labelFCONT","setLabelFCONT","_useState3","_useState4","labelSPED","setLabelSPED","_useState5","_useState6","maxDigitos","setMaxDigitos","_useState7","_useState8","configGeralResultadoExercicio","setConfigGeralResultadoExercicio","_useState9","_useState10","isContaCaixaDisabled","setIsContaCaixaDisabled","_useState11","_useState12","isNaoIncluirFechamentoDisabled","setIsNaoIncluirFechamentoDisabled","_useState13","_useState14","isAnaliticaDisabled","setIsAnaliticaDisabled","_globalReducer$global","digitoAtivo","digitoPassivo","digitoReceita","_formProps$getValues","getValues","analitica","conta","id","useEffect","preparaSwitches","adjustEnums","existeLancamentoEmContaAnalitica","empresa","thenFunction","result","mascara","split","length","buscaLabelFCONT","buscaLabelSPED","planoContaReferencial","planoContaReferencialECF","concat","instituicao","codigo","setValue","contaCaixa","naoIncluirFechamento","incorporarLivroCaixa","charAt","listaConfig","push","title","wikiId","editViewProps","beforePersist","formData","hidden","Row","Col","className","GrupoPlanoContaIS","validation","required","pageId","PlanoContaIS","onChange","planoContaSubGrupo","idGrupoPlanoConta","findSubGrupo","toString","trim","alertManager","emit","ACTION_EVENTS","SHOW","message","onOkClick","undefined","AlertType","ERROR","NUMBER","onlyNumber","onBlur","maxLength","CustomInput","onClick","name","innerRef","register","disabled","inputDropDownProps","optionsProvider","DROP_DOWN","planoContaLalurAIS_PlanoContaLalurAIS","Card","CardBody","Label","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","searchExpressions","expressions","alias","conditionalGroup","fieldName","sintetica","forEach","filtro","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/136.e650e093.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaReferencial';\r\n\r\nconst PlanoContaReferencialIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'instituicao.instituicao',\r\n            text: 'Instituição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaReferencialSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Referencial'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas Referencial'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaReferencialIS;\r\n","export const GRUPO_ATIVO_CIRCULANTE = { label: 'Grupo Ativo Circulante', value: 1 };\r\nexport const GRUPO_RECEITA_FINANCEIRA = { label: 'Grupo de Receitas Financeiras', value: 2 };\r\nexport const GRUPO_RECEITA_NAO_OPERACIONAL = { label: 'Grupo de Receitas Não Operacionais', value: 3 };\r\nexport const GRUPO_ATIVO_IMOBILIZADO = { label: 'Grupo Ativo Imobilizado', value: 4 };\r\nexport const GRUPO_PASSIVO_CIRCULANTE = { label: 'Grupo Passivo Circulante', value: 5 };\r\nexport const CONTA_COMPENSACAO = { label: 'Conta de Compensação', value: 9 };\r\nexport const CONTA_PATRIMONIO_LIQUIDO = { label: 'Conta de Patrimônio Líquido', value: 10 };\r\nexport const CONTA_RESULTADO = { label: 'Conta de Resultado', value: 11 };\r\nexport const OUTRAS = { label: 'Outras', value: 12 };\r\n\r\nexport const PLANO_CONTA_GER_CONFIG_ENUM_VALUES = [\r\n  GRUPO_ATIVO_CIRCULANTE,\r\n  GRUPO_RECEITA_FINANCEIRA,\r\n  GRUPO_RECEITA_NAO_OPERACIONAL,\r\n  GRUPO_ATIVO_IMOBILIZADO,\r\n  GRUPO_PASSIVO_CIRCULANTE,\r\n  CONTA_COMPENSACAO,\r\n  CONTA_PATRIMONIO_LIQUIDO,\r\n  CONTA_RESULTADO,\r\n  OUTRAS,\r\n];\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaLalurA';\r\n\r\nconst PlanoContaLalurAIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n          {\r\n            dataField: 'tipoLancamento',\r\n            text: 'Tipo',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaLalurASearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Lalur A'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Contas Lalur A'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaLalurAIS;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, Col, CustomInput, Label, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertType,\r\n  EditForm,\r\n  EditViewProps,\r\n  getSelectedItem,\r\n  InputGroupInline,\r\n  InputType,\r\n  onlyNumber,\r\n  Tab,\r\n  TabGroup,\r\n  WikiButton,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { CLASS_NAME, PlanoConta } from '../../../../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../../../../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { PlanoContaMCG } from '../../../../models/dtos/mcg/planoContaMCG';\r\nimport {\r\n  CONTA_COMPENSACAO,\r\n  CONTA_PATRIMONIO_LIQUIDO,\r\n  CONTA_RESULTADO,\r\n  GRUPO_ATIVO_CIRCULANTE,\r\n  GRUPO_ATIVO_IMOBILIZADO,\r\n  GRUPO_PASSIVO_CIRCULANTE,\r\n  GRUPO_RECEITA_FINANCEIRA,\r\n  GRUPO_RECEITA_NAO_OPERACIONAL,\r\n  OUTRAS,\r\n} from '../../../../models/enumerated/mcg/planoContaGerConfigEnum';\r\nimport { existeLancamentoEmContaAnalitica, findSubGrupo } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport PlanoContaLalurAIS from '../../../components/mcg/planoContaLalurAIS/PlanoContaLalurAIS';\r\nimport PlanoContaReferencialIS from '../../../components/mcg/planoContaReferencialIS/PlanoContaReferencialIS';\r\n\r\ninterface PlanoContaEditViewProps extends EditViewProps<PlanoConta> {}\r\n\r\nconst PlanoContaEditView: FC<PlanoContaEditViewProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<PlanoConta>({\r\n    defaultValues: {\r\n      grupoPlanoConta: globalReducer.globalParameter.grupoPlanoConta,\r\n      ...selectedItem,\r\n    },\r\n    mode: 'onBlur',\r\n  });\r\n  const formPropsMCG = useForm<PlanoContaMCG>({\r\n    defaultValues: selectedItem.mcgPlanoConta,\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const [labelFCONT, setLabelFCONT] = useState();\r\n  const [labelSPED, setLabelSPED] = useState();\r\n  const [maxDigitos, setMaxDigitos] = useState<number>();\r\n  const [configGeralResultadoExercicio, setConfigGeralResultadoExercicio] = useState([]);\r\n  const [isContaCaixaDisabled, setIsContaCaixaDisabled] = useState<boolean>();\r\n  const [isNaoIncluirFechamentoDisabled, setIsNaoIncluirFechamentoDisabled] = useState<boolean>();\r\n  const [isAnaliticaDisabled, setIsAnaliticaDisabled] = useState<boolean>(false);\r\n  const { digitoAtivo, digitoPassivo, digitoReceita } = globalReducer.globalParameter.grupoPlanoConta;\r\n  const { analitica, conta, id, mcgPlanoConta, grupoPlanoConta } = formProps.getValues();\r\n\r\n  useEffect(\r\n    () => {\r\n      preparaSwitches();\r\n      adjustEnums();\r\n\r\n      if (id !== null) {\r\n        existeLancamentoEmContaAnalitica(id, globalReducer.globalParameter.empresa.id, {\r\n          thenFunction: result => {\r\n            if (result && analitica) {\r\n              setIsAnaliticaDisabled(true);\r\n            }\r\n          },\r\n        });\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (grupoPlanoConta) {\r\n        setMaxDigitos(grupoPlanoConta.mascara.split('#').length - 1);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [grupoPlanoConta]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      buscaLabelFCONT();\r\n      buscaLabelSPED();\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [formPropsMCG.getValues().planoContaReferencial, formPropsMCG.getValues().planoContaReferencialECF]\r\n  );\r\n\r\n  const buscaLabelFCONT = () => {\r\n    const { planoContaReferencial } = formPropsMCG.getValues();\r\n    setLabelFCONT(\r\n      planoContaReferencial ? `Instituição: ${planoContaReferencial.instituicao.codigo} - ${planoContaReferencial.instituicao.instituicao}` : ''\r\n    );\r\n  };\r\n\r\n  const buscaLabelSPED = () => {\r\n    const { planoContaReferencialECF } = formPropsMCG.getValues();\r\n\r\n    setLabelSPED(\r\n      planoContaReferencialECF\r\n        ? `Instituição: ${planoContaReferencialECF.instituicao.codigo} - ${planoContaReferencialECF.instituicao.instituicao}`\r\n        : ''\r\n    );\r\n  };\r\n\r\n  const buscaSubGrupo = () => {\r\n    /* tslint:disable:no-string-literal */\r\n    if (formProps.getValues()['isSubGrupo']) {\r\n      const planoContaSubGrupo: PlanoContaSubGrupoParam = {\r\n        conta: formProps.getValues()['isSubGrupo'].conta,\r\n        idGrupoPlanoConta: grupoPlanoConta.id,\r\n        maxDigitos: grupoPlanoConta.mascara.split('#').length - 1,\r\n      };\r\n      findSubGrupo(planoContaSubGrupo, {\r\n        thenFunction: result => {\r\n          if (result) {\r\n            formProps.setValue('conta', result);\r\n            if (!id) {\r\n              formProps.setValue('analitica', result.toString().trim().length === maxDigitos);\r\n            }\r\n          } else {\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message:\r\n                'A máscara configurada para este grupo de plano de contas é menor que o número de dígitos da próxima conta a ser cadastrada. ' +\r\n                'Para alterar a máscara, acesse: Manutenção > Grupos > Plano de Contas',\r\n              onOkClick: () => formProps.setValue('isSubGrupo', undefined),\r\n              type: AlertType.ERROR,\r\n            });\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setIsContaCaixaDisabled(!analitica);\r\n      if (!analitica) {\r\n        formPropsMCG.setValue('contaCaixaSwitch', false);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [analitica]\r\n  );\r\n\r\n  const preparaSwitches = () => {\r\n    if (mcgPlanoConta) {\r\n      formPropsMCG.getValues()['contaCaixaSwitch'] = mcgPlanoConta.contaCaixa === 'T';\r\n      formPropsMCG.getValues()['naoIncluirFechamentoSwitch'] = mcgPlanoConta.naoIncluirFechamento === 'T';\r\n      formPropsMCG.getValues()['incorporarLivroCaixaSwitch'] = mcgPlanoConta.incorporarLivroCaixa === 'T';\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (analitica && digitoAtivo !== conta.charAt(0) && digitoPassivo !== conta.charAt(0)) {\r\n        setIsNaoIncluirFechamentoDisabled(false);\r\n      } else {\r\n        setIsNaoIncluirFechamentoDisabled(true);\r\n        formPropsMCG.setValue('naoIncluirFechamentoSwitch', false);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [analitica, conta]\r\n  );\r\n\r\n  const adjustEnums = () => {\r\n    const listaConfig = [];\r\n    if (conta) {\r\n      listaConfig.push(CONTA_COMPENSACAO);\r\n      listaConfig.push(CONTA_RESULTADO);\r\n\r\n      if (conta.charAt(0) === digitoPassivo) {\r\n        listaConfig.push(CONTA_PATRIMONIO_LIQUIDO);\r\n      }\r\n\r\n      if (!analitica) {\r\n        switch (conta.charAt(0)) {\r\n          case digitoAtivo:\r\n            listaConfig.push(GRUPO_ATIVO_CIRCULANTE);\r\n            listaConfig.push(GRUPO_ATIVO_IMOBILIZADO);\r\n            break;\r\n          case digitoPassivo:\r\n            listaConfig.push(GRUPO_PASSIVO_CIRCULANTE);\r\n            break;\r\n          case digitoReceita:\r\n            listaConfig.push(GRUPO_RECEITA_FINANCEIRA);\r\n            listaConfig.push(GRUPO_RECEITA_NAO_OPERACIONAL);\r\n            break;\r\n        }\r\n      }\r\n      listaConfig.push(OUTRAS);\r\n      setConfigGeralResultadoExercicio(listaConfig);\r\n    } else {\r\n      setConfigGeralResultadoExercicio(listaConfig);\r\n    }\r\n  };\r\n\r\n  const beforePersist = (formData: PlanoConta) => {\r\n    formData.mcgPlanoConta = formPropsMCG.getValues();\r\n    formData.mcgPlanoConta.contaCaixa = formPropsMCG.getValues()['contaCaixaSwitch'] === false ? 'F' : 'T';\r\n    formData.mcgPlanoConta.incorporarLivroCaixa = formPropsMCG.getValues()['incorporarLivroCaixaSwitch'] === false ? 'F' : 'T';\r\n    formData.mcgPlanoConta.naoIncluirFechamento = formPropsMCG.getValues()['naoIncluirFechamentoSwitch'] === false ? 'F' : 'T';\r\n\r\n    formData.mcgPlanoConta.grupoPlanoConta = grupoPlanoConta;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"Manutenção de Plano de Conta\" wikiId={180}>\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} beforePersist={beforePersist}>\r\n        <InputGroupInline id=\"id\" formProps={formPropsMCG} hidden={true} />\r\n        <Row>\r\n          <Col className=\"col-11\">\r\n            <GrupoPlanoContaIS formProps={{ ...formProps, validation: { required: true } }} id=\"grupoPlanoConta\" />\r\n          </Col>\r\n          <Col className=\"col-1\">\r\n            <WikiButton pageId={1346} />\r\n          </Col>\r\n        </Row>\r\n        <TabGroup formProps={formProps}>\r\n          <Tab title=\"Geral\">\r\n            <PlanoContaIS id=\"isSubGrupo\" formProps={formProps} label=\"Grupo/Sub-Grupo\" placeholder=\"Informe a Conta\" onChange={buscaSubGrupo} />\r\n            <InputGroupInline\r\n              id=\"codigoReduzido\"\r\n              label=\"Código Reduzido\"\r\n              isPrependLabel={true}\r\n              placeholder=\"Preenchimento opcional - Codificação Automática\"\r\n              formProps={formProps}\r\n              type={InputType.NUMBER}\r\n            />\r\n            <InputGroupInline\r\n              id=\"conta\"\r\n              label=\"Conta\"\r\n              isPrependLabel={true}\r\n              placeholder=\"Número da Conta\"\r\n              formProps={{ ...formProps, validation: { ...onlyNumber(0, maxDigitos), required: true } }}\r\n              type={InputType.NUMBER}\r\n              onBlur={adjustEnums}\r\n            />\r\n            <InputGroupInline\r\n              id=\"descricao\"\r\n              label=\"Descrição\"\r\n              isPrependLabel={true}\r\n              placeholder=\"Informe a descrição\"\r\n              formProps={{ ...formProps, validation: { maxLength: 120, required: true } }}\r\n            />\r\n            <CustomInput\r\n              onClick={adjustEnums}\r\n              type=\"switch\"\r\n              label=\"Analítica\"\r\n              id=\"analitica\"\r\n              name=\"analitica\"\r\n              innerRef={formProps.register}\r\n              disabled={isAnaliticaDisabled}\r\n            />\r\n          </Tab>\r\n          <Tab title=\"Configurações Contábeis\">\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Conta Caixa\"\r\n              id=\"contaCaixaSwitch\"\r\n              name=\"contaCaixaSwitch\"\r\n              innerRef={formPropsMCG.register}\r\n              disabled={isContaCaixaDisabled}\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Incorporar aos Relatórios de Livro Caixa\"\r\n              id=\"incorporarLivroCaixaSwitch\"\r\n              name=\"incorporarLivroCaixaSwitch\"\r\n              innerRef={formPropsMCG.register}\r\n            />\r\n            <CustomInput\r\n              type=\"switch\"\r\n              label=\"Não incluir no fechamento do Resultado do Exercício\"\r\n              id=\"naoIncluirFechamentoSwitch\"\r\n              name=\"naoIncluirFechamentoSwitch\"\r\n              innerRef={formPropsMCG.register}\r\n              disabled={isNaoIncluirFechamentoDisabled}\r\n            />\r\n            <InputGroupInline\r\n              id=\"configGeralResultadoExercicio\"\r\n              label=\"Configuração Geral / Natureza da Conta SPED ECF\"\r\n              isPrependLabel={true}\r\n              formProps={formPropsMCG}\r\n              inputDropDownProps={{\r\n                optionsProvider: configGeralResultadoExercicio,\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n            <PlanoContaLalurAIS id=\"planoContaLalurA\" formProps={formPropsMCG} label=\"Conta Relacionada\" />\r\n          </Tab>\r\n          <Tab title=\"SPED ECD/ECF e FCONT\">\r\n            <Card>\r\n              <CardBody>\r\n                <PlanoContaReferencialIS\r\n                  id=\"planoContaReferencial\"\r\n                  formProps={formPropsMCG}\r\n                  label=\"Plano de Contas Referencial FCONT\"\r\n                  onChange={buscaLabelFCONT}\r\n                />\r\n                <Label>{labelFCONT}</Label>\r\n              </CardBody>\r\n            </Card>\r\n            <br />\r\n            <br />\r\n            <Card>\r\n              <CardBody>\r\n                <PlanoContaReferencialIS\r\n                  id=\"planoContaReferencialECF\"\r\n                  formProps={formPropsMCG}\r\n                  label=\"Plano de Contas Referencial SPED ECD/ECF/EFD Contribuições\"\r\n                  onChange={buscaLabelSPED}\r\n                />\r\n                <Label>{labelSPED}</Label>\r\n              </CardBody>\r\n            </Card>\r\n          </Tab>\r\n        </TabGroup>\r\n        <br />\r\n        <br />\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default PlanoContaEditView;\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from './planoContaReferencialInstituicao';\r\n\r\nexport interface PlanoContaReferencial extends Basic {\r\n  conta?: string;\r\n  descricao?: string;\r\n  analitica?: boolean;\r\n  observacao?: string;\r\n  codigoInstituicao?: string;\r\n  instituicao?: PlanoContaReferencialInstituicao;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencial';\r\n","import { Basic } from 'summer';\r\n\r\nexport interface PlanoContaLalurA extends Basic {\r\n  tabelaSped?: string;\r\n  versaoTabela?: string;\r\n  codigo?: string;\r\n  descricao?: string;\r\n  tipoLancamento?: string;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontalalura';\r\n"],"sourceRoot":""}