{"version":3,"sources":["services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/ger/centroCusto.ts","views/components/mcg/centroCustoIS/CentroCustoIS.tsx","utilities/enum.util.ts","models/enumerated/ger/planoContaGERTipoLancamentoContaEnum.ts","utilities/mcg.util.ts","models/enumerated/mcg/tipoBloqueioLancamentoEnum.ts","models/enumerated/ger/centroCustoGERTipoLancamentoCentroCustoEnum.ts","models/enumerated/mcg/bloqueioLancamentoValidateStringEnum.ts","models/enumerated/mcg/origemLancamentoMCGEnum.ts"],"names":["getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","data","formDataSend","FormData","append","String","empresa","id","importarDuplicados","importarLancamentosCardinal","_step","_iterator","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","value","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","PlanoContaIS","props","globalReducer","useSelector","state","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_3__","assign","isPrependLabel","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","push","globalParameter","grupoPlanoConta","forEach","filtro","searchViewId","label","placeholder","type","InputType","INPUT_SEARCH","__webpack_require__","d","__webpack_exports__","CentroCustoIS","summer__WEBPACK_IMPORTED_MODULE_2__","EnumUtil","contains","list","search","extraField","undefined","find","result","item","extraFields","CODIGO_REDUZIDO","PLANO_CONTA_GER_TIPO_LANCAMENTO_CONTA_ENUM_VALUES","validatePeriodoConfig","concatenarHistorico","summer__WEBPACK_IMPORTED_MODULE_0__","_models_enumerated_mcg_bloqueioLancamentoValidateStringEnum__WEBPACK_IMPORTED_MODULE_1__","_models_enumerated_mcg_tipoBloqueioLancamentoEnum__WEBPACK_IMPORTED_MODULE_2__","config","lancamentoMCGConfig","formatDate","parseRefToDate","empresaMCG","refAtual","refInicialUltimoDia","parseLastDay","tipoBloqueioLancamento","APENAS_PERIODO_FISCAL","compare","FORA_PERIODO_FISCAL","APENAS_REF_ATUAL","FORA_MES_ATUAL","TODOS","PERIODO_ANTERIOR","itens","map","it","historico","descricao","historicoVariavel","length","reduce","res","TIPO_BLOQUEIO_LANCAMENTO_ENUM_VALUES","CENTRO_CUSTO_GER_TIPO_LANCAMENTO_CENTRO_CUSTO_ENUM_VALUES","CONTABILIDADE","ORIGEM_LANCAMENTO_MCG_ENUM_VALUES","intValue"],"mappings":"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","file":"static/js/74.02b72e7d.chunk.js","sourcesContent":["import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { Bem } from '../mcp/bem';\r\nimport { GrupoCentroCusto } from './grupoCentroCusto';\r\n\r\nexport interface CentroCusto extends Basic {\r\n  codigo?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  analitica?: boolean;\r\n  grupoCentroCusto?: GrupoCentroCusto;\r\n  bem?: Bem;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.centrocusto';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/centroCusto';\r\n\r\nconst CentroCustoIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'CentroCustoSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Centro de Custo'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Centro de Custo'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CentroCustoIS;\r\n","import { BasicEnum } from '../models/enumerated/basicEnum';\r\n\r\ninterface EnumWithExtraFields extends BasicEnum {\r\n  extraFields?: any;\r\n}\r\n\r\nconst EnumUtil = {\r\n  contains: (list: EnumWithExtraFields[], search: EnumWithExtraFields | string, extraField: string = null) =>\r\n    EnumUtil.find(list, search, extraField) !== undefined,\r\n  find: (list: EnumWithExtraFields[], search: EnumWithExtraFields | string, extraField: string = null) => {\r\n    let result;\r\n\r\n    if (search) {\r\n      result = list.find(item => (extraField ? item.extraFields[extraField] : item.value) === (typeof search === 'object' ? search.value : search));\r\n    }\r\n\r\n    return result;\r\n  },\r\n};\r\n\r\nexport default EnumUtil;\r\n","export const CONTA = { label: 'Número da Conta', value: 1 };\r\nexport const CODIGO_REDUZIDO = { label: 'Código Reduzido', value: 2 };\r\n\r\nexport const PLANO_CONTA_GER_TIPO_LANCAMENTO_CONTA_ENUM_VALUES = [CONTA, CODIGO_REDUZIDO];\r\n","import { compare, formatDate, parseLastDay, parseRefToDate } from 'summer';\r\nimport { FORA_MES_ATUAL, FORA_PERIODO_FISCAL, PERIODO_ANTERIOR } from '../models/enumerated/mcg/bloqueioLancamentoValidateStringEnum';\r\nimport { APENAS_PERIODO_FISCAL, APENAS_REF_ATUAL, TODOS } from '../models/enumerated/mcg/tipoBloqueioLancamentoEnum';\r\n\r\nexport const validatePeriodoConfig = (data, globalParameter) => {\r\n  const config = globalParameter.lancamentoMCGConfig;\r\n  const refInicial = formatDate(parseRefToDate(globalParameter.empresaMCG.refAtual, 1));\r\n  const refInicialUltimoDia = formatDate(parseLastDay(globalParameter.empresaMCG.refAtual));\r\n  const refFinal = formatDate(parseLastDay(globalParameter.empresaMCG.refFinal));\r\n\r\n  let result = null;\r\n\r\n  if (config.tipoBloqueioLancamento === APENAS_PERIODO_FISCAL.value && (compare(data, refInicial) < 0 || compare(data, refFinal) > 0)) {\r\n    result = FORA_PERIODO_FISCAL.label;\r\n  } else if (config.tipoBloqueioLancamento === APENAS_REF_ATUAL.value && (compare(data, refInicial) < 0 || compare(data, refInicialUltimoDia) > 0)) {\r\n    result = FORA_MES_ATUAL.label;\r\n  } else if (config.tipoBloqueioLancamento === TODOS.value && compare(data, refInicial) < 0) {\r\n    result = PERIODO_ANTERIOR.label;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const concatenarHistorico = (list: any[]) => {\r\n  const itens = list.map(\r\n    it => ((it.historico ? it.historico.descricao : it.descricao) || '') + (it.historicoVariavel ? ' ' + it.historicoVariavel : '')\r\n  );\r\n  let result = '';\r\n  if (itens.length > 0) {\r\n    result = itens.length > 1 ? itens.reduce((res, it) => res + ' ' + it) : itens[0];\r\n  }\r\n  return result;\r\n};\r\n","export const APENAS_REF_ATUAL = { label: 'Apenas Mês Atual', value: 0 };\r\nexport const APENAS_PERIODO_FISCAL = { label: 'Apenas Período Fiscal Atual', value: 1 };\r\nexport const TODOS = { label: 'Todos', value: 2 };\r\n\r\nexport const TIPO_BLOQUEIO_LANCAMENTO_ENUM_VALUES = [APENAS_REF_ATUAL, APENAS_PERIODO_FISCAL, TODOS];\r\n","export const CODIGO = { label: 'Código', value: 1 };\r\nexport const CODIGO_REDUZIDO = { label: 'Código Reduzido', value: 2 };\r\n\r\nexport const CENTRO_CUSTO_GER_TIPO_LANCAMENTO_CENTRO_CUSTO_ENUM_VALUES = [CODIGO, CODIGO_REDUZIDO];\r\n","export const FORA_PERIODO_FISCAL = { value: 'fora_periodo_fiscal', label: 'fora do Período Fiscal.' };\r\nexport const FORA_MES_ATUAL = { value: 'fora_mes_atual', label: 'fora da Referência Atual.' };\r\nexport const PERIODO_ANTERIOR = { value: 'periodo_anterior', label: 'em data anterior à Referência atual.' };\r\n\r\nexport const BLOQUEIO_LANCAMENTO_VALIDATE_STRING_ENUM_VALUES = [FORA_PERIODO_FISCAL, FORA_MES_ATUAL, PERIODO_ANTERIOR];\r\n","export const CONTABILIDADE = { value: 'CONTABILIDADE', label: 'Contabilidade', extraFields: { intValue: 1 } };\r\nexport const FOLHA_DE_PAGAMENTO_FOLHA = { value: 'FOLHA_DE_PAGAMENTO_FOLHA', label: 'Folha Pagamento', extraFields: { intValue: 2 } };\r\nexport const CONTROLE_PATRIMONIAL = { value: 'CONTROLE_PATRIMONIAL', label: 'Controle Patrimonial', extraFields: { intValue: 3 } };\r\nexport const LIVRO_FISCAL = { value: 'LIVRO_FISCAL', label: 'Livro Fiscal', extraFields: { intValue: 4 } };\r\nexport const IMPORTACAO = { value: 'IMPORTACAO', label: 'Importação', extraFields: { intValue: 5 } };\r\nexport const SINF = { value: 'SINF', label: 'SINF', extraFields: { intValue: 6 } };\r\nexport const FOLHA_DE_PAGAMENTO_13_PARCELA_1 = {\r\n  extraFields: { intValue: 7 },\r\n  label: 'Folha Pagamento 13 Parcela 1',\r\n  value: 'FOLHA_DE_PAGAMENTO_13_PARCELA_1',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_13_PARCELA_2 = {\r\n  extraFields: { intValue: 8 },\r\n  label: 'Folha Pagamento 13 Parcela 2',\r\n  value: 'FOLHA_DE_PAGAMENTO_13_PARCELA_2',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_ADIANTAMENTO = {\r\n  extraFields: { intValue: 9 },\r\n  label: 'Folha Pagamento Adiantamento',\r\n  value: 'FOLHA_DE_PAGAMENTO_ADIANTAMENTO',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_FERIAS = { value: 'FOLHA_DE_PAGAMENTO_FERIAS', label: 'Folha Pagamento Ferias', extraFields: { intValue: 10 } };\r\nexport const FOLHA_DE_PAGAMENTO_RESCISAO = { value: 'FOLHA_DE_PAGAMENTO_RESCISAO', label: 'Folha Pagamento Rescisão', extraFields: { intValue: 11 } };\r\nexport const FOLHA_DE_PAGAMENTO_GPS_GERAL = {\r\n  extraFields: { intValue: 12 },\r\n  label: 'Folha Pagamento GPS - Geral',\r\n  value: 'FOLHA_DE_PAGAMENTO_GPS_GERAL',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_GPS_13_PARCELA_2 = {\r\n  extraFields: { intValue: 13 },\r\n  label: 'Folha Pagamento GPS - 13 Parcela 2',\r\n  value: 'FOLHA_DE_PAGAMENTO_GPS_13_PARCELA_2',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_GPS_COOPERATIVA = {\r\n  extraFields: { intValue: 14 },\r\n  label: 'Folha Pagamento GPS - Cooperativa',\r\n  value: 'FOLHA_DE_PAGAMENTO_GPS_COOPERATIVA',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_GPS_PRODUTOR_RURAL = {\r\n  extraFields: { intValue: 15 },\r\n  label: 'Folha Pagamento GPS - Produtor Rural',\r\n  value: 'FOLHA_DE_PAGAMENTO_GPS_PRODUTOR_RURAL',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_DARF = { value: 'FOLHA_DE_PAGAMENTO_DARF', label: 'Folha Pagamento DARF', extraFields: { intValue: 16 } };\r\nexport const INTEGRACAOREST = { value: 'INTEGRACAO (JSON)', label: 'Integração (JSON)', extraFields: { intValue: 17 } };\r\nexport const CONCILIACAO = { value: 'CONCILIACAO', label: 'Conciliação Bancária', extraFields: { intValue: 18 } };\r\nexport const HONORARIOS = { value: 'HONORARIOS', label: 'Honorários', extraFields: { intValue: 19 } };\r\nexport const FOLHA_DE_PAGAMENTO_RESILICAO = {\r\n  extraFields: { intValue: 20 },\r\n  label: 'Folha Pagamento Resilição',\r\n  value: 'FOLHA_DE_PAGAMENTO_RESILICAO',\r\n};\r\nexport const FOLHA_DE_PAGAMENTO_GPS_TERCEIROS_TRANSPORTADOR = {\r\n  extraFields: { intValue: 21 },\r\n  label: 'Folha Pagamento GPS - Terceiros Transportador',\r\n  value: 'FOLHA_DE_PAGAMENTO_GPS_TERCEIROS_TRANSPORTADOR',\r\n};\r\n\r\nexport const ORIGEM_LANCAMENTO_MCG_ENUM_VALUES = [\r\n  CONTABILIDADE,\r\n  FOLHA_DE_PAGAMENTO_FOLHA,\r\n  CONTROLE_PATRIMONIAL,\r\n  LIVRO_FISCAL,\r\n  IMPORTACAO,\r\n  SINF,\r\n  FOLHA_DE_PAGAMENTO_13_PARCELA_1,\r\n  FOLHA_DE_PAGAMENTO_13_PARCELA_2,\r\n  FOLHA_DE_PAGAMENTO_ADIANTAMENTO,\r\n  FOLHA_DE_PAGAMENTO_FERIAS,\r\n  FOLHA_DE_PAGAMENTO_RESCISAO,\r\n  FOLHA_DE_PAGAMENTO_GPS_GERAL,\r\n  FOLHA_DE_PAGAMENTO_GPS_13_PARCELA_2,\r\n  FOLHA_DE_PAGAMENTO_GPS_COOPERATIVA,\r\n  FOLHA_DE_PAGAMENTO_GPS_PRODUTOR_RURAL,\r\n  FOLHA_DE_PAGAMENTO_DARF,\r\n  INTEGRACAOREST,\r\n  CONCILIACAO,\r\n  HONORARIOS,\r\n  FOLHA_DE_PAGAMENTO_RESILICAO,\r\n  FOLHA_DE_PAGAMENTO_GPS_TERCEIROS_TRANSPORTADOR,\r\n];\r\n"],"sourceRoot":""}