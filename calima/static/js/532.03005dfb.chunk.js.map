{"version":3,"sources":["../node_modules/text-diff/diff.js"],"names":["diff","options","this","Timeout","timeout","EditCost","editCost","Diff","prototype","main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","commonPrefix","commonprefix","substring","commonSuffix","commonsuffix","length","diffs","compute_","unshift","push","cleanupMerge","longtext","shorttext","i","indexOf","hm","halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","lineMode_","bisect_","a","linesToChars_","chars1","chars2","linearray","lineArray","charsToLines_","cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","text","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastequality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","xIndex","loc","last_chars1","last_chars2","prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_br","op","replace","levenshtein","insertions","deletions","data","toDelta","encodeURI","fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","module","exports"],"mappings":"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","file":"static/js/532.03005dfb.chunk.js","sourcesContent":["/**\n * This library was modified by Harrison Liddiard. The source code to this\n * modified version can be found at https://github.com/liddiard/google-diff/.\n * The original source code can be found at\n * http://code.google.com/p/google-diff-match-patch/. This unofficial fork is\n * not maintained by or affiliated with Google Inc. The original attribution\n * and licensing information follows.\n */\n\n/**\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff.\n * @constructor\n */\nfunction diff(options) {\n  var options = options || {}; // Defaults.\n  // Redefine these in your program to override the defaults.\n  // Number of seconds to map a diff before giving up (0 for infinity).\n\n  this.Timeout = options.timeout || 1.0; // Cost of an empty edit operation in terms of edit characters.\n\n  this.EditCost = options.editCost || 4;\n} //  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\n\n\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n/** @typedef {{0: number, 1: string}} */\n\ndiff.Diff;\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n */\n\ndiff.prototype.main = function (text1, text2, opt_checklines, opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Timeout * 1000;\n    }\n  }\n\n  var deadline = opt_deadline; // Check for null inputs.\n\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  } // Check for equality (speedup).\n\n\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n\n  var checklines = opt_checklines; // Trim off common prefix (speedup).\n\n  var commonlength = this.commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength); // Trim off common suffix (speedup).\n\n  commonlength = this.commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.\n\n  var diffs = this.compute_(text1, text2, checklines, deadline); // Restore the prefix and suffix.\n\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n\n  this.cleanupMerge(diffs);\n  return diffs;\n};\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff.prototype.compute_ = function (text1, text2, checklines, deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.\n\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  } // Check to see if the problem can be split in two.\n\n\n  var hm = this.halfMatch_(text1, text2);\n\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4]; // Send both pairs off for separate processing.\n\n    var diffs_a = this.main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.main(text1_b, text2_b, checklines, deadline); // Merge the results.\n\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.lineMode_(text1, text2, deadline);\n  }\n\n  return this.bisect_(text1, text2, deadline);\n};\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff.prototype.lineMode_ = function (text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n  var diffs = this.main(text1, text2, false, deadline); // Convert the diff back to original text.\n\n  this.charsToLines_(diffs, linearray); // Eliminate freak matches (e.g. blank lines)\n\n  this.cleanupSemantic(diffs); // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n\n  diffs.push([DIFF_EQUAL, '']);\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var a = this.main(text_delete, text_insert, false, deadline);\n\n          for (var j = a.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, a[j]);\n          }\n\n          pointer = pointer + a.length;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n\n    pointer++;\n  }\n\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff.prototype.bisect_ = function (text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length); // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length; // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n\n  var front = delta % 2 != 0; // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    } // Walk the front path one step.\n\n\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n\n      var y1 = x1 - k1;\n\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n\n      v1[k1_offset] = x1;\n\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    } // Walk the reverse path one step.\n\n\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n\n      var y2 = x2 - k2;\n\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n\n      v2[k2_offset] = x2;\n\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset; // Mirror x2 onto top-left coordinate system.\n\n          x2 = text1_length - x2;\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  } // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n\n\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff.prototype.bisectSplit_ = function (text1, text2, x, y, deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y); // Compute both diffs serially.\n\n  var diffs = this.main(text1a, text2a, false, deadline);\n  var diffsb = this.main(text1b, text2b, false, deadline);\n  return diffs.concat(diffsb);\n};\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\n\n\ndiff.prototype.linesToChars_ = function (text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n\n  lineArray[0] = '';\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n\n  function diff_linesToCharsMunge_(text) {\n    var chars = ''; // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n\n    var lineStart = 0;\n    var lineEnd = -1; // Keeping our own length variable is faster than looking it up.\n\n    var lineArrayLength = lineArray.length;\n\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n\n      var line = text.substring(lineStart, lineEnd + 1);\n      lineStart = lineEnd + 1;\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n    }\n\n    return chars;\n  }\n\n  var chars1 = diff_linesToCharsMunge_(text1);\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {\n    chars1: chars1,\n    chars2: chars2,\n    lineArray: lineArray\n  };\n};\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\n\n\ndiff.prototype.charsToLines_ = function (diffs, lineArray) {\n  for (var x = 0; x < diffs.length; x++) {\n    var chars = diffs[x][1];\n    var text = [];\n\n    for (var y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n\n    diffs[x][1] = text.join('');\n  }\n};\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\n\n\ndiff.prototype.commonPrefix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n};\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\n\n\ndiff.prototype.commonSuffix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n};\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\n\n\ndiff.prototype.commonOverlap_ = function (text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length; // Eliminate the null case.\n\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  } // Truncate the longer string.\n\n\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n\n  var text_length = Math.min(text1_length, text2_length); // Quick check for the worst case.\n\n  if (text1 == text2) {\n    return text_length;\n  } // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\n\n\n  var best = 0;\n  var length = 1;\n\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n\n    if (found == -1) {\n      return best;\n    }\n\n    length += found;\n\n    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\n\n\ndiff.prototype.halfMatch_ = function (text1, text2) {\n  if (this.Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = dmp.commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  } // First check if the second quarter is the seed for a half-match.\n\n\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.\n\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  } // A half-match was found, sort out the return data.\n\n\n  var text1_a, text1_b, text2_a, text2_b;\n\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff.prototype.cleanupSemantic = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n  /** @type {?string} */\n\n  var lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n\n  var length_insertions1 = 0;\n  var length_deletions1 = 0; // Number of characters that changed after the equality.\n\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastequality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      } // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n\n\n      if (lastequality && lastequality.length <= Math.max(length_insertions1, length_deletions1) && lastequality.length <= Math.max(length_insertions2, length_deletions2)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.\n\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT; // Throw away the equality we just deleted.\n\n        equalitiesLength--; // Throw away the previous equality (it needs to be reevaluated).\n\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastequality = null;\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // Normalize the diff.\n\n\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n\n  this.cleanupSemanticLossless(diffs); // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n\n  pointer = 1;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.commonOverlap_(insertion, deletion);\n\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlap_length1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlap_length2)]);\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n\n      pointer++;\n    }\n\n    pointer++;\n  }\n};\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff.prototype.cleanupSemanticLossless = function (diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    } // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n\n\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(diff.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(diff.whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(diff.linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(diff.linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(diff.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(diff.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n\n    return 0;\n  }\n\n  var pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1]; // First, shift the edit as far left as possible.\n\n      var commonOffset = this.commonSuffix(equality1, edit);\n\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      } // Second, step character by character right, looking for the best fit.\n\n\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2); // The >= encourages trailing rather than leading whitespace on edits.\n\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n\n        diffs[pointer][1] = bestEdit;\n\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n\n    pointer++;\n  }\n}; // Define some regex patterns for matching boundaries.\n\n\ndiff.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff.whitespaceRegex_ = /\\s/;\ndiff.linebreakRegex_ = /[\\r\\n]/;\ndiff.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\n\ndiff.prototype.cleanupEfficiency = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n  /** @type {?string} */\n\n  var lastequality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n  var pointer = 0; // Index of current position.\n  // Is there an insertion operation before the last equality.\n\n  var pre_ins = false; // Is there a deletion operation before the last equality.\n\n  var pre_del = false; // Is there an insertion operation after the last equality.\n\n  var post_ins = false; // Is there a deletion operation after the last equality.\n\n  var post_del = false;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      if (diffs[pointer][1].length < this.EditCost && (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastequality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastequality = null;\n      }\n\n      post_ins = post_del = false;\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n\n\n      if (lastequality && (pre_ins && pre_del && post_ins && post_del || lastequality.length < this.EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]); // Change second copy to insert.\n\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--; // Throw away the equality we just deleted;\n\n        lastequality = null;\n\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--; // Throw away the previous equality.\n\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n\n        changes = true;\n      }\n    }\n\n    pointer++;\n  }\n\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n};\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff.prototype.cleanupMerge = function (diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.commonPrefix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            } // Factor out any common suffixies.\n\n\n            commonlength = this.commonSuffix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          } // Delete the offending records and add the merged ones.\n\n\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  } // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\n\n  var changes = false;\n  pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // If shifts were made, the diff needs reordering and another shift sweep.\n\n\n  if (changes) {\n    this.cleanupMerge(diffs);\n  }\n};\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\n\n\ndiff.prototype.xIndex = function (diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n\n    if (diffs[x][0] !== DIFF_DELETE) {\n      // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n\n    if (chars1 > loc) {\n      // Overshot the location.\n      break;\n    }\n\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  } // Was the location was deleted?\n\n\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  } // Add the remaining character length.\n\n\n  return last_chars2 + (loc - last_chars1);\n};\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\n\n\ndiff.prototype.prettyHtml = function (diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_br = /\\n/g;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0]; // Operation (insert, delete, equal)\n\n    var data = diffs[x][1]; // Text of change.\n\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_br, '<br/>');\n\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins>' + text + '</ins>';\n        break;\n\n      case DIFF_DELETE:\n        html[x] = '<del>' + text + '</del>';\n        break;\n\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n\n  return html.join('');\n};\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\n\n\ndiff.prototype.text1 = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n\n  return text.join('');\n};\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\n\n\ndiff.prototype.text2 = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n\n  return text.join('');\n};\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\n\n\ndiff.prototype.levenshtein = function (diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\n\n\ndiff.prototype.toDelta = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\n\n\ndiff.prototype.fromDelta = function (text1, delta) {\n  var diffs = [];\n  var diffsLength = 0; // Keeping our own length var is faster in JS.\n\n  var pointer = 0; // Cursor in text1\n\n  var tokens = delta.split(/\\t/g);\n\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = [DIFF_INSERT, decodeURI(param)];\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n\n        break;\n\n      case '-': // Fall through.\n\n      case '=':\n        var n = parseInt(param, 10);\n\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n\n        var text = text1.substring(pointer, pointer += n);\n\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = [DIFF_EQUAL, text];\n        } else {\n          diffs[diffsLength++] = [DIFF_DELETE, text];\n        }\n\n        break;\n\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' + tokens[x]);\n        }\n\n    }\n  }\n\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer + ') does not equal source text length (' + text1.length + ').');\n  }\n\n  return diffs;\n}; // Export these global variables so that they survive Google's JS compiler.\n// In a browser, 'this' will be 'window'.\n// Users of node.js should 'require' the uncompressed version since Google's\n// JS compiler may break the following exports for non-browser environments.\n\n\nthis['diff'] = diff;\nthis['DIFF_DELETE'] = DIFF_DELETE;\nthis['DIFF_INSERT'] = DIFF_INSERT;\nthis['DIFF_EQUAL'] = DIFF_EQUAL;\nmodule.exports = diff;"],"sourceRoot":""}