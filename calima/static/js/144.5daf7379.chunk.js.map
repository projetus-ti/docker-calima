{"version":3,"sources":["views/pages/mcg/grupoPlanoConta/GrupoPlanoContaConfigEditView.tsx","dependencies/empresaDependency.ts","dependencies/empresaMCGDependency.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/CardTitle.js","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx"],"names":["GrupoPlanoContaConfigEditView","props","selectedItem","getSelectedItem","formProps","useForm","defaultValues","mode","dispatch","useDispatch","editFormRef","useRef","globalReducer","useSelector","state","useEffect","openViaDock","grupoPlanoConta","globalParameter","setTimeout","reset","loadGrupoPlanoConta","onLoad","mapKey","values","getValues","isEmpty","showLoading","findById","CLASS_NAME","thenFunction","res","data","progressActions","hideProgress","setValue","Object","keys","map","key","[object Object]","showProgress","animated","className","color","striped","value","onCancel","current","close","handleSubmit","submit","then","wizardFinishProps","confirmButton","label","onConfirm","getMainEditView","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_4__","reactstrap__WEBPACK_IMPORTED_MODULE_5__","reactstrap__WEBPACK_IMPORTED_MODULE_6__","style","marginBottom","borderWidth","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_16__","id","labelWidth","placeholder","sintetica","summer__WEBPACK_IMPORTED_MODULE_9__","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","wrapBody","wikiId","ref","editViewProps","dtoClassName","externalSubmit","validateExtras","erros","planoContaFornecedor","planoContaFornecedorGrupo","push","planoContaCliente","planoContaClienteGrupo","planoContaTransportadora","planoContaTransportadoraGrupo","afterPersist","atualizarGlobalParameter","usuario","setGlobalParameter","handleClose","btnSubmitIcon","btnSubmitLabel","onAfterPageChange","currentPageId","finishProps","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_15__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","result","empresa","__webpack_require__","d","__webpack_exports__","empresaMCG","PlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_3__","assign","isPrependLabel","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","idGrupoPlanoConta","forEach","filtro","searchViewId","type","InputType","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","n","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","CardTitle","Tag","attributes","classes","defaultProps","GrupoPlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"static/js/144.5daf7379.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap';\r\nimport {\r\n  EditForm,\r\n  EditFormRefProps,\r\n  EditViewProps,\r\n  findById,\r\n  getSelectedItem,\r\n  isEmpty,\r\n  ProcessBar,\r\n  progressActions,\r\n  WindowComponent,\r\n  Wizard,\r\n  WizardActionFinishProps,\r\n  WizardPage,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, GrupoPlanoConta } from '../../../../models/dtos/ger/grupoPlanoConta';\r\nimport { atualizarGlobalParameter } from '../../../../services/ger.service';\r\nimport { GlobalState, setGlobalParameter } from '../../../../store/ducks/global.duck';\r\nimport { Reducers } from '../../../../store/ducks/index';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface ScreenFields {\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n}\r\n\r\ninterface GrupoPlanoContaConfigEditProps extends EditViewProps<GrupoPlanoConta> {\r\n  openViaDock?: boolean;\r\n}\r\n\r\nconst GrupoPlanoContaConfigEditView: FC<GrupoPlanoContaConfigEditProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<GrupoPlanoConta & ScreenFields>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n  const dispatch = useDispatch();\r\n\r\n  const editFormRef = useRef<EditFormRefProps>();\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.openViaDock) {\r\n        const { grupoPlanoConta } = globalReducer.globalParameter;\r\n\r\n        setTimeout(() => {\r\n          formProps.reset(grupoPlanoConta);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onPageChange = currentPageId => {\r\n    if (currentPageId === 'configuracao') {\r\n      loadGrupoPlanoConta();\r\n    }\r\n  };\r\n\r\n  const loadGrupoPlanoConta = (onLoad: (rawData?: any) => void = null, mapKey = null) => {\r\n    const values = formProps.getValues();\r\n    if (!isEmpty(values.grupoPlanoConta)) {\r\n      dispatch(showLoading());\r\n      findById(values.grupoPlanoConta, CLASS_NAME, {\r\n        thenFunction: res => {\r\n          const data = mapKey ? res[mapKey] : res;\r\n          dispatch(progressActions.hideProgress());\r\n          formProps.setValue(Object.keys(data).map(key => ({ [key]: data[key] })));\r\n          if (onLoad) {\r\n            onLoad(res);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const reset = () => {\r\n    formProps.setValue('grupoPlanoConta', null);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    editFormRef.current.close(true);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    editFormRef.current.submit().then(reset);\r\n  };\r\n\r\n  const wizardFinishProps: WizardActionFinishProps = {\r\n    confirmButton: {\r\n      label: 'Salvar',\r\n    },\r\n    onCancel: () => {\r\n      reset();\r\n      onCancel();\r\n    },\r\n    onConfirm: handleSubmit,\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaFornecedor) && !isEmpty(formProps.getValues().planoContaFornecedorGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Fornecedor');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaCliente) && !isEmpty(formProps.getValues().planoContaClienteGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Cliente');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaTransportadora) && !isEmpty(formProps.getValues().planoContaTransportadoraGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para a Transportadora');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  const defaultWidth = 200;\r\n\r\n  const afterPersist = (): void => {\r\n    atualizarGlobalParameter(\r\n      { id: globalReducer.globalParameter.usuario.id },\r\n      {\r\n        thenFunction: globalParameter => {\r\n          dispatch(setGlobalParameter(globalParameter));\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const getMainEditView = () => (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Contas de Encerramento</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaLucro\"\r\n                    label=\"Lucro Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Lucro Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaPrejuizo\"\r\n                    label=\"Prejuízo Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Prejuízo Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaResultado\"\r\n                    label=\"Resultado do Exercício\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Resultado do Exercício\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Fornecedor</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedor\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os fornecedores.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedorGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os fornecedores.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Cliente</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaCliente\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os clientes.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaClienteGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os clientes.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Transportadora</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadora\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todas as transportadoras.\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadoraGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para as transportadoras.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Configuração de Grupo de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      globalParameter={globalReducer.globalParameter}\r\n      wrapBody={props.openViaDock === true}\r\n      wikiId={1363}\r\n    >\r\n      <EditForm\r\n        ref={editFormRef}\r\n        formProps={formProps}\r\n        editViewProps={props}\r\n        dtoClassName={CLASS_NAME}\r\n        externalSubmit={true}\r\n        validateExtras={validateExtras}\r\n        afterPersist={afterPersist}\r\n      >\r\n        {props.openViaDock === true ? (\r\n          <div className=\"m-3\">\r\n            {getMainEditView()}\r\n            <ProcessBar handleSubmit={handleSubmit} handleClose={onCancel} btnSubmitIcon=\"save\" btnSubmitLabel=\"Salvar\" />\r\n          </div>\r\n        ) : (\r\n          <Wizard formProps={formProps} onAfterPageChange={onPageChange} finishProps={wizardFinishProps}>\r\n            <WizardPage id=\"grupoPlanoConta\" title=\"Seleção do Grupo de Plano de Contas\">\r\n              <Row>\r\n                <Col>\r\n                  <GrupoPlanoContaIS id=\"grupoPlanoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n                </Col>\r\n              </Row>\r\n            </WizardPage>\r\n            <WizardPage id=\"configuracao\" title=\"Configurações\">\r\n              {getMainEditView()}\r\n            </WizardPage>\r\n          </Wizard>\r\n        )}\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaConfigEditView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n"],"sourceRoot":""}