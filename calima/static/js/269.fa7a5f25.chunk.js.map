{"version":3,"sources":["models/dtos/mlf/giaSpLocalidade.ts","views/pages/mlf/giaSpLocalidade/GiaSpLocalidadeEditView.tsx","models/dtos/ger/cepUF.ts","models/dtos/ger/cepLocalidade.ts","views/components/ger/cepUFIS/CepUFIS.tsx","views/components/ger/cepLocalidadeIS/CepLocalidadeIS.tsx"],"names":["__webpack_require__","d","__webpack_exports__","CLASS_NAME","GiaSpLocalidadeEditView","props","selectedItem","getSelectedItem","formProps","useForm","defaultValues","mode","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_5__","title","wikiId","editViewProps","dtoClassName","validateExtras","erros","getValues","codigoAuxiliar","push","reactstrap__WEBPACK_IMPORTED_MODULE_3__","reactstrap__WEBPACK_IMPORTED_MODULE_4__","_components_ger_cepUFIS_CepUFIS__WEBPACK_IMPORTED_MODULE_8__","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","id","_components_ger_cepLocalidadeIS_CepLocalidadeIS__WEBPACK_IMPORTED_MODULE_7__","onlyNumber","placeholder","isPrependLabel","label","tooltipProps","message","CepUFIS","summer__WEBPACK_IMPORTED_MODULE_2__","assign","inputSearchProps","columns","dataField","text","searchViewId","type","InputType","INPUT_SEARCH","onChange","value","searchFilter","setFilter","CepLocalidadeIS","searchExpressionsFull","defaultExpressions","expressions","item","getFilter","CLASS_NAME_UF","fieldName","length"],"mappings":"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","file":"static/js/269.fa7a5f25.chunk.js","sourcesContent":["import { Basic } from 'summer';\r\nimport { CepLocalidade } from '../ger/cepLocalidade';\r\nimport { CepUF } from '../ger/cepUF';\r\n\r\nexport interface GiaSpLocalidade extends Basic {\r\n  codigoAuxiliar?: string;\r\n  uf?: CepUF;\r\n  localidade?: CepLocalidade;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mlf.model.dto.giasplocalidade';\r\n","import React, { FC } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { EditForm, EditViewProps, getSelectedItem, InputGroupInline, onlyNumber, WindowComponent } from 'summer';\r\nimport { CLASS_NAME, GiaSpLocalidade } from '../../../../models/dtos/mlf/giaSpLocalidade';\r\nimport CepLocalidadeIS from '../../../components/ger/cepLocalidadeIS/CepLocalidadeIS';\r\nimport CepUFIS from '../../../components/ger/cepUFIS/CepUFIS';\r\n\r\ninterface GiaSpLocalidadeEditViewProps extends EditViewProps<GiaSpLocalidade> {}\r\n\r\nconst GiaSpLocalidadeEditView: FC<GiaSpLocalidadeEditViewProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<GiaSpLocalidade>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n    if (formProps.getValues().codigoAuxiliar[0] !== '0') {\r\n      erros.push('O código auxiliar deve começar com 0 (Zero).');\r\n    }\r\n    return erros;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"GIA SP - Código Auxiliar de Localidade\" wikiId={35}>\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} validateExtras={validateExtras}>\r\n        <Row>\r\n          <Col>\r\n            <CepUFIS formProps={{ ...formProps, validation: { required: true } }} id=\"uf\" />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <CepLocalidadeIS formProps={{ ...formProps, validation: { required: true } }} id=\"localidade\" />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { ...onlyNumber(5, 5) } }}\r\n              id=\"codigoAuxiliar\"\r\n              placeholder=\"Informe o Código Auxiliar\"\r\n              isPrependLabel={true}\r\n              label=\"Código Auxiliar\"\r\n              tooltipProps={{ message: 'O código auxiliar deve conter 5 caracteres e obrigatoriamente começar com 0 (Zero). Ex: São Paulo - 01004.' }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GiaSpLocalidadeEditView;\r\n","import { Basic } from 'summer';\r\nimport { CepPais } from './cepPais';\r\n\r\nexport interface CepUF extends Basic {\r\n  codigo?: string;\r\n  sigla?: string;\r\n  nome?: string;\r\n  exterior?: boolean;\r\n  pais?: CepPais;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.cepuf';\r\n","import { Basic } from 'summer';\r\nimport { CepUF } from './cepUF';\r\n\r\nexport interface CepLocalidade extends Basic {\r\n  nome?: string;\r\n  cep?: string;\r\n  tipo?: string;\r\n  codigoMunicipio?: string;\r\n  uf?: CepUF;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.ceplocalidade';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { SearchFilterProps } from '../../../../hooks/useSearchFilter';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/cepUF';\r\n\r\nexport interface CepUFISProps extends InputProps {\r\n  searchFilter?: SearchFilterProps;\r\n}\r\n\r\nconst CepUFIS: FC<CepUFISProps> = props => {\r\n  const onChange = value => {\r\n    if (props.searchFilter) {\r\n      props.searchFilter.setFilter(CLASS_NAME, value);\r\n    }\r\n    if (props.onChange) {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'sigla',\r\n            text: 'Sigla',\r\n          },\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'CepUFSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'UF'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a UF'}\r\n      type={InputType.INPUT_SEARCH}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepUFIS;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { SearchFilterProps } from '../../../../hooks/useSearchFilter';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/cepLocalidade';\r\nimport { CLASS_NAME as CLASS_NAME_UF } from '../../../../models/dtos/ger/cepUF';\r\n\r\nexport interface CepLocalidadeISProps extends InputProps {\r\n  searchFilter?: SearchFilterProps;\r\n}\r\n\r\nconst CepLocalidadeIS: FC<CepLocalidadeISProps> = props => {\r\n  const searchExpressionsFull = defaultExpressions => {\r\n    const expressions = [];\r\n\r\n    if (props.searchFilter) {\r\n      const item = props.searchFilter.getFilter(CLASS_NAME_UF);\r\n      if (item) {\r\n        expressions.push({\r\n          fieldName: 'uf.id',\r\n          value: item.id,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (expressions.length > 0) {\r\n      expressions[0].expressions = defaultExpressions;\r\n    } else {\r\n      expressions.push(...defaultExpressions);\r\n    }\r\n\r\n    return expressions;\r\n  };\r\n\r\n  const onChange = value => {\r\n    if (props.searchFilter) {\r\n      props.searchFilter.setFilter(CLASS_NAME, value);\r\n    }\r\n    if (props.onChange) {\r\n      props.onChange(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'nome',\r\n            text: 'Nome',\r\n          },\r\n          {\r\n            dataField: 'cep',\r\n            text: 'CEP',\r\n          },\r\n          {\r\n            dataField: 'codigoMunicipio',\r\n            text: 'Código do Município',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressionsFull,\r\n        searchViewId: 'CepLocalidadeSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Cidade'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a Cidade'}\r\n      type={InputType.INPUT_SEARCH}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CepLocalidadeIS;\r\n"],"sourceRoot":""}