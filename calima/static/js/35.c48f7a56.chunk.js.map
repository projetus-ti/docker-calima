{"version":3,"sources":["views/pages/mcg/report/razaoEventual/razaoEventualRelRV.ts","views/pages/mcg/report/razaoEventual/RazaoEventualReportView.tsx","dependencies/empresaDependency.ts","models/enumerated/ger/saldoReportEnum.ts","views/components/ger/empresaIS/EmpresaIS.tsx","models/dtos/ger/reportBasicValues.ts","models/dtos/ger/reportViewOptions.ts","views/components/envioEmail/DestinatarioEmailDetailEditView.tsx","views/components/envioEmail/EnvioEmail.tsx","views/components/report/ReportInputs.tsx","views/components/report/ReportForm.tsx","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/enumerated/ger/consolidarEnum.ts","models/enumerated/mcg/razaoOrdenacaoEnum.ts"],"names":["DEFAULT_VALUES","Object","objectSpread2","getDefaultReportBasicValues","consolidar","NORMAL","value","exibirFormatacaoValor","gerarCabecalhoPadraoAdministradora","listaContas","ordenacao","CONTA","DEFAULT_OPTIONS","getDefaultReportViewOptions","DATES","exibirConfiguracaoDadosEmpresa","exibirImprimirValoresColoridos","exibirSegmentacaoFolha","RazaoEventualReportView","props","globalReducer","useSelector","state","_useForm","useForm","defaultValues","mode","handleSubmit","formProps","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","isMatriz","setIsMatriz","useEffect","isEmpty","globalParameter","empresa","initFieldMatriz","armazenarPagina","id","setTimeout","matriz","setValue","buscarConfigLivroFolhaMCG","errorFunction","mensagem","showToast","ERROR","thenFunction","result","razaoFolha","toString","react_default","a","createElement","summer_esm","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","wikiId","ReportForm","assign","localStorageKey","routeProps","reportBasicValues","reportViewOptions","Row","Col","label","labelWidth","isPrependLabel","validation","required","inputDropDownProps","optionsProvider","RAZAO_ORDENACAO_ENUM_VALUES","selectProps","isClearable","type","InputType","DROP_DOWN","placeholder","CONSOLIDAR_ENUM_VALUES","PlanoContaIS","inputSearchProps","isMulti","FormGroup","tag","CustomInput","name","innerRef","register","__webpack_require__","d","__webpack_exports__","NATUREZA","SALDO_REPORT_ENUM","EmpresaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_2__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","INPUT_SEARCH","summer__WEBPACK_IMPORTED_MODULE_0__","_enumerated_ger_saldoReportEnum__WEBPACK_IMPORTED_MODULE_1__","identificadorAjuda","identificadorMenu","designType","GRAPHIC","empresasSelecionadas","envioEmail","anexos","assunto","destinatarios","gerarBom","gerarCabecalhoPadrao","imprimirCodigoEmpresa","imprimirDataHora","imprimirValoresColoridos","requestSolicitacao","saldoReportEnum","saveSession","showDadosEmpresa","showLogoAdministradora","startPage","virtualization","reportEventType","reportViewType","anoLabel","dtFinalLabel","dtInicialLabel","exibirConfiguracaoDataAtual","exibirConfiguracaoLogoAdministradora","exibirEnviarPorEmail","exibirPaginaInicial","refFinalLabel","refInicialLabel","emptyItem","contato","email","DestinatarioEmailDetailEditView","selectedItem","errors","getValues","triggerValidation","handleCancel","validateExtras","currentItem","currentValues","parentObject","EnvioEmail","Fragment","sort","detailView","keyField","propName","className","maxLength","TEXT_AREA","ReportInputs","activeTab","setActiveTab","_props$reportViewOpti","printingTypes","resetObject","length","idGerEmpresa","current","currentMomentDate","endDate","DATE","dtInicial","formatDate","toDate","dtFinal","endOf","REFERENCE","referenciaInicial","format","REF_PATTERN","REFERENCES","referenciaFinal","ANO","ano","String","year","reset","toggleTab","target","tabIndex","dateInitial","dtInicialRequired","dateComponent","datesComponent","dtFinalRequired","referenceInitial","refInicialRequired","referenceComponent","referencesComponent","refFinalRequired","anoComponent","anoRequired","inputMaskedProps","mask","MASK","startPageComponent","min","NUMBER","multiplasEmpresasComponent","exibirConfiguracaoMultiplasEmpresas","xs","inputProps","disabled","gerarPorEmpresas","style","marginBottom","size","segmentacaoFolhaComponent","dataAtualComponent","logoAdmComponent","dadosEmpresaComponent","formatacaoValoresComponent","firstOpen","extraConfigOpened","Nav","tabs","NavItem","NavLink","cx","active","onClick","TabContent","TabPane","tabId","hidden","iconAppend","appendClickHandler","minLength","DESIGN_TYPE_ENUM","envioEmail_EnvioEmail","initialSubject","headerDrawerToggle","dispatch","useDispatch","finishSubmit","data","addExtraParameters","gerarReport","toggleHeaderDrawer","afterSubmit","Form","noValidate","children","report_ReportInputs","event","preventDefault","erros","params","message","AlertType","alertManager","emit","ACTION_EVENTS","SHOW","INFORMATION","handleClose","dispatchClose","history","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","push","grupoPlanoConta","forEach","filtro","GRUPO_ATUAL","HIERARQUIA_INFERIOR"],"mappings":"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","file":"static/js/35.c48f7a56.chunk.js","sourcesContent":["import { PlanoConta } from '../../../../../models/dtos/ger/planoConta';\r\nimport { ReportBasicValues } from '../../../../../models/dtos/ger/reportBasicValues';\r\n\r\nexport interface RazaoEventualRelRV extends ReportBasicValues {\r\n  consolidar?: string;\r\n  exibirDescricaoCPartida?: boolean;\r\n  isAcumularMatrizFilial?: boolean;\r\n  isArmazenarPagina?: boolean;\r\n  isImprimirHistorico?: boolean;\r\n  isQuebraPagina?: boolean;\r\n  listaContas?: PlanoConta[];\r\n  ordenacao?: string;\r\n  totalizarMes?: boolean;\r\n}\r\n\r\nexport const CLASS_KEY: string = 'razaoeventualrelrv';\r\nexport const REPORT_EVENT: string = 'printRazaoEventual';\r\nexport const REPORT_TITLE: string = 'Razão Eventual';\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, CustomInput, FormGroup, Row } from 'reactstrap';\r\nimport { DATES, ERROR, InputGroupInline, InputType, isEmpty, showToast, WindowComponent, WindowComponentProps } from 'summer';\r\nimport { hasEmpresa } from '../../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { Empresa } from '../../../../../models/dtos/ger/empresa';\r\nimport { getDefaultReportBasicValues } from '../../../../../models/dtos/ger/reportBasicValues';\r\nimport { getDefaultReportViewOptions, ReportViewOptions } from '../../../../../models/dtos/ger/reportViewOptions';\r\nimport { LivroFolha } from '../../../../../models/dtos/mcg/livroFolha';\r\nimport { CONSOLIDAR_ENUM_VALUES, NORMAL } from '../../../../../models/enumerated/ger/consolidarEnum';\r\nimport { CONTA, RAZAO_ORDENACAO_ENUM_VALUES } from '../../../../../models/enumerated/mcg/razaoOrdenacaoEnum';\r\nimport { buscarConfigLivroFolhaMCG } from '../../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../../store/ducks';\r\nimport { GlobalState } from '../../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport ReportForm from '../../../../components/report/ReportForm';\r\nimport { CLASS_KEY, RazaoEventualRelRV, REPORT_EVENT, REPORT_TITLE } from './razaoEventualRelRV';\r\n\r\nconst DEFAULT_VALUES: RazaoEventualRelRV = {\r\n  ...getDefaultReportBasicValues(REPORT_TITLE),\r\n  consolidar: NORMAL.value,\r\n  exibirFormatacaoValor: true,\r\n  gerarCabecalhoPadraoAdministradora: true,\r\n  listaContas: [],\r\n  ordenacao: CONTA.value,\r\n};\r\n\r\nconst DEFAULT_OPTIONS: ReportViewOptions = {\r\n  ...getDefaultReportViewOptions(REPORT_EVENT, DATES.value),\r\n  exibirConfiguracaoDadosEmpresa: false,\r\n  exibirImprimirValoresColoridos: true,\r\n  exibirSegmentacaoFolha: true,\r\n};\r\n\r\nconst defaultWidth: number = 125;\r\n\r\nconst RazaoEventualReportView: FC<WindowComponentProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { handleSubmit, ...formProps } = useForm<RazaoEventualRelRV>({ defaultValues: DEFAULT_VALUES, mode: 'onBlur' });\r\n  const [isMatriz, setIsMatriz] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!isEmpty(globalReducer.globalParameter.empresa)) {\r\n        const empresa = globalReducer.globalParameter.empresa;\r\n        initFieldMatriz(empresa);\r\n        armazenarPagina(empresa.id);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const initFieldMatriz = (empresa: Empresa) => {\r\n    setTimeout(() => {\r\n      if (empresa.matriz === null) {\r\n        formProps.setValue('isAcumularMatrizFilial', true);\r\n        setIsMatriz(true);\r\n      }\r\n    }, 800);\r\n  };\r\n\r\n  const armazenarPagina = (id: number) => {\r\n    buscarConfigLivroFolhaMCG(id, {\r\n      errorFunction: mensagem => {\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: (result: LivroFolha) => {\r\n        formProps.setValue('startPage', result.razaoFolha === 0 ? '1' : result.razaoFolha.toString(), true);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Razão Eventual / Sequencial\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={3193}\r\n    >\r\n      <ReportForm\r\n        {...props}\r\n        handleSubmit={handleSubmit}\r\n        formProps={formProps}\r\n        localStorageKey={CLASS_KEY}\r\n        routeProps={props}\r\n        reportBasicValues={DEFAULT_VALUES}\r\n        reportViewOptions={DEFAULT_OPTIONS}\r\n      >\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              id=\"ordenacao\"\r\n              label=\"Ordenar por\"\r\n              labelWidth={defaultWidth}\r\n              isPrependLabel={true}\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              inputDropDownProps={{\r\n                optionsProvider: RAZAO_ORDENACAO_ENUM_VALUES,\r\n                selectProps: { isClearable: false },\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              id=\"consolidar\"\r\n              label=\"Consolidação\"\r\n              labelWidth={defaultWidth}\r\n              isPrependLabel={true}\r\n              placeholder=\"Informe a Consolidação\"\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              inputDropDownProps={{\r\n                optionsProvider: CONSOLIDAR_ENUM_VALUES,\r\n                selectProps: { isClearable: false },\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col>\r\n            <PlanoContaIS\r\n              id=\"listaContas\"\r\n              label=\"Contas\"\r\n              formProps={formProps}\r\n              inputSearchProps={{ selectProps: { isMulti: true } }}\r\n              placeholder=\"Caso nenhuma conta seja selecionada todas serão utilizadas\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <FormGroup tag={Row}>\r\n          <Col>\r\n            <CustomInput\r\n              id=\"checkIsImprimirHistorico\"\r\n              label=\"Imprimir Históricos\"\r\n              name=\"isImprimirHistorico\"\r\n              innerRef={formProps.register}\r\n              type=\"switch\"\r\n            />\r\n          </Col>\r\n        </FormGroup>\r\n\r\n        <FormGroup tag={Row}>\r\n          <Col>\r\n            <CustomInput id=\"checkTotalizarMes\" label=\"Totalizar Por Mês\" name=\"totalizarMes\" innerRef={formProps.register} type=\"switch\" />\r\n          </Col>\r\n        </FormGroup>\r\n\r\n        <FormGroup tag={Row}>\r\n          <Col>\r\n            <CustomInput id=\"idisArmazenarPagina\" label=\"Armazenar Páginas\" name=\"isArmazenarPagina\" innerRef={formProps.register} type=\"switch\" />\r\n          </Col>\r\n        </FormGroup>\r\n\r\n        <FormGroup tag={Row}>\r\n          <Col>\r\n            <CustomInput\r\n              id=\"idexibirDescricaoCPartida\"\r\n              label=\"Exibir a Descrição da C.Partida\"\r\n              name=\"exibirDescricaoCPartida\"\r\n              innerRef={formProps.register}\r\n              type=\"switch\"\r\n            />\r\n          </Col>\r\n        </FormGroup>\r\n\r\n        <FormGroup tag={Row}>\r\n          <Col>\r\n            <CustomInput\r\n              id=\"checkIsQuebraPagina\"\r\n              label=\"Efetuar Quebra de Página\"\r\n              name=\"isQuebraPagina\"\r\n              innerRef={formProps.register}\r\n              title=\"Caso essa opção seja selecionada será inserida uma quebra de página após o total dos lançamentos de cada conta\"\r\n              type=\"switch\"\r\n            />\r\n          </Col>\r\n        </FormGroup>\r\n        {isMatriz ? (\r\n          <FormGroup tag={Row}>\r\n            <Col>\r\n              <CustomInput\r\n                id=\"checkIsAcumularMatrizFilial\"\r\n                label=\"Acumular matriz e filiais\"\r\n                name=\"isAcumularMatrizFilial\"\r\n                innerRef={formProps.register}\r\n                type=\"switch\"\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n        ) : null}\r\n      </ReportForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default RazaoEventualReportView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","export const PADRAO = { label: \"Utilizar sinal '-' para valores negativos\", value: 'PADRAO' };\r\nexport const PARENTESE = { label: \"Utilizar Parênteses '()' para valores negativos\", value: 'PARENTESE' };\r\nexport const NATUREZA = { label: 'Utilizar Natureza da Conta', value: 'NATUREZA' };\r\n\r\nconst SALDO_REPORT_ENUM = [PADRAO, PARENTESE, NATUREZA];\r\n\r\nexport default SALDO_REPORT_ENUM;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/empresaVW';\r\n\r\nexport interface EmpresaInputSearchProps extends InputProps {\r\n  dtoClassName?: string;\r\n}\r\n\r\nconst EmpresaIS: FC<EmpresaInputSearchProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'razaoSocial',\r\n            text: 'Razão Social',\r\n          },\r\n          {\r\n            dataField: 'nomeFantasia',\r\n            text: 'Nome Fantasia',\r\n          },\r\n          {\r\n            dataField: 'cnpj',\r\n            text: 'CNPJ',\r\n          },\r\n          {\r\n            dataField: 'cpf',\r\n            text: 'CPF',\r\n          },\r\n          {\r\n            dataField: 'cei',\r\n            text: 'CEI',\r\n          },\r\n          {\r\n            dataField: 'ie',\r\n            text: 'IE',\r\n          },\r\n          {\r\n            dataField: 'im',\r\n            text: 'IM',\r\n          },\r\n          {\r\n            dataField: 'grupo',\r\n            text: 'Grupo',\r\n          },\r\n        ],\r\n        dtoClassName: props.dtoClassName || CLASS_NAME,\r\n        searchViewId: 'EmpresaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Empresa'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a Empresa'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EmpresaIS;\r\n","import { GRAPHIC } from 'summer';\r\nimport { NATUREZA } from '../../enumerated/ger/saldoReportEnum';\r\nimport { Empresa } from './empresa';\r\nimport { EnvioEmail } from './envioEmail';\r\nimport { Usuario } from './usuario';\r\n\r\nexport interface ReportBasicValues {\r\n  /** chave do relatório */\r\n  key?: string;\r\n  /** Tipo de arquivo gerado */\r\n  designType?: string;\r\n  /** Título do relatório */\r\n  title?: string;\r\n  /** Página inicial do relatório */\r\n  startPage?: string;\r\n  /** Data inicial para a geração do relatório */\r\n  dtInicial?: string;\r\n  /** Data final para a geração do relatório */\r\n  dtFinal?: string;\r\n  /** Referência inicial para a geração do relatório */\r\n  referenciaInicial?: string;\r\n  /** Referência final para a geração do relatório */\r\n  referenciaFinal?: string;\r\n  /** É para imprimir com a data atual ? */\r\n  showCurrentDate?: boolean;\r\n  empresa?: Empresa;\r\n  saldoReportEnum?: string;\r\n  exibirFormatacaoValor?: boolean;\r\n  imprimirValoresColoridos?: boolean;\r\n  /** Ano para a geração do relatório */\r\n  ano?: string;\r\n  showDadosEmpresa?: boolean;\r\n  showLogoAdministradora?: boolean;\r\n\r\n  enviarPorEmail?: boolean;\r\n  envioEmail?: EnvioEmail;\r\n  imprimirDataHora?: boolean;\r\n  imprimirCodigoEmpresa?: boolean;\r\n  usuario?: Usuario;\r\n  segmentacaoFolha?: boolean;\r\n  virtualization?: boolean;\r\n  gerarBom?: boolean;\r\n  identificadorAjuda?: string;\r\n  gerarCabecalhoPadrao?: boolean;\r\n  gerarCabecalhoPadraoAdministradora?: boolean;\r\n  gerarPorEmpresas?: boolean;\r\n  empresasSelecionadas?: Empresa[];\r\n  identificadorMenu?: string;\r\n  enviarParaConnect?: boolean;\r\n  requestSolicitacao?: any; // TODO RequestSolicitacaoDTO;\r\n  enviarEmailAdministradora?: boolean;\r\n\r\n  /** É para salvar a sessão ? */\r\n  saveSession?: boolean;\r\n  idGerEmpresa?: string;\r\n}\r\n\r\nexport function getDefaultReportBasicValues(title: string = null, identificadorAjuda: string = null, identificadorMenu: string = null) {\r\n  return {\r\n    designType: GRAPHIC.value,\r\n    empresasSelecionadas: [],\r\n    envioEmail: {\r\n      anexos: [],\r\n      assunto: title,\r\n      destinatarios: [],\r\n    },\r\n    exibirFormatacaoValor: false,\r\n    gerarBom: true,\r\n    gerarCabecalhoPadrao: true,\r\n    gerarCabecalhoPadraoAdministradora: false,\r\n    identificadorAjuda,\r\n    identificadorMenu,\r\n    imprimirCodigoEmpresa: true,\r\n    imprimirDataHora: false,\r\n    imprimirValoresColoridos: false,\r\n    requestSolicitacao: {},\r\n    saldoReportEnum: NATUREZA.value,\r\n    saveSession: false,\r\n    showDadosEmpresa: true,\r\n    showLogoAdministradora: true,\r\n    startPage: '1',\r\n    title,\r\n    virtualization: false,\r\n  };\r\n}\r\n","import { BasicReportViewOptions } from 'summer';\r\n\r\nexport interface ReportViewOptions extends BasicReportViewOptions {\r\n  exibirEnviarPorEmail?: boolean;\r\n\r\n  exibirPaginaInicial?: boolean;\r\n  exibirConfiguracaoMultiplasEmpresas?: boolean;\r\n  exibirSegmentacaoFolha?: boolean;\r\n  exibirConfiguracaoDataAtual?: boolean;\r\n  exibirImprimirValoresColoridos?: boolean;\r\n  exibirConfiguracaoLogoAdministradora?: boolean;\r\n  exibirConfiguracaoDadosEmpresa?: boolean;\r\n}\r\n\r\nexport function getDefaultReportViewOptions(reportEventType: string, reportViewType: string = null) {\r\n  return {\r\n    anoLabel: 'Ano',\r\n    dtFinalLabel: 'Data Final',\r\n    dtInicialLabel: 'Data Inicial',\r\n    exibirConfiguracaoDadosEmpresa: true,\r\n    exibirConfiguracaoDataAtual: true,\r\n    exibirConfiguracaoLogoAdministradora: true,\r\n    exibirEnviarPorEmail: true,\r\n    exibirPaginaInicial: true,\r\n    refFinalLabel: 'Referência Final',\r\n    refInicialLabel: 'Referência Inicial',\r\n    reportEventType,\r\n    reportViewType,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DetailEditForm, DetailEditViewFormProps, InputGroupInline } from 'summer';\r\nimport { DestinatarioEmail } from '../../../models/dtos/ger/destinatarioEmail';\r\n\r\nconst emptyItem: DestinatarioEmail = {\r\n  contato: '',\r\n  email: '',\r\n};\r\n\r\nconst DestinatarioEmailDetailEditView: React.FC<DetailEditViewFormProps<DestinatarioEmail>> = props => {\r\n  const { errors, getValues, register, setValue, triggerValidation } = useForm<DestinatarioEmail>({\r\n    defaultValues: props.selectedItem || emptyItem,\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const formProps = {\r\n    errors,\r\n    getValues,\r\n    register,\r\n    setValue,\r\n    triggerValidation,\r\n  };\r\n\r\n  const validateExtras = (currentItem: any, currentValues: any[], parentObject: any) => {\r\n    return [];\r\n  };\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <InputGroupInline\r\n        id=\"contato\"\r\n        isPrependLabel={true}\r\n        formProps={{\r\n          ...formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n        label=\"Contato\"\r\n        placeholder=\"Informe o nome do contato\"\r\n      />\r\n\r\n      <InputGroupInline\r\n        id=\"email\"\r\n        isPrependLabel={true}\r\n        formProps={{\r\n          ...formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n        label=\"E-mail\"\r\n        placeholder=\"Informe o e-mail do contato\"\r\n      />\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default DestinatarioEmailDetailEditView;\r\n","import React, { FC } from 'react';\r\nimport { Col, CustomInput, Row } from 'reactstrap';\r\nimport { ColumnsProps, DetailManagerForm, InputGroupInline, InputType, UseFormProps } from 'summer';\r\nimport DestinatarioEmailDetailEditView from './DestinatarioEmailDetailEditView';\r\n\r\nexport interface EnvioEmailProps {\r\n  /** UseFormProps (vide useForm) */\r\n  formProps: UseFormProps;\r\n  /** Assunto padrão */\r\n  initialSubject?: string;\r\n}\r\n\r\nconst EnvioEmail: FC<EnvioEmailProps> = props => {\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'contato',\r\n      sort: true,\r\n      text: 'Contato',\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      sort: true,\r\n      text: 'E-mail',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <p>Dados para Envio do E-mail</p>\r\n      <InputGroupInline\r\n        id=\"envioEmail.assunto\"\r\n        label=\"Assunto\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Assunto\"\r\n        formProps={{\r\n          ...props.formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n      />\r\n\r\n      <DetailManagerForm\r\n        columns={columns}\r\n        title=\"Destinatário E-mail\"\r\n        detailView={DestinatarioEmailDetailEditView}\r\n        keyField=\"email\"\r\n        formProps={props.formProps}\r\n        propName=\"envioEmail.destinatarios\"\r\n        {...props}\r\n      />\r\n\r\n      <p>Copiar para:</p>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"enviarEmailAdministradora\"\r\n            name=\"envioEmail.enviarEmailAdministradora\"\r\n            label=\"Administradora\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"enviarEmailUsuarioLogado\"\r\n            name=\"envioEmail.enviarEmailUsuarioLogado\"\r\n            label=\"Usuário Logado\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <InputGroupInline\r\n        id=\"envioEmail.mensagem\"\r\n        label=\"Mensagem\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Mensagem\"\r\n        formProps={{\r\n          ...props.formProps,\r\n          validation: {\r\n            maxLength: 1000,\r\n          },\r\n        }}\r\n        type={InputType.TEXT_AREA}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EnvioEmail;\r\n","import cx from 'clsx';\r\nimport React, { FC, MouseEvent, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, CustomInput, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  ANO,\r\n  currentMomentDate,\r\n  DATE,\r\n  DATES,\r\n  DESIGN_TYPE_ENUM,\r\n  format,\r\n  formatDate,\r\n  GRAPHIC,\r\n  InputGroupInline,\r\n  InputType,\r\n  REF_PATTERN,\r\n  REFERENCE,\r\n  REFERENCES,\r\n  UseFormProps,\r\n} from 'summer';\r\nimport { ReportBasicValues } from '../../../models/dtos/ger/reportBasicValues';\r\nimport { ReportViewOptions } from '../../../models/dtos/ger/reportViewOptions';\r\nimport SALDO_REPORT_ENUM from '../../../models/enumerated/ger/saldoReportEnum';\r\nimport { Reducers } from '../../../store/ducks';\r\nimport { GlobalState } from '../../../store/ducks/global.duck';\r\nimport EnvioEmail from '../envioEmail/EnvioEmail';\r\nimport EmpresaIS from '../ger/empresaIS/EmpresaIS';\r\n\r\nexport interface ReportProps {\r\n  /** Valores default da geração */\r\n  reportBasicValues: ReportBasicValues;\r\n  /** Opções do relatório */\r\n  reportViewOptions: ReportViewOptions;\r\n  /** UseFormProps (vide useForm) */\r\n  formProps: UseFormProps;\r\n  /** já iniciar as opções extras do relatório expandidas? */\r\n  extraConfigOpened?: boolean;\r\n}\r\n\r\nconst ReportInputs: FC<ReportProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [activeTab, setActiveTab] = useState(1);\r\n\r\n  useEffect(\r\n    () => {\r\n      const { printingTypes, reportViewType } = props.reportViewOptions;\r\n      let resetObject: any = {\r\n        ...props.reportBasicValues,\r\n        designType: printingTypes && printingTypes.length > 0 ? printingTypes[0] : GRAPHIC.value,\r\n        idGerEmpresa: globalReducer.globalParameter.empresa.id,\r\n        startPage: 1,\r\n      };\r\n      const current = currentMomentDate();\r\n      const endDate = currentMomentDate();\r\n      switch (reportViewType) {\r\n        case DATE.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            dtInicial: formatDate(current.toDate()),\r\n          };\r\n          break;\r\n        case DATES.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            dtFinal: formatDate(endDate.endOf('month').toDate()),\r\n            dtInicial: formatDate(current.toDate()),\r\n          };\r\n          break;\r\n        case REFERENCE.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            referenciaInicial: format(current.toDate(), REF_PATTERN),\r\n          };\r\n          break;\r\n        case REFERENCES.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            referenciaFinal: format(current.toDate(), REF_PATTERN),\r\n            referenciaInicial: format(endDate.toDate(), REF_PATTERN),\r\n          };\r\n          break;\r\n        case ANO.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            ano: String(current.year()),\r\n          };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      props.formProps.reset(resetObject);\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [props.reportViewOptions, globalReducer.globalParameter.empresa]\r\n  );\r\n\r\n  const toggleTab = ({ target }: MouseEvent) => {\r\n    const { tabIndex } = target as HTMLElement;\r\n    if (activeTab !== tabIndex) {\r\n      setActiveTab(tabIndex);\r\n    }\r\n  };\r\n\r\n  const restoreTitle = () => {\r\n    props.formProps.setValue('title', props.reportBasicValues.title, true);\r\n  };\r\n\r\n  const dateInitial = (\r\n    <InputGroupInline\r\n      id=\"dtInicial\"\r\n      label={props.reportViewOptions.dtInicialLabel}\r\n      isPrependLabel={true}\r\n      formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.dtInicialRequired } }}\r\n      type={InputType.DATE}\r\n    />\r\n  );\r\n\r\n  const dateComponent = props.reportViewOptions.reportViewType === DATE.value ? dateInitial : null;\r\n\r\n  const datesComponent =\r\n    props.reportViewOptions.reportViewType === DATES.value ? (\r\n      <>\r\n        {dateInitial}\r\n\r\n        <InputGroupInline\r\n          id=\"dtFinal\"\r\n          label={props.reportViewOptions.dtFinalLabel}\r\n          isPrependLabel={true}\r\n          formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.dtFinalRequired } }}\r\n          type={InputType.DATE}\r\n        />\r\n      </>\r\n    ) : null;\r\n\r\n  const referenceInitial = (\r\n    <InputGroupInline\r\n      id=\"referenciaInicial\"\r\n      label={props.reportViewOptions.refInicialLabel}\r\n      isPrependLabel={true}\r\n      formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.refInicialRequired } }}\r\n      type={InputType.REFERENCE}\r\n    />\r\n  );\r\n\r\n  const referenceComponent = props.reportViewOptions.reportViewType === REFERENCE.value ? referenceInitial : null;\r\n\r\n  const referencesComponent =\r\n    props.reportViewOptions.reportViewType === REFERENCES.value ? (\r\n      <>\r\n        {referenceInitial}\r\n\r\n        <InputGroupInline\r\n          id=\"referenciaFinal\"\r\n          label={props.reportViewOptions.refFinalLabel}\r\n          isPrependLabel={true}\r\n          formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.refFinalRequired } }}\r\n          type={InputType.REFERENCE}\r\n        />\r\n      </>\r\n    ) : null;\r\n\r\n  const anoComponent =\r\n    props.reportViewOptions.reportViewType === ANO.value ? (\r\n      <InputGroupInline\r\n        id=\"ano\"\r\n        label={props.reportViewOptions.anoLabel}\r\n        isPrependLabel={true}\r\n        formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.anoRequired } }}\r\n        inputMaskedProps={{ mask: '9999' }}\r\n        type={InputType.MASK}\r\n      />\r\n    ) : null;\r\n\r\n  const startPageComponent = props.reportViewOptions.exibirPaginaInicial ? (\r\n    <InputGroupInline\r\n      id=\"startPage\"\r\n      label=\"Página Inicial\"\r\n      isPrependLabel={true}\r\n      placeholder=\"Página Inicial\"\r\n      formProps={{\r\n        ...props.formProps,\r\n        validation: {\r\n          min: 0,\r\n          required: true,\r\n        },\r\n      }}\r\n      type={InputType.NUMBER}\r\n    />\r\n  ) : null;\r\n\r\n  const multiplasEmpresasComponent = props.reportViewOptions.exibirConfiguracaoMultiplasEmpresas ? (\r\n    <>\r\n      <Row className=\"align-items-center\">\r\n        <Col xs={2}>\r\n          <CustomInput type=\"switch\" id=\"gerarPorEmpresas\" name=\"gerarPorEmpresas\" label=\"Gerar por Empresas\" innerRef={props.formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <EmpresaIS\r\n            formProps={props.formProps}\r\n            label=\"Empresa(s)\"\r\n            placeholder=\"Selecione uma ou várias empresas\"\r\n            id=\"empresasSelecionadas\"\r\n            isPrependLabel={true}\r\n            inputProps={{ disabled: props.formProps.getValues().gerarPorEmpresas, style: { marginBottom: 20 } }}\r\n            inputSearchProps={{ size: 'xl', selectProps: { isMulti: true } }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  ) : null;\r\n\r\n  const segmentacaoFolhaComponent = props.reportViewOptions.exibirSegmentacaoFolha ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput\r\n          type=\"switch\"\r\n          id=\"segmentacaoFolha\"\r\n          name=\"segmentacaoFolha\"\r\n          label=\"Exibir Número das Páginas como Folhas\"\r\n          innerRef={props.formProps.register}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const dataAtualComponent = props.reportViewOptions.exibirConfiguracaoDataAtual ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput type=\"switch\" id=\"showCurrentDate\" name=\"showCurrentDate\" label=\"Imprimir a Data Atual\" innerRef={props.formProps.register} />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const logoAdmComponent = props.reportViewOptions.exibirConfiguracaoLogoAdministradora ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput\r\n          type=\"switch\"\r\n          id=\"showLogoAdministradora\"\r\n          name=\"showLogoAdministradora\"\r\n          label=\"Imprimir o Logo Administradora\"\r\n          innerRef={props.formProps.register}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const dadosEmpresaComponent = props.reportViewOptions.exibirConfiguracaoDadosEmpresa ? (\r\n    <>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"showDadosEmpresa\"\r\n            name=\"showDadosEmpresa\"\r\n            label=\"Imprimir os Dados da Empresa\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"imprimirCodigoEmpresa\"\r\n            name=\"imprimirCodigoEmpresa\"\r\n            label=\"Imprimir o Código Empresa\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  ) : null;\r\n\r\n  const formatacaoValoresComponent = props.reportBasicValues.exibirFormatacaoValor ? (\r\n    <>\r\n      {props.reportViewOptions.exibirImprimirValoresColoridos && (\r\n        <Row className=\"mb-3\">\r\n          <Col>\r\n            <CustomInput\r\n              type=\"switch\"\r\n              id=\"imprimirValoresColoridos\"\r\n              name=\"imprimirValoresColoridos\"\r\n              label=\"Imprimir Valores Devedores em Azul e Credores em Vermelho\"\r\n              innerRef={props.formProps.register}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      <InputGroupInline\r\n        id=\"saldoReportEnum\"\r\n        label=\"Tipo de Formatação de Valores\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Selecione o tipo de formatação dos valores\"\r\n        formProps={{ ...props.formProps, validation: { required: true } }}\r\n        inputDropDownProps={{\r\n          optionsProvider: SALDO_REPORT_ENUM,\r\n          selectProps: { isClearable: false },\r\n        }}\r\n        type={InputType.DROP_DOWN}\r\n      />\r\n    </>\r\n  ) : null;\r\n\r\n  return (\r\n    <Accordion formProps={props.formProps} firstOpen={props.extraConfigOpened || false}>\r\n      <AccordionItem title=\"Configurações adicionais do Relatório\">\r\n        <>\r\n          <Nav tabs={true}>\r\n            <NavItem>\r\n              <NavLink className={cx({ active: activeTab === 1 })} tabIndex={1} onClick={toggleTab}>\r\n                Configurações Gerais\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={cx({ active: activeTab === 2 })}\r\n                tabIndex={2}\r\n                onClick={toggleTab}\r\n                disabled={!props.reportViewOptions.exibirEnviarPorEmail}\r\n              >\r\n                Envio de E-mail\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink className={cx({ active: activeTab === 3 })} tabIndex={3} onClick={toggleTab} disabled={true}>\r\n                Connect\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n\r\n          <TabContent className=\"mb-5\" activeTab={activeTab}>\r\n            <TabPane tabId={1} className=\"mb-0 p-3\">\r\n              <InputGroupInline formProps={props.formProps} id=\"idGerEmpresa\" hidden={true} />\r\n              <InputGroupInline\r\n                id=\"title\"\r\n                label=\"Título\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Título\"\r\n                iconAppend=\"undo-alt\"\r\n                appendClickHandler={restoreTitle}\r\n                formProps={{\r\n                  ...props.formProps,\r\n                  validation: {\r\n                    maxLength: 120,\r\n                    minLength: 5,\r\n                    required: true,\r\n                  },\r\n                }}\r\n              />\r\n\r\n              {startPageComponent}\r\n\r\n              {multiplasEmpresasComponent}\r\n\r\n              {segmentacaoFolhaComponent}\r\n\r\n              {dataAtualComponent}\r\n\r\n              {formatacaoValoresComponent}\r\n\r\n              {logoAdmComponent}\r\n\r\n              {dadosEmpresaComponent}\r\n\r\n              {dateComponent}\r\n              {datesComponent}\r\n              {referenceComponent}\r\n              {referencesComponent}\r\n              {anoComponent}\r\n\r\n              <hr />\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"gerarCabecalhoPadrao\"\r\n                    name=\"gerarCabecalhoPadrao\"\r\n                    label=\"Exibir Cabeçalho\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"virtualization\"\r\n                    name=\"virtualization\"\r\n                    label=\"Virtualizar Relatório\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <InputGroupInline\r\n                id=\"designType\"\r\n                label=\"Tipo de Impressão\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Selecione o tipo de impressão\"\r\n                formProps={{ ...props.formProps, validation: { required: true } }}\r\n                inputDropDownProps={{\r\n                  optionsProvider: props.reportViewOptions.printingTypes ? props.reportViewOptions.printingTypes : DESIGN_TYPE_ENUM,\r\n                  selectProps: { isClearable: false },\r\n                }}\r\n                type={InputType.DROP_DOWN}\r\n              />\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"enviarPorEmail\"\r\n                    name=\"enviarPorEmail\"\r\n                    label=\"Enviar por E-mail\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"enviarParaConnect\"\r\n                    name=\"enviarParaConnect\"\r\n                    label=\"Enviar para o Connect\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId={2} className=\"mb-0 p-3\">\r\n              <EnvioEmail formProps={props.formProps} initialSubject={props.reportBasicValues.title} />\r\n            </TabPane>\r\n            <TabPane tabId={3} className=\"mb-0 p-3\">\r\n              {/* TODO fazer tela de envio de mensagens do Connect*/}\r\n            </TabPane>\r\n          </TabContent>\r\n        </>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\nexport default ReportInputs;\r\n","import React, { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  dispatchClose,\r\n  ErroList,\r\n  ERROR,\r\n  INFORMATION,\r\n  ProcessBar,\r\n  showToast,\r\n  UseFormProps,\r\n} from 'summer';\r\nimport { ReportBasicValues } from '../../../models/dtos/ger/reportBasicValues';\r\nimport { ReportViewOptions } from '../../../models/dtos/ger/reportViewOptions';\r\nimport { gerarReport } from '../../../services/report.service';\r\nimport { Reducers } from '../../../store/ducks';\r\nimport { GlobalState, toggleHeaderDrawer } from '../../../store/ducks/global.duck';\r\nimport ReportInputs from './ReportInputs';\r\n\r\nexport interface BasicReportFormProps {\r\n  /** Função do submit (vide useForm) */\r\n  handleSubmit: (onSubmit: any) => any;\r\n  /** Função de fechar/redirecionar a tela */\r\n  handleClose?: () => void;\r\n  /** Propriedades de formulário da tela pai (ReportView) */\r\n  formProps: UseFormProps;\r\n  /** Valores default da geração */\r\n  reportBasicValues: ReportBasicValues;\r\n  /** Configuração da tela de relatório */\r\n  reportViewOptions: ReportViewOptions;\r\n  /** chave que guarda as configurações de geração no cache */\r\n  localStorageKey?: string;\r\n  /** ID da view da tela pai */\r\n  viewId?: string;\r\n  /** Função de validações extras */\r\n  validateExtras?: (formData: any) => string[];\r\n  /** Função de envio de parametros extras */\r\n  addExtraParameters?: (formData: any) => any;\r\n  /** já iniciar as opções extras do relatório expandidas? */\r\n  extraConfigOpened?: boolean;\r\n  /** Função executada após o submit */\r\n  afterSubmit?: () => void;\r\n}\r\n\r\nexport interface ReportFormProps extends BasicReportFormProps {\r\n  /** Propriedades das rotas */\r\n  routeProps?: RouteComponentProps;\r\n}\r\n\r\nconst ReportForm: FC<ReportFormProps> = props => {\r\n  const { headerDrawerToggle } = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleClose() {\r\n    if (props.handleClose) {\r\n      props.handleClose();\r\n    } else if (props.routeProps) {\r\n      dispatchClose(props.routeProps, props.routeProps.history);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (data: any, event: any) => {\r\n    event.preventDefault();\r\n    let erros = [];\r\n    if (props.validateExtras) {\r\n      erros = props.validateExtras(data);\r\n    }\r\n    if (erros && erros.length) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.ERROR,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      showToast('Seu arquivo está sendo gerado. Uma notificação será exibida quando estiver finalizado e o mesmo poderá ser salvo.', INFORMATION);\r\n      finishSubmit(data);\r\n    }\r\n  };\r\n\r\n  const finishSubmit = (data: any) => {\r\n    if (props.addExtraParameters) {\r\n      data = props.addExtraParameters(data);\r\n    }\r\n    data.saveSession = false;\r\n\r\n    gerarReport(data, props.reportViewOptions.reportEventType, {\r\n      errorFunction: (mensagem: string) => showToast(mensagem, ERROR),\r\n      thenFunction: () => {\r\n        if (!headerDrawerToggle) {\r\n          dispatch(toggleHeaderDrawer());\r\n        }\r\n        if (props.afterSubmit) {\r\n          props.afterSubmit();\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form noValidate={true}>\r\n      {props.children}\r\n      <ReportInputs\r\n        reportBasicValues={props.reportBasicValues}\r\n        reportViewOptions={props.reportViewOptions}\r\n        formProps={props.formProps}\r\n        extraConfigOpened={props.extraConfigOpened}\r\n      />\r\n\r\n      <ProcessBar handleSubmit={props.handleSubmit(onSubmit)} handleClose={handleClose} />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ReportForm;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","export const NORMAL = { value: '1', label: 'Normal' };\r\nexport const GRUPO_ATUAL = { value: '2', label: 'Grupo Atual' };\r\nexport const HIERARQUIA_INFERIOR = { value: '3', label: 'Hierarquia Inferior' };\r\n\r\nexport const CONSOLIDAR_ENUM_VALUES = [NORMAL, GRUPO_ATUAL, HIERARQUIA_INFERIOR];\r\n","export const CONTA = { value: '1', label: 'Conta' };\r\nexport const REFERENCIA = { value: '2', label: 'Referência' };\r\nexport const HISTORICO = { value: '3', label: 'Histórico' };\r\n\r\nexport const RAZAO_ORDENACAO_ENUM_VALUES = [CONTA, REFERENCIA, HISTORICO];\r\n"],"sourceRoot":""}