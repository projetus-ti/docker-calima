{"version":3,"sources":["models/enumerated/mcg/tipoNotaExplicativaEnum.ts","views/pages/mcg/notaExplicativa/NotaExplicativaEditView.tsx","views/pages/mcg/notaExplicativa/NotaExplicativaReferenciaEditView.tsx","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/mcg/notaExplicativaReferencia.ts"],"names":["__webpack_require__","d","__webpack_exports__","TIPO_NOTA_EXPLICATIVA_ENUM_VALUES","label","value","NotaExplicativaEditView","props","globalReducer","useSelector","state","formProps","useForm","defaultValues","Object","objectSpread2","selectedItem","mode","useEffect","contaContabil","conta","atualizarValor","getValues","example","data","toDate","globalParameter","empresaMCG","refAtual","DATE_MONTH_YEAR_PATTERN","empresa","getSaldo","errorFunction","mensagem","showToast","ERROR","thenFunction","result","setTimeout","setValue","formatSaldo","react_default","a","createElement","summer_esm","handleSubmit","handleCancel","validateExtras","formValues","currentValues","parentObject","erros","notasExplicativas","find","it","rowIndex","push","Row","Col","PlanoContaIS","id","onChange","validation","required","placeholder","min","max","isPrependLabel","disabled","labelWidth","type","InputType","TEXT_AREA","NotaExplicativaReferenciaEditView","getSelectedItem","triggerValidation","defaultSortProps","dataField","order","OrderType","DESC","notaExplicativaFormProps","columns","text","detailView","propName","title","editViewProps","dtoClassName","CLASS_NAME","beforePersist","formData","referencia","formatDate","parseRefToDate","isEmpty","hidden","REFERENCE","inputDropDownProps","optionsProvider","selectProps","isClearable","DROP_DOWN","assign","defaultSortDirection","defaultSorted","keyField","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","grupoPlanoConta","forEach","filtro","searchViewId","INPUT_SEARCH"],"mappings":"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","file":"static/js/265.36a72e6c.chunk.js","sourcesContent":["export const DRE = { label: 'Demonstração do Resultado do Exercício', value: 'DRE' };\r\nexport const BALANCO = { label: 'Balanço Patrimonial', value: 'BALANCO' };\r\nexport const DIARIO = { label: 'Diário', value: 'DIARIO' };\r\n\r\nexport const TIPO_NOTA_EXPLICATIVA_ENUM_VALUES = [DRE, BALANCO, DIARIO];\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport {\r\n  DATE_MONTH_YEAR_PATTERN,\r\n  DetailEditForm,\r\n  DetailEditViewFormProps,\r\n  ERROR,\r\n  formatSaldo,\r\n  InputGroupInline,\r\n  InputType,\r\n  showToast,\r\n  toDate,\r\n} from 'summer';\r\nimport { NotaExplicativa } from '../../../../models/dtos/mcg/notaExplicativa';\r\nimport { Saldo } from '../../../../models/dtos/mcg/saldo';\r\nimport { getSaldo } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\nconst labelWidth: number = 180;\r\n\r\nconst NotaExplicativaEditView: FC<DetailEditViewFormProps<NotaExplicativa>> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<NotaExplicativa>({\r\n    defaultValues: { ...props.selectedItem },\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      // tslint:disable-next-line:no-unused-expression\r\n      props.selectedItem && props.selectedItem.contaContabil.conta && atualizarValor();\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const atualizarValor = () => {\r\n    if (formProps.getValues().contaContabil) {\r\n      const example: Saldo = {\r\n        conta: formProps.getValues().contaContabil.conta,\r\n        data: toDate(globalReducer.globalParameter.empresaMCG.refAtual, DATE_MONTH_YEAR_PATTERN),\r\n        empresa: globalReducer.globalParameter.empresa,\r\n      };\r\n      getSaldo(example, {\r\n        errorFunction: (mensagem: string): void => {\r\n          showToast(mensagem, ERROR);\r\n        },\r\n        thenFunction: (result): void => {\r\n          setTimeout(() => formProps.setValue('saldo', formatSaldo(result), true), 500);\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateExtras = (formValues, currentValues, parentObject) => {\r\n    const erros = [];\r\n\r\n    if (parentObject.notasExplicativas) {\r\n      const foundConta = parentObject.notasExplicativas.find(\r\n        it => it.contaContabil.conta === formValues.contaContabil.conta && it.rowIndex !== formValues.rowIndex\r\n      );\r\n\r\n      if (foundConta) {\r\n        erros.push('Notas - Não pode existir notas diferentes com o mesmo Plano de Conta');\r\n      }\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <Row>\r\n        <Col>\r\n          <PlanoContaIS\r\n            id=\"contaContabil\"\r\n            onChange={atualizarValor}\r\n            formProps={{ ...formProps, validation: { required: true } }}\r\n            label=\"Conta\"\r\n            placeholder=\"Informe a Conta\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={{ ...formProps, validation: { min: 0, max: 100 } }}\r\n            id=\"saldo\"\r\n            isPrependLabel={true}\r\n            label=\"Saldo\"\r\n            disabled={true}\r\n            labelWidth={labelWidth}\r\n            placeholder=\"Visualize aqui o saldo da conta.\"\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroupInline\r\n            formProps={{ ...formProps, validation: { min: 0, max: 100 } }}\r\n            id=\"nota\"\r\n            isPrependLabel={true}\r\n            label=\"Nota Explicativa\"\r\n            labelWidth={labelWidth}\r\n            placeholder=\"Informe a Nota Explicativa.\"\r\n            type={InputType.TEXT_AREA}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default NotaExplicativaEditView;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Col, Row } from 'reactstrap';\r\nimport {\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  DetailManagerForm,\r\n  DetailManagerFormProps,\r\n  EditForm,\r\n  EditViewProps,\r\n  formatDate,\r\n  getSelectedItem,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  OrderType,\r\n  parseRefToDate,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { CLASS_NAME, NotaExplicativaReferencia } from '../../../../models/dtos/mcg/notaExplicativaReferencia';\r\nimport { TIPO_NOTA_EXPLICATIVA_ENUM_VALUES } from '../../../../models/enumerated/mcg/tipoNotaExplicativaEnum';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport NotaExplicativaEditView from './NotaExplicativaEditView';\r\n\r\ninterface NotaExplicativaReferenciaFormProps extends EditViewProps<NotaExplicativaReferencia> {}\r\n\r\nconst maxWidth = 120;\r\n\r\nconst NotaExplicativaReferenciaEditView: React.FC<NotaExplicativaReferenciaFormProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const empresaMCG = globalReducer.globalParameter.empresaMCG;\r\n  const formProps = useForm<NotaExplicativaReferencia>({ defaultValues: { ...selectedItem, empresaMCG }, mode: 'onBlur' });\r\n\r\n  setTimeout(() => formProps.triggerValidation('tipo'), 500);\r\n\r\n  const defaultSortProps: DefaultSortProps[] = [\r\n    {\r\n      dataField: 'contaContabil.conta',\r\n      order: OrderType.DESC,\r\n    },\r\n  ];\r\n\r\n  const columnsNotaExplicativa: ColumnsProps[] = [\r\n    {\r\n      dataField: 'contaContabil.conta',\r\n      text: 'Limite do Rendimento',\r\n    },\r\n    {\r\n      dataField: 'nota',\r\n      text: 'aliquota',\r\n    },\r\n  ];\r\n\r\n  const notaExplicativaFormProps: DetailManagerFormProps = {\r\n    columns: columnsNotaExplicativa,\r\n    detailView: NotaExplicativaEditView,\r\n    formProps,\r\n    propName: 'notasExplicativas',\r\n    title: 'Notas Explicativas',\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (isEmpty(formProps.getValues().notasExplicativas)) {\r\n      erros.push('Notas - É necessário ter pelo menos uma nota explicativa.');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  const beforePersist = (formData: NotaExplicativaReferencia) => {\r\n    formData.referencia = formatDate(parseRefToDate(formData.referencia, 0));\r\n    return formData;\r\n  };\r\n\r\n  return (\r\n    <WindowComponent title=\"Manutenção de Contas Parte B Lalur\">\r\n      <EditForm formProps={formProps} editViewProps={props} dtoClassName={CLASS_NAME} beforePersist={beforePersist} validateExtras={validateExtras}>\r\n        <InputGroupInline formProps={formProps} id=\"empresaMCG.id\" hidden={true} />\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"referencia\"\r\n              isPrependLabel={true}\r\n              labelWidth={maxWidth}\r\n              label=\"Referência\"\r\n              placeholder=\"Informe a Referência\"\r\n              type={InputType.REFERENCE}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              id=\"tipo\"\r\n              label=\"Tipo\"\r\n              isPrependLabel={true}\r\n              labelWidth={maxWidth}\r\n              placeholder=\"Selecione um Tipo\"\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              inputDropDownProps={{\r\n                optionsProvider: TIPO_NOTA_EXPLICATIVA_ENUM_VALUES,\r\n                selectProps: { isClearable: false },\r\n              }}\r\n              type={InputType.DROP_DOWN}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={formProps}\r\n              id=\"notaInicial\"\r\n              isPrependLabel={true}\r\n              labelWidth={maxWidth}\r\n              label=\"Nota Inicial\"\r\n              placeholder=\"Informe a Nota Inicial\"\r\n              type={InputType.TEXT_AREA}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <InputGroupInline\r\n              formProps={formProps}\r\n              id=\"notaFinal\"\r\n              isPrependLabel={true}\r\n              labelWidth={maxWidth}\r\n              label=\"Nota Final\"\r\n              placeholder=\"Informe a Nota Final\"\r\n              type={InputType.TEXT_AREA}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <DetailManagerForm\r\n              {...props}\r\n              defaultSortDirection={OrderType.DESC}\r\n              defaultSorted={defaultSortProps}\r\n              {...notaExplicativaFormProps}\r\n              keyField=\"rowIndex\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default NotaExplicativaReferenciaEditView;\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { EmpresaMCG } from './empresaMCG';\r\nimport { NotaExplicativa } from './notaExplicativa';\r\n\r\nexport interface NotaExplicativaReferencia extends Basic {\r\n  referencia?: string;\r\n  notaInicial?: string;\r\n  notaFinal?: string;\r\n  tipo?: string;\r\n  empresaMCG?: EmpresaMCG;\r\n  notasExplicativas?: NotaExplicativa;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.notaexplicativareferencia';\r\n"],"sourceRoot":""}