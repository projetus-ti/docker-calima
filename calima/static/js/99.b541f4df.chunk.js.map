{"version":3,"sources":["views/pages/mcg/report/planoContaRelacionamento/planoContaRelacionamentoRV.ts","views/pages/mcg/report/planoContaRelacionamento/PlanoContaRelacionamentoReportView.tsx","dependencies/empresaDependency.ts","models/enumerated/ger/saldoReportEnum.ts","views/components/ger/empresaIS/EmpresaIS.tsx","models/dtos/ger/reportBasicValues.ts","models/dtos/ger/reportViewOptions.ts","views/components/envioEmail/DestinatarioEmailDetailEditView.tsx","views/components/envioEmail/EnvioEmail.tsx","views/components/report/ReportInputs.tsx","views/components/report/ReportForm.tsx","dependencies/empresaMCGDependency.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts"],"names":["DEFAULT_VALUES","Object","objectSpread2","getDefaultReportBasicValues","idPlanoConta","DEFAULT_OPTIONS","getDefaultReportViewOptions","exibirConfiguracaoDadosEmpresa","LalurLacsParteAReportView","props","globalReducer","useSelector","state","_useForm","useForm","defaultValues","mode","handleSubmit","formProps","objectWithoutProperties","useEffect","globalParameter","empresa","id","grupoPlanoConta","setTimeout","register","name","setValue","react_default","a","createElement","summer_esm","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","wikiId","wikiTitle","PlanoContaIS","onChange","planoConta","getValues","push","label","placeholder","tooltipProps","message","hidden","ReportForm","assign","localStorageKey","routeProps","reportBasicValues","reportViewOptions","result","__webpack_require__","d","__webpack_exports__","NATUREZA","value","SALDO_REPORT_ENUM","EmpresaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_2__","isPrependLabel","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","type","InputType","INPUT_SEARCH","summer__WEBPACK_IMPORTED_MODULE_0__","_enumerated_ger_saldoReportEnum__WEBPACK_IMPORTED_MODULE_1__","identificadorAjuda","identificadorMenu","designType","GRAPHIC","empresasSelecionadas","envioEmail","anexos","assunto","destinatarios","exibirFormatacaoValor","gerarBom","gerarCabecalhoPadrao","gerarCabecalhoPadraoAdministradora","imprimirCodigoEmpresa","imprimirDataHora","imprimirValoresColoridos","requestSolicitacao","saldoReportEnum","saveSession","showDadosEmpresa","showLogoAdministradora","startPage","virtualization","reportEventType","reportViewType","anoLabel","dtFinalLabel","dtInicialLabel","exibirConfiguracaoDataAtual","exibirConfiguracaoLogoAdministradora","exibirEnviarPorEmail","exibirPaginaInicial","refFinalLabel","refInicialLabel","emptyItem","contato","email","DestinatarioEmailDetailEditView","selectedItem","errors","triggerValidation","handleCancel","validateExtras","currentItem","currentValues","parentObject","validation","required","EnvioEmail","Fragment","sort","detailView","keyField","propName","Row","className","Col","CustomInput","innerRef","maxLength","TEXT_AREA","ReportInputs","_useState","useState","_useState2","slicedToArray","activeTab","setActiveTab","_props$reportViewOpti","printingTypes","resetObject","length","idGerEmpresa","current","currentMomentDate","endDate","DATE","dtInicial","formatDate","toDate","DATES","dtFinal","endOf","REFERENCE","referenciaInicial","format","REF_PATTERN","REFERENCES","referenciaFinal","ANO","ano","String","year","reset","toggleTab","target","tabIndex","dateInitial","dtInicialRequired","dateComponent","datesComponent","dtFinalRequired","referenceInitial","refInicialRequired","referenceComponent","referencesComponent","refFinalRequired","anoComponent","anoRequired","inputMaskedProps","mask","MASK","startPageComponent","min","NUMBER","multiplasEmpresasComponent","exibirConfiguracaoMultiplasEmpresas","xs","inputProps","disabled","gerarPorEmpresas","style","marginBottom","size","selectProps","isMulti","segmentacaoFolhaComponent","exibirSegmentacaoFolha","dataAtualComponent","logoAdmComponent","dadosEmpresaComponent","formatacaoValoresComponent","exibirImprimirValoresColoridos","inputDropDownProps","optionsProvider","isClearable","DROP_DOWN","firstOpen","extraConfigOpened","Nav","tabs","NavItem","NavLink","cx","active","onClick","TabContent","TabPane","tabId","iconAppend","appendClickHandler","minLength","DESIGN_TYPE_ENUM","envioEmail_EnvioEmail","initialSubject","headerDrawerToggle","dispatch","useDispatch","finishSubmit","data","addExtraParameters","gerarReport","errorFunction","mensagem","showToast","ERROR","thenFunction","toggleHeaderDrawer","afterSubmit","Form","noValidate","children","report_ReportInputs","event","preventDefault","erros","params","AlertType","alertManager","emit","ACTION_EVENTS","SHOW","INFORMATION","handleClose","dispatchClose","history","empresaMCG","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","forEach","filtro","idGrupoPlanoConta"],"mappings":"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","file":"static/js/99.b541f4df.chunk.js","sourcesContent":["import { PlanoConta } from '../../../../../models/dtos/ger/planoConta';\r\nimport { ReportBasicValues } from '../../../../../models/dtos/ger/reportBasicValues';\r\n\r\nexport interface PlanoContaRelacionamentoRV extends ReportBasicValues {\r\n  idPlanoConta?: number[];\r\n  idGrupoPlanoConta?: number;\r\n  planoConta?: PlanoConta;\r\n}\r\n\r\nexport const CLASS_KEY: string = 'planoContarelacionamentosrv';\r\nexport const REPORT_EVENT: string = 'printPlanoContaRelacionamentos';\r\nexport const REPORT_TITLE: string = 'Relacionamentos de Plano de Contas';\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { InputGroupInline, WindowComponent, WindowComponentProps } from 'summer';\r\nimport { hasEmpresa } from '../../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../../dependencies/empresaMCGDependency';\r\nimport { getDefaultReportBasicValues } from '../../../../../models/dtos/ger/reportBasicValues';\r\nimport { getDefaultReportViewOptions, ReportViewOptions } from '../../../../../models/dtos/ger/reportViewOptions';\r\nimport { Reducers } from '../../../../../store/ducks';\r\nimport { GlobalState } from '../../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport ReportForm from '../../../../components/report/ReportForm';\r\nimport { CLASS_KEY, PlanoContaRelacionamentoRV, REPORT_EVENT, REPORT_TITLE } from './planoContaRelacionamentoRV';\r\n\r\nconst DEFAULT_VALUES: PlanoContaRelacionamentoRV = {\r\n  ...getDefaultReportBasicValues(REPORT_TITLE),\r\n  idPlanoConta: [],\r\n};\r\n\r\nconst DEFAULT_OPTIONS: ReportViewOptions = {\r\n  ...getDefaultReportViewOptions(REPORT_EVENT),\r\n  exibirConfiguracaoDadosEmpresa: false,\r\n};\r\n\r\nconst LalurLacsParteAReportView: FC<WindowComponentProps & RouteComponentProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const { handleSubmit, ...formProps } = useForm<PlanoContaRelacionamentoRV>({ defaultValues: DEFAULT_VALUES, mode: 'onBlur' });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa) {\r\n        const {\r\n          grupoPlanoConta: { id },\r\n        } = globalReducer.globalParameter;\r\n        setTimeout(() => {\r\n          formProps.register({ name: 'idPlanoConta' });\r\n          formProps.setValue('idGrupoPlanoConta', id, true);\r\n        }, 1000);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onChangePlanoConta = () => {\r\n    const planoConta = [];\r\n    if (formProps.getValues().planoConta) {\r\n      planoConta.push(formProps.getValues().planoConta.id);\r\n      formProps.setValue('idPlanoConta', planoConta, true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title={REPORT_TITLE}\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      wikiId={5878}\r\n      wikiTitle={'Relacionamentos de Plano de Contas'}\r\n    >\r\n      <PlanoContaIS\r\n        id=\"planoConta\"\r\n        formProps={formProps}\r\n        onChange={onChangePlanoConta}\r\n        label=\"Conta\"\r\n        placeholder=\"Informe a conta\"\r\n        tooltipProps={{ message: 'Caso nenhuma conta seja informada todas serão buscadas' }}\r\n      />\r\n      <InputGroupInline formProps={formProps} id=\"idGrupoPlanoConta\" hidden={true} />\r\n      <ReportForm\r\n        {...props}\r\n        handleSubmit={handleSubmit}\r\n        formProps={formProps}\r\n        localStorageKey={CLASS_KEY}\r\n        routeProps={props}\r\n        reportBasicValues={DEFAULT_VALUES}\r\n        reportViewOptions={DEFAULT_OPTIONS}\r\n      />\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default LalurLacsParteAReportView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","export const PADRAO = { label: \"Utilizar sinal '-' para valores negativos\", value: 'PADRAO' };\r\nexport const PARENTESE = { label: \"Utilizar Parênteses '()' para valores negativos\", value: 'PARENTESE' };\r\nexport const NATUREZA = { label: 'Utilizar Natureza da Conta', value: 'NATUREZA' };\r\n\r\nconst SALDO_REPORT_ENUM = [PADRAO, PARENTESE, NATUREZA];\r\n\r\nexport default SALDO_REPORT_ENUM;\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/empresaVW';\r\n\r\nexport interface EmpresaInputSearchProps extends InputProps {\r\n  dtoClassName?: string;\r\n}\r\n\r\nconst EmpresaIS: FC<EmpresaInputSearchProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'razaoSocial',\r\n            text: 'Razão Social',\r\n          },\r\n          {\r\n            dataField: 'nomeFantasia',\r\n            text: 'Nome Fantasia',\r\n          },\r\n          {\r\n            dataField: 'cnpj',\r\n            text: 'CNPJ',\r\n          },\r\n          {\r\n            dataField: 'cpf',\r\n            text: 'CPF',\r\n          },\r\n          {\r\n            dataField: 'cei',\r\n            text: 'CEI',\r\n          },\r\n          {\r\n            dataField: 'ie',\r\n            text: 'IE',\r\n          },\r\n          {\r\n            dataField: 'im',\r\n            text: 'IM',\r\n          },\r\n          {\r\n            dataField: 'grupo',\r\n            text: 'Grupo',\r\n          },\r\n        ],\r\n        dtoClassName: props.dtoClassName || CLASS_NAME,\r\n        searchViewId: 'EmpresaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Empresa'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe a Empresa'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EmpresaIS;\r\n","import { GRAPHIC } from 'summer';\r\nimport { NATUREZA } from '../../enumerated/ger/saldoReportEnum';\r\nimport { Empresa } from './empresa';\r\nimport { EnvioEmail } from './envioEmail';\r\nimport { Usuario } from './usuario';\r\n\r\nexport interface ReportBasicValues {\r\n  /** chave do relatório */\r\n  key?: string;\r\n  /** Tipo de arquivo gerado */\r\n  designType?: string;\r\n  /** Título do relatório */\r\n  title?: string;\r\n  /** Página inicial do relatório */\r\n  startPage?: string;\r\n  /** Data inicial para a geração do relatório */\r\n  dtInicial?: string;\r\n  /** Data final para a geração do relatório */\r\n  dtFinal?: string;\r\n  /** Referência inicial para a geração do relatório */\r\n  referenciaInicial?: string;\r\n  /** Referência final para a geração do relatório */\r\n  referenciaFinal?: string;\r\n  /** É para imprimir com a data atual ? */\r\n  showCurrentDate?: boolean;\r\n  empresa?: Empresa;\r\n  saldoReportEnum?: string;\r\n  exibirFormatacaoValor?: boolean;\r\n  imprimirValoresColoridos?: boolean;\r\n  /** Ano para a geração do relatório */\r\n  ano?: string;\r\n  showDadosEmpresa?: boolean;\r\n  showLogoAdministradora?: boolean;\r\n\r\n  enviarPorEmail?: boolean;\r\n  envioEmail?: EnvioEmail;\r\n  imprimirDataHora?: boolean;\r\n  imprimirCodigoEmpresa?: boolean;\r\n  usuario?: Usuario;\r\n  segmentacaoFolha?: boolean;\r\n  virtualization?: boolean;\r\n  gerarBom?: boolean;\r\n  identificadorAjuda?: string;\r\n  gerarCabecalhoPadrao?: boolean;\r\n  gerarCabecalhoPadraoAdministradora?: boolean;\r\n  gerarPorEmpresas?: boolean;\r\n  empresasSelecionadas?: Empresa[];\r\n  identificadorMenu?: string;\r\n  enviarParaConnect?: boolean;\r\n  requestSolicitacao?: any; // TODO RequestSolicitacaoDTO;\r\n  enviarEmailAdministradora?: boolean;\r\n\r\n  /** É para salvar a sessão ? */\r\n  saveSession?: boolean;\r\n  idGerEmpresa?: string;\r\n}\r\n\r\nexport function getDefaultReportBasicValues(title: string = null, identificadorAjuda: string = null, identificadorMenu: string = null) {\r\n  return {\r\n    designType: GRAPHIC.value,\r\n    empresasSelecionadas: [],\r\n    envioEmail: {\r\n      anexos: [],\r\n      assunto: title,\r\n      destinatarios: [],\r\n    },\r\n    exibirFormatacaoValor: false,\r\n    gerarBom: true,\r\n    gerarCabecalhoPadrao: true,\r\n    gerarCabecalhoPadraoAdministradora: false,\r\n    identificadorAjuda,\r\n    identificadorMenu,\r\n    imprimirCodigoEmpresa: true,\r\n    imprimirDataHora: false,\r\n    imprimirValoresColoridos: false,\r\n    requestSolicitacao: {},\r\n    saldoReportEnum: NATUREZA.value,\r\n    saveSession: false,\r\n    showDadosEmpresa: true,\r\n    showLogoAdministradora: true,\r\n    startPage: '1',\r\n    title,\r\n    virtualization: false,\r\n  };\r\n}\r\n","import { BasicReportViewOptions } from 'summer';\r\n\r\nexport interface ReportViewOptions extends BasicReportViewOptions {\r\n  exibirEnviarPorEmail?: boolean;\r\n\r\n  exibirPaginaInicial?: boolean;\r\n  exibirConfiguracaoMultiplasEmpresas?: boolean;\r\n  exibirSegmentacaoFolha?: boolean;\r\n  exibirConfiguracaoDataAtual?: boolean;\r\n  exibirImprimirValoresColoridos?: boolean;\r\n  exibirConfiguracaoLogoAdministradora?: boolean;\r\n  exibirConfiguracaoDadosEmpresa?: boolean;\r\n}\r\n\r\nexport function getDefaultReportViewOptions(reportEventType: string, reportViewType: string = null) {\r\n  return {\r\n    anoLabel: 'Ano',\r\n    dtFinalLabel: 'Data Final',\r\n    dtInicialLabel: 'Data Inicial',\r\n    exibirConfiguracaoDadosEmpresa: true,\r\n    exibirConfiguracaoDataAtual: true,\r\n    exibirConfiguracaoLogoAdministradora: true,\r\n    exibirEnviarPorEmail: true,\r\n    exibirPaginaInicial: true,\r\n    refFinalLabel: 'Referência Final',\r\n    refInicialLabel: 'Referência Inicial',\r\n    reportEventType,\r\n    reportViewType,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { DetailEditForm, DetailEditViewFormProps, InputGroupInline } from 'summer';\r\nimport { DestinatarioEmail } from '../../../models/dtos/ger/destinatarioEmail';\r\n\r\nconst emptyItem: DestinatarioEmail = {\r\n  contato: '',\r\n  email: '',\r\n};\r\n\r\nconst DestinatarioEmailDetailEditView: React.FC<DetailEditViewFormProps<DestinatarioEmail>> = props => {\r\n  const { errors, getValues, register, setValue, triggerValidation } = useForm<DestinatarioEmail>({\r\n    defaultValues: props.selectedItem || emptyItem,\r\n    mode: 'onBlur',\r\n  });\r\n\r\n  const formProps = {\r\n    errors,\r\n    getValues,\r\n    register,\r\n    setValue,\r\n    triggerValidation,\r\n  };\r\n\r\n  const validateExtras = (currentItem: any, currentValues: any[], parentObject: any) => {\r\n    return [];\r\n  };\r\n\r\n  return (\r\n    <DetailEditForm handleSubmit={props.handleSubmit} handleCancel={props.handleCancel} formProps={formProps} validateExtras={validateExtras}>\r\n      <InputGroupInline\r\n        id=\"contato\"\r\n        isPrependLabel={true}\r\n        formProps={{\r\n          ...formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n        label=\"Contato\"\r\n        placeholder=\"Informe o nome do contato\"\r\n      />\r\n\r\n      <InputGroupInline\r\n        id=\"email\"\r\n        isPrependLabel={true}\r\n        formProps={{\r\n          ...formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n        label=\"E-mail\"\r\n        placeholder=\"Informe o e-mail do contato\"\r\n      />\r\n    </DetailEditForm>\r\n  );\r\n};\r\n\r\nexport default DestinatarioEmailDetailEditView;\r\n","import React, { FC } from 'react';\r\nimport { Col, CustomInput, Row } from 'reactstrap';\r\nimport { ColumnsProps, DetailManagerForm, InputGroupInline, InputType, UseFormProps } from 'summer';\r\nimport DestinatarioEmailDetailEditView from './DestinatarioEmailDetailEditView';\r\n\r\nexport interface EnvioEmailProps {\r\n  /** UseFormProps (vide useForm) */\r\n  formProps: UseFormProps;\r\n  /** Assunto padrão */\r\n  initialSubject?: string;\r\n}\r\n\r\nconst EnvioEmail: FC<EnvioEmailProps> = props => {\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'contato',\r\n      sort: true,\r\n      text: 'Contato',\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      sort: true,\r\n      text: 'E-mail',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <p>Dados para Envio do E-mail</p>\r\n      <InputGroupInline\r\n        id=\"envioEmail.assunto\"\r\n        label=\"Assunto\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Assunto\"\r\n        formProps={{\r\n          ...props.formProps,\r\n          validation: {\r\n            required: true,\r\n          },\r\n        }}\r\n      />\r\n\r\n      <DetailManagerForm\r\n        columns={columns}\r\n        title=\"Destinatário E-mail\"\r\n        detailView={DestinatarioEmailDetailEditView}\r\n        keyField=\"email\"\r\n        formProps={props.formProps}\r\n        propName=\"envioEmail.destinatarios\"\r\n        {...props}\r\n      />\r\n\r\n      <p>Copiar para:</p>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"enviarEmailAdministradora\"\r\n            name=\"envioEmail.enviarEmailAdministradora\"\r\n            label=\"Administradora\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"enviarEmailUsuarioLogado\"\r\n            name=\"envioEmail.enviarEmailUsuarioLogado\"\r\n            label=\"Usuário Logado\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <InputGroupInline\r\n        id=\"envioEmail.mensagem\"\r\n        label=\"Mensagem\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Mensagem\"\r\n        formProps={{\r\n          ...props.formProps,\r\n          validation: {\r\n            maxLength: 1000,\r\n          },\r\n        }}\r\n        type={InputType.TEXT_AREA}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EnvioEmail;\r\n","import cx from 'clsx';\r\nimport React, { FC, MouseEvent, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Col, CustomInput, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap';\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  ANO,\r\n  currentMomentDate,\r\n  DATE,\r\n  DATES,\r\n  DESIGN_TYPE_ENUM,\r\n  format,\r\n  formatDate,\r\n  GRAPHIC,\r\n  InputGroupInline,\r\n  InputType,\r\n  REF_PATTERN,\r\n  REFERENCE,\r\n  REFERENCES,\r\n  UseFormProps,\r\n} from 'summer';\r\nimport { ReportBasicValues } from '../../../models/dtos/ger/reportBasicValues';\r\nimport { ReportViewOptions } from '../../../models/dtos/ger/reportViewOptions';\r\nimport SALDO_REPORT_ENUM from '../../../models/enumerated/ger/saldoReportEnum';\r\nimport { Reducers } from '../../../store/ducks';\r\nimport { GlobalState } from '../../../store/ducks/global.duck';\r\nimport EnvioEmail from '../envioEmail/EnvioEmail';\r\nimport EmpresaIS from '../ger/empresaIS/EmpresaIS';\r\n\r\nexport interface ReportProps {\r\n  /** Valores default da geração */\r\n  reportBasicValues: ReportBasicValues;\r\n  /** Opções do relatório */\r\n  reportViewOptions: ReportViewOptions;\r\n  /** UseFormProps (vide useForm) */\r\n  formProps: UseFormProps;\r\n  /** já iniciar as opções extras do relatório expandidas? */\r\n  extraConfigOpened?: boolean;\r\n}\r\n\r\nconst ReportInputs: FC<ReportProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const [activeTab, setActiveTab] = useState(1);\r\n\r\n  useEffect(\r\n    () => {\r\n      const { printingTypes, reportViewType } = props.reportViewOptions;\r\n      let resetObject: any = {\r\n        ...props.reportBasicValues,\r\n        designType: printingTypes && printingTypes.length > 0 ? printingTypes[0] : GRAPHIC.value,\r\n        idGerEmpresa: globalReducer.globalParameter.empresa.id,\r\n        startPage: 1,\r\n      };\r\n      const current = currentMomentDate();\r\n      const endDate = currentMomentDate();\r\n      switch (reportViewType) {\r\n        case DATE.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            dtInicial: formatDate(current.toDate()),\r\n          };\r\n          break;\r\n        case DATES.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            dtFinal: formatDate(endDate.endOf('month').toDate()),\r\n            dtInicial: formatDate(current.toDate()),\r\n          };\r\n          break;\r\n        case REFERENCE.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            referenciaInicial: format(current.toDate(), REF_PATTERN),\r\n          };\r\n          break;\r\n        case REFERENCES.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            referenciaFinal: format(current.toDate(), REF_PATTERN),\r\n            referenciaInicial: format(endDate.toDate(), REF_PATTERN),\r\n          };\r\n          break;\r\n        case ANO.value:\r\n          resetObject = {\r\n            ...resetObject,\r\n            ano: String(current.year()),\r\n          };\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      props.formProps.reset(resetObject);\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [props.reportViewOptions, globalReducer.globalParameter.empresa]\r\n  );\r\n\r\n  const toggleTab = ({ target }: MouseEvent) => {\r\n    const { tabIndex } = target as HTMLElement;\r\n    if (activeTab !== tabIndex) {\r\n      setActiveTab(tabIndex);\r\n    }\r\n  };\r\n\r\n  const restoreTitle = () => {\r\n    props.formProps.setValue('title', props.reportBasicValues.title, true);\r\n  };\r\n\r\n  const dateInitial = (\r\n    <InputGroupInline\r\n      id=\"dtInicial\"\r\n      label={props.reportViewOptions.dtInicialLabel}\r\n      isPrependLabel={true}\r\n      formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.dtInicialRequired } }}\r\n      type={InputType.DATE}\r\n    />\r\n  );\r\n\r\n  const dateComponent = props.reportViewOptions.reportViewType === DATE.value ? dateInitial : null;\r\n\r\n  const datesComponent =\r\n    props.reportViewOptions.reportViewType === DATES.value ? (\r\n      <>\r\n        {dateInitial}\r\n\r\n        <InputGroupInline\r\n          id=\"dtFinal\"\r\n          label={props.reportViewOptions.dtFinalLabel}\r\n          isPrependLabel={true}\r\n          formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.dtFinalRequired } }}\r\n          type={InputType.DATE}\r\n        />\r\n      </>\r\n    ) : null;\r\n\r\n  const referenceInitial = (\r\n    <InputGroupInline\r\n      id=\"referenciaInicial\"\r\n      label={props.reportViewOptions.refInicialLabel}\r\n      isPrependLabel={true}\r\n      formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.refInicialRequired } }}\r\n      type={InputType.REFERENCE}\r\n    />\r\n  );\r\n\r\n  const referenceComponent = props.reportViewOptions.reportViewType === REFERENCE.value ? referenceInitial : null;\r\n\r\n  const referencesComponent =\r\n    props.reportViewOptions.reportViewType === REFERENCES.value ? (\r\n      <>\r\n        {referenceInitial}\r\n\r\n        <InputGroupInline\r\n          id=\"referenciaFinal\"\r\n          label={props.reportViewOptions.refFinalLabel}\r\n          isPrependLabel={true}\r\n          formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.refFinalRequired } }}\r\n          type={InputType.REFERENCE}\r\n        />\r\n      </>\r\n    ) : null;\r\n\r\n  const anoComponent =\r\n    props.reportViewOptions.reportViewType === ANO.value ? (\r\n      <InputGroupInline\r\n        id=\"ano\"\r\n        label={props.reportViewOptions.anoLabel}\r\n        isPrependLabel={true}\r\n        formProps={{ ...props.formProps, validation: { required: props.reportViewOptions.anoRequired } }}\r\n        inputMaskedProps={{ mask: '9999' }}\r\n        type={InputType.MASK}\r\n      />\r\n    ) : null;\r\n\r\n  const startPageComponent = props.reportViewOptions.exibirPaginaInicial ? (\r\n    <InputGroupInline\r\n      id=\"startPage\"\r\n      label=\"Página Inicial\"\r\n      isPrependLabel={true}\r\n      placeholder=\"Página Inicial\"\r\n      formProps={{\r\n        ...props.formProps,\r\n        validation: {\r\n          min: 0,\r\n          required: true,\r\n        },\r\n      }}\r\n      type={InputType.NUMBER}\r\n    />\r\n  ) : null;\r\n\r\n  const multiplasEmpresasComponent = props.reportViewOptions.exibirConfiguracaoMultiplasEmpresas ? (\r\n    <>\r\n      <Row className=\"align-items-center\">\r\n        <Col xs={2}>\r\n          <CustomInput type=\"switch\" id=\"gerarPorEmpresas\" name=\"gerarPorEmpresas\" label=\"Gerar por Empresas\" innerRef={props.formProps.register} />\r\n        </Col>\r\n        <Col>\r\n          <EmpresaIS\r\n            formProps={props.formProps}\r\n            label=\"Empresa(s)\"\r\n            placeholder=\"Selecione uma ou várias empresas\"\r\n            id=\"empresasSelecionadas\"\r\n            isPrependLabel={true}\r\n            inputProps={{ disabled: props.formProps.getValues().gerarPorEmpresas, style: { marginBottom: 20 } }}\r\n            inputSearchProps={{ size: 'xl', selectProps: { isMulti: true } }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  ) : null;\r\n\r\n  const segmentacaoFolhaComponent = props.reportViewOptions.exibirSegmentacaoFolha ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput\r\n          type=\"switch\"\r\n          id=\"segmentacaoFolha\"\r\n          name=\"segmentacaoFolha\"\r\n          label=\"Exibir Número das Páginas como Folhas\"\r\n          innerRef={props.formProps.register}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const dataAtualComponent = props.reportViewOptions.exibirConfiguracaoDataAtual ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput type=\"switch\" id=\"showCurrentDate\" name=\"showCurrentDate\" label=\"Imprimir a Data Atual\" innerRef={props.formProps.register} />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const logoAdmComponent = props.reportViewOptions.exibirConfiguracaoLogoAdministradora ? (\r\n    <Row className=\"mb-3\">\r\n      <Col>\r\n        <CustomInput\r\n          type=\"switch\"\r\n          id=\"showLogoAdministradora\"\r\n          name=\"showLogoAdministradora\"\r\n          label=\"Imprimir o Logo Administradora\"\r\n          innerRef={props.formProps.register}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  ) : null;\r\n\r\n  const dadosEmpresaComponent = props.reportViewOptions.exibirConfiguracaoDadosEmpresa ? (\r\n    <>\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"showDadosEmpresa\"\r\n            name=\"showDadosEmpresa\"\r\n            label=\"Imprimir os Dados da Empresa\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"mb-3\">\r\n        <Col>\r\n          <CustomInput\r\n            type=\"switch\"\r\n            id=\"imprimirCodigoEmpresa\"\r\n            name=\"imprimirCodigoEmpresa\"\r\n            label=\"Imprimir o Código Empresa\"\r\n            innerRef={props.formProps.register}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  ) : null;\r\n\r\n  const formatacaoValoresComponent = props.reportBasicValues.exibirFormatacaoValor ? (\r\n    <>\r\n      {props.reportViewOptions.exibirImprimirValoresColoridos && (\r\n        <Row className=\"mb-3\">\r\n          <Col>\r\n            <CustomInput\r\n              type=\"switch\"\r\n              id=\"imprimirValoresColoridos\"\r\n              name=\"imprimirValoresColoridos\"\r\n              label=\"Imprimir Valores Devedores em Azul e Credores em Vermelho\"\r\n              innerRef={props.formProps.register}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      <InputGroupInline\r\n        id=\"saldoReportEnum\"\r\n        label=\"Tipo de Formatação de Valores\"\r\n        isPrependLabel={true}\r\n        placeholder=\"Selecione o tipo de formatação dos valores\"\r\n        formProps={{ ...props.formProps, validation: { required: true } }}\r\n        inputDropDownProps={{\r\n          optionsProvider: SALDO_REPORT_ENUM,\r\n          selectProps: { isClearable: false },\r\n        }}\r\n        type={InputType.DROP_DOWN}\r\n      />\r\n    </>\r\n  ) : null;\r\n\r\n  return (\r\n    <Accordion formProps={props.formProps} firstOpen={props.extraConfigOpened || false}>\r\n      <AccordionItem title=\"Configurações adicionais do Relatório\">\r\n        <>\r\n          <Nav tabs={true}>\r\n            <NavItem>\r\n              <NavLink className={cx({ active: activeTab === 1 })} tabIndex={1} onClick={toggleTab}>\r\n                Configurações Gerais\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={cx({ active: activeTab === 2 })}\r\n                tabIndex={2}\r\n                onClick={toggleTab}\r\n                disabled={!props.reportViewOptions.exibirEnviarPorEmail}\r\n              >\r\n                Envio de E-mail\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink className={cx({ active: activeTab === 3 })} tabIndex={3} onClick={toggleTab} disabled={true}>\r\n                Connect\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n\r\n          <TabContent className=\"mb-5\" activeTab={activeTab}>\r\n            <TabPane tabId={1} className=\"mb-0 p-3\">\r\n              <InputGroupInline formProps={props.formProps} id=\"idGerEmpresa\" hidden={true} />\r\n              <InputGroupInline\r\n                id=\"title\"\r\n                label=\"Título\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Título\"\r\n                iconAppend=\"undo-alt\"\r\n                appendClickHandler={restoreTitle}\r\n                formProps={{\r\n                  ...props.formProps,\r\n                  validation: {\r\n                    maxLength: 120,\r\n                    minLength: 5,\r\n                    required: true,\r\n                  },\r\n                }}\r\n              />\r\n\r\n              {startPageComponent}\r\n\r\n              {multiplasEmpresasComponent}\r\n\r\n              {segmentacaoFolhaComponent}\r\n\r\n              {dataAtualComponent}\r\n\r\n              {formatacaoValoresComponent}\r\n\r\n              {logoAdmComponent}\r\n\r\n              {dadosEmpresaComponent}\r\n\r\n              {dateComponent}\r\n              {datesComponent}\r\n              {referenceComponent}\r\n              {referencesComponent}\r\n              {anoComponent}\r\n\r\n              <hr />\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"gerarCabecalhoPadrao\"\r\n                    name=\"gerarCabecalhoPadrao\"\r\n                    label=\"Exibir Cabeçalho\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"virtualization\"\r\n                    name=\"virtualization\"\r\n                    label=\"Virtualizar Relatório\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <InputGroupInline\r\n                id=\"designType\"\r\n                label=\"Tipo de Impressão\"\r\n                isPrependLabel={true}\r\n                placeholder=\"Selecione o tipo de impressão\"\r\n                formProps={{ ...props.formProps, validation: { required: true } }}\r\n                inputDropDownProps={{\r\n                  optionsProvider: props.reportViewOptions.printingTypes ? props.reportViewOptions.printingTypes : DESIGN_TYPE_ENUM,\r\n                  selectProps: { isClearable: false },\r\n                }}\r\n                type={InputType.DROP_DOWN}\r\n              />\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"enviarPorEmail\"\r\n                    name=\"enviarPorEmail\"\r\n                    label=\"Enviar por E-mail\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Col>\r\n                  <CustomInput\r\n                    type=\"switch\"\r\n                    id=\"enviarParaConnect\"\r\n                    name=\"enviarParaConnect\"\r\n                    label=\"Enviar para o Connect\"\r\n                    innerRef={props.formProps.register}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId={2} className=\"mb-0 p-3\">\r\n              <EnvioEmail formProps={props.formProps} initialSubject={props.reportBasicValues.title} />\r\n            </TabPane>\r\n            <TabPane tabId={3} className=\"mb-0 p-3\">\r\n              {/* TODO fazer tela de envio de mensagens do Connect*/}\r\n            </TabPane>\r\n          </TabContent>\r\n        </>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\nexport default ReportInputs;\r\n","import React, { FC } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Form } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  dispatchClose,\r\n  ErroList,\r\n  ERROR,\r\n  INFORMATION,\r\n  ProcessBar,\r\n  showToast,\r\n  UseFormProps,\r\n} from 'summer';\r\nimport { ReportBasicValues } from '../../../models/dtos/ger/reportBasicValues';\r\nimport { ReportViewOptions } from '../../../models/dtos/ger/reportViewOptions';\r\nimport { gerarReport } from '../../../services/report.service';\r\nimport { Reducers } from '../../../store/ducks';\r\nimport { GlobalState, toggleHeaderDrawer } from '../../../store/ducks/global.duck';\r\nimport ReportInputs from './ReportInputs';\r\n\r\nexport interface BasicReportFormProps {\r\n  /** Função do submit (vide useForm) */\r\n  handleSubmit: (onSubmit: any) => any;\r\n  /** Função de fechar/redirecionar a tela */\r\n  handleClose?: () => void;\r\n  /** Propriedades de formulário da tela pai (ReportView) */\r\n  formProps: UseFormProps;\r\n  /** Valores default da geração */\r\n  reportBasicValues: ReportBasicValues;\r\n  /** Configuração da tela de relatório */\r\n  reportViewOptions: ReportViewOptions;\r\n  /** chave que guarda as configurações de geração no cache */\r\n  localStorageKey?: string;\r\n  /** ID da view da tela pai */\r\n  viewId?: string;\r\n  /** Função de validações extras */\r\n  validateExtras?: (formData: any) => string[];\r\n  /** Função de envio de parametros extras */\r\n  addExtraParameters?: (formData: any) => any;\r\n  /** já iniciar as opções extras do relatório expandidas? */\r\n  extraConfigOpened?: boolean;\r\n  /** Função executada após o submit */\r\n  afterSubmit?: () => void;\r\n}\r\n\r\nexport interface ReportFormProps extends BasicReportFormProps {\r\n  /** Propriedades das rotas */\r\n  routeProps?: RouteComponentProps;\r\n}\r\n\r\nconst ReportForm: FC<ReportFormProps> = props => {\r\n  const { headerDrawerToggle } = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleClose() {\r\n    if (props.handleClose) {\r\n      props.handleClose();\r\n    } else if (props.routeProps) {\r\n      dispatchClose(props.routeProps, props.routeProps.history);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (data: any, event: any) => {\r\n    event.preventDefault();\r\n    let erros = [];\r\n    if (props.validateExtras) {\r\n      erros = props.validateExtras(data);\r\n    }\r\n    if (erros && erros.length) {\r\n      const params: AlertProps = {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.ERROR,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    } else {\r\n      showToast('Seu arquivo está sendo gerado. Uma notificação será exibida quando estiver finalizado e o mesmo poderá ser salvo.', INFORMATION);\r\n      finishSubmit(data);\r\n    }\r\n  };\r\n\r\n  const finishSubmit = (data: any) => {\r\n    if (props.addExtraParameters) {\r\n      data = props.addExtraParameters(data);\r\n    }\r\n    data.saveSession = false;\r\n\r\n    gerarReport(data, props.reportViewOptions.reportEventType, {\r\n      errorFunction: (mensagem: string) => showToast(mensagem, ERROR),\r\n      thenFunction: () => {\r\n        if (!headerDrawerToggle) {\r\n          dispatch(toggleHeaderDrawer());\r\n        }\r\n        if (props.afterSubmit) {\r\n          props.afterSubmit();\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form noValidate={true}>\r\n      {props.children}\r\n      <ReportInputs\r\n        reportBasicValues={props.reportBasicValues}\r\n        reportViewOptions={props.reportViewOptions}\r\n        formProps={props.formProps}\r\n        extraConfigOpened={props.extraConfigOpened}\r\n      />\r\n\r\n      <ProcessBar handleSubmit={props.handleSubmit(onSubmit)} handleClose={handleClose} />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ReportForm;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n"],"sourceRoot":""}