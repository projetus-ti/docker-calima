{"version":3,"sources":["views/components/mcg/planoContaReferencialIS/PlanoContaReferencialIS.tsx","views/pages/mcg/planoConta/PlanoContaSearchView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","dependencies/grupoPlanoContasDependency.ts","models/dtos/mcg/planoContaReferencial.ts","../node_modules/reactstrap/es/CardDeck.js"],"names":["PlanoContaReferencialIS","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_2__","Object","assign","isPrependLabel","inputSearchProps","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","columns","dataField","text","dtoClassName","CLASS_NAME","searchViewId","label","placeholder","type","InputType","INPUT_SEARCH","defaultSorted","order","OrderType","ASC","cellEditProps","blurToSave","mode","ClickEnum","CLICK","PlanoContaSearchView","globalReducer","useSelector","state","formProps","useForm","defaultValues","grupoPlanoConta","globalParameter","extraFormProps","_useState","useState","_useState2","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","selectedItems","setSelectedItems","_useState3","_useState4","selectedItemsModal","setSelectedItemsModal","_useState5","_useState6","showModalView","setShowModalView","_useState7","_useState8","listaContas","setListaContas","_useState9","undefined","_useState10","expressions","setExpressions","searchRef","useRef","editable","sort","boolColumn","remove","length","find","it","analitica","alertManager","emit","ACTION_EVENTS","SHOW","message","onNoClick","apagarContas","onOkClick","AlertType","WARNING_YES_NO","showToast","ERROR","apagarFilha","removeList","usuario","errorFunction","mensagem","thenFunction","current","notifySearchExpressionChange","INFORMATION","apagarContaMae","setTimeout","removerTodos","removerTodosPlanosConta","getValues","id","erros","replace","split","react__WEBPACK_IMPORTED_MODULE_3___default","summer__WEBPACK_IMPORTED_MODULE_16__","headerMessage","filter","index","selectRow","bgColor","SelectModeEnum","CHECKBOX","onSelect","row","isSelect","onSelectAll","rows","selectRowModal","clickToSelect","handleCloseModal","handleOpenModal","reset","isSubGrupo","onChangeSubGrupo","listSubGrupo","result","removerReferencia","ids","push","map","desvincularContas","planoContaReferencial","planoContaReferencialECF","getExpressions","filtroContaResultado","fieldName","value","useEffect","empresaAtual","empresa","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","hasGrupoPlanoContas","wikiId","hideExtraFields","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_23__","disabled","disableInputIS","onChange","customHeaderContent","reactstrap__WEBPACK_IMPORTED_MODULE_9__","onClick","color","className","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_2__","icon","searchDataGridProps","useDefaultSelectRow","concat","formatter","cell","mcgPlanoConta","searchExpressions","searchExpressionsProps","extraData","getExtraData","hideRemoveButton","ref","reactstrap__WEBPACK_IMPORTED_MODULE_10__","isOpen","backdrop","centered","toggle","size","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","_components_mcg_planoContaReferencialIS_PlanoContaReferencialIS__WEBPACK_IMPORTED_MODULE_25__","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_24__","style","overflowY","height","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_4___default","keyField","data","responsive","striped","reactstrap__WEBPACK_IMPORTED_MODULE_15__","handleClose","handleSubmit","referenciarContas","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","empresaMCG","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","listaPlanoConta","planoConta","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","isEmpty","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","PlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_3__","searchViewProps","alias","conditionalGroup","sintetica","forEach","filtro","GrupoPlanoContaIS","mascara","digitoAtivo","digitoPassivo","digitoReceita","digitoDespesa","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","CardDeck","Tag","attributes","classes","defaultProps"],"mappings":"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","file":"static/js/43.de536a67.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/mcg/planoContaReferencial';\r\n\r\nconst PlanoContaReferencialIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'instituicao.instituicao',\r\n            text: 'Instituição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'PlanoContaReferencialSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas Referencial'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas Referencial'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaReferencialIS;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { FC, useEffect, useRef, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button, Card, CardBody, CardDeck, Col, Form, Modal, ModalHeader, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertType,\r\n  boolColumn,\r\n  CellEditProps,\r\n  ClickEnum,\r\n  ColumnsProps,\r\n  DefaultSortProps,\r\n  ErroList,\r\n  ERROR,\r\n  getExtraData,\r\n  OrderType,\r\n  ProcessBar,\r\n  SearchDataGrid,\r\n  SearchDataGridRefProps,\r\n  SearchExpression,\r\n  SearchViewProps,\r\n  SelectModeEnum,\r\n  SelectRowProps,\r\n  showToast,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { hasGrupoPlanoContas } from '../../../../dependencies/grupoPlanoContasDependency';\r\nimport { CLASS_NAME, PlanoConta } from '../../../../models/dtos/ger/planoConta';\r\nimport { PlanoContaReferencial } from '../../../../models/dtos/mcg/planoContaReferencial';\r\nimport { desvincularContas, listSubGrupo, referenciarContas, removeList, removerTodosPlanosConta } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\nimport PlanoContaReferencialIS from '../../../components/mcg/planoContaReferencialIS/PlanoContaReferencialIS';\r\n\r\nconst defaultSorted: DefaultSortProps[] = [\r\n  {\r\n    dataField: 'conta',\r\n    order: OrderType.ASC,\r\n  },\r\n];\r\n\r\nconst cellEditProps: CellEditProps = {\r\n  blurToSave: false,\r\n  mode: ClickEnum.CLICK,\r\n};\r\n\r\nexport interface PlanoContaExtraViewProps {\r\n  disableInputIS?: boolean;\r\n  useDefaultSelectRow?: boolean;\r\n  hideExtraFields?: boolean;\r\n  defaultPaginationMode?: boolean;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nexport interface PlanoContaExtraProps {\r\n  isSubGrupo?: PlanoConta;\r\n  planoContaReferencial?: PlanoContaReferencial;\r\n  planoContaReferencialECF?: PlanoContaReferencial;\r\n}\r\n\r\nconst PlanoContaSearchView: FC<SearchViewProps<PlanoConta> & PlanoContaExtraViewProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const formProps = useForm<PlanoConta>({ defaultValues: { grupoPlanoConta: globalReducer.globalParameter.grupoPlanoConta }, mode: 'onBlur' });\r\n  const extraFormProps = useForm<PlanoContaExtraProps>({ mode: 'onBlur' });\r\n\r\n  const [selectedItems, setSelectedItems] = useState<PlanoConta[]>([]);\r\n  const [selectedItemsModal, setSelectedItemsModal] = useState<PlanoConta[]>([]);\r\n  const [showModalView, setShowModalView] = useState();\r\n  const [listaContas, setListaContas] = useState<PlanoConta[]>([]);\r\n  const [expressions, setExpressions] = useState<SearchExpression[]>(undefined);\r\n  const searchRef = useRef<SearchDataGridRefProps>();\r\n\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'conta',\r\n      editable: true,\r\n      sort: true,\r\n      text: 'Conta',\r\n    },\r\n    boolColumn({\r\n      dataField: 'analitica',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Analítica',\r\n    }),\r\n    {\r\n      dataField: 'codigoReduzido',\r\n      editable: true,\r\n      sort: true,\r\n      text: 'C.R.',\r\n    },\r\n    {\r\n      dataField: 'descricao',\r\n      editable: true,\r\n      sort: true,\r\n      text: 'Descrição',\r\n    },\r\n  ];\r\n\r\n  const columnsSearchView: ColumnsProps[] = [\r\n    {\r\n      dataField: 'planoContaReferencial.conta',\r\n      editable: false,\r\n      formatter: (cell, row) => {\r\n        return row.mcgPlanoConta && row.mcgPlanoConta.planoContaReferencial ? 'Sim ' : 'Não';\r\n      },\r\n      sort: false,\r\n      text: 'Referenciada no Plano de Contas do FCONT',\r\n    },\r\n    {\r\n      dataField: 'planoContaReferencialECF.conta',\r\n      editable: false,\r\n      formatter: (cell, row) => {\r\n        return row.mcgPlanoConta && row.mcgPlanoConta.planoContaReferencialECF ? 'Sim ' : 'Não';\r\n      },\r\n      sort: false,\r\n      text: 'Referenciada no Plano de Contas do SPED ECD/ECF',\r\n    },\r\n  ];\r\n\r\n  const remove = () => {\r\n    if (selectedItems.length > 0) {\r\n      const possuiAnalitica = selectedItems.find(it => !it.analitica);\r\n\r\n      if (possuiAnalitica) {\r\n        alertManager.emit(ACTION_EVENTS.SHOW, {\r\n          message:\r\n            'Ao Excluir as contas Sintéticas selecionadas todas as contas filhas também serão excluídas. Deseja realmente excluir as Contas Filhas?',\r\n          onNoClick: () => apagarContas(false),\r\n          onOkClick: () => apagarContas(true),\r\n          type: AlertType.WARNING_YES_NO,\r\n        });\r\n      } else {\r\n        apagarContas(false);\r\n      }\r\n    } else {\r\n      showToast('Selecione uma conta para remover', ERROR);\r\n    }\r\n  };\r\n\r\n  const apagarContas = (apagarFilha: boolean) => {\r\n    if (apagarFilha) {\r\n      removeList(selectedItems, true, globalReducer.globalParameter.usuario, {\r\n        errorFunction: mensagem => {\r\n          alertManager.emit(ACTION_EVENTS.SHOW, {\r\n            message: mensagem,\r\n            type: AlertType.ERROR,\r\n          });\r\n        },\r\n        thenFunction: () => {\r\n          searchRef.current.notifySearchExpressionChange();\r\n          setSelectedItems([]);\r\n          alertManager.emit(ACTION_EVENTS.SHOW, {\r\n            message: 'Contas excluídas com sucesso!',\r\n            type: AlertType.INFORMATION,\r\n          });\r\n        },\r\n      });\r\n    } else {\r\n      apagarContaMae();\r\n    }\r\n  };\r\n\r\n  const apagarContaMae = () => {\r\n    setTimeout(() => {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: 'Você decidiu não apagar as Contas Filhas. Deseja mesmo assim excluir a Conta Mãe?',\r\n        onOkClick: () => {\r\n          removeList(selectedItems, false, globalReducer.globalParameter.usuario, {\r\n            errorFunction: mensagem => {\r\n              alertManager.emit(ACTION_EVENTS.SHOW, {\r\n                message: mensagem,\r\n                type: AlertType.ERROR,\r\n              });\r\n            },\r\n            thenFunction: () => {\r\n              searchRef.current.notifySearchExpressionChange();\r\n              setSelectedItems([]);\r\n              alertManager.emit(ACTION_EVENTS.SHOW, {\r\n                message: 'Contas excluídas com sucesso!',\r\n                type: AlertType.INFORMATION,\r\n              });\r\n            },\r\n          });\r\n        },\r\n        type: AlertType.WARNING_YES_NO,\r\n      });\r\n    }, 1);\r\n  };\r\n\r\n  const removerTodos = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message: 'Este comando excluirá todas as contas que não possuem lançamento. Deseja realmente fazer isto?',\r\n      onOkClick: () =>\r\n        removerTodosPlanosConta(formProps.getValues().grupoPlanoConta.id, globalReducer.globalParameter.usuario, {\r\n          errorFunction: mensagem => {\r\n            const erros = mensagem.replace(/<(.|\\n)*?>/g, '').split('*');\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: <ErroList headerMessage={erros[0]} erros={erros.filter((it, index) => index !== 0)} />,\r\n              type: AlertType.ERROR,\r\n            });\r\n          },\r\n          thenFunction: () => {\r\n            searchRef.current.notifySearchExpressionChange();\r\n            setSelectedItems([]);\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: 'Contas excluídas com sucesso!',\r\n              type: AlertType.INFORMATION,\r\n            });\r\n          },\r\n        }),\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const customHeader = () => {\r\n    return (\r\n      <Row>\r\n        <Col>\r\n          <Button onClick={remove} color=\"danger\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"times-circle\" /> Remover Selecionados\r\n          </Button>\r\n          <Button onClick={removerTodos} color=\"primary\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"trash-alt\" /> Remover Todos\r\n          </Button>\r\n          <Button onClick={handleOpenModal} color=\"first\" className=\"mb-2 mr-2\">\r\n            <FontAwesomeIcon icon=\"cog\" /> Referenciar Contas\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    setSelectedItems(isSelect ? [...selectedItems, row] : selectedItems.filter(it => it.id !== row.id));\r\n  };\r\n\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    setSelectedItems(isSelect ? rows : []);\r\n  };\r\n\r\n  const handleOnSelectModal = (row, isSelect) => {\r\n    setSelectedItemsModal(isSelect ? [...selectedItemsModal, row] : selectedItemsModal.filter(it => it.id !== row.id));\r\n  };\r\n\r\n  const handleOnSelectAllModal = (isSelect, rows) => {\r\n    setSelectedItemsModal(isSelect ? rows : []);\r\n  };\r\n\r\n  const selectRow: SelectRowProps = {\r\n    bgColor: '#b3e6ff',\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleOnSelect,\r\n    // @ts-ignore\r\n    onSelectAll: handleOnSelectAll,\r\n  };\r\n\r\n  const selectRowModal = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleOnSelectModal,\r\n    onSelectAll: handleOnSelectAllModal,\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModalView(false);\r\n  };\r\n\r\n  const handleOpenModal = () => {\r\n    extraFormProps.reset({ isSubGrupo: selectedItems[selectedItems.length - 1] });\r\n    onChangeSubGrupo();\r\n    setShowModalView(true);\r\n  };\r\n\r\n  const onChangeSubGrupo = () => {\r\n    const { isSubGrupo } = extraFormProps.getValues();\r\n    if (isSubGrupo && !isSubGrupo.analitica) {\r\n      listSubGrupo(isSubGrupo, {\r\n        thenFunction: result => {\r\n          setListaContas(result);\r\n        },\r\n      });\r\n    } else {\r\n      setListaContas([]);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const erros = [];\r\n    let ids: number[] = [];\r\n\r\n    if (extraFormProps.getValues().isSubGrupo) {\r\n      if (extraFormProps.getValues().isSubGrupo.analitica) {\r\n        ids.push(extraFormProps.getValues().isSubGrupo.id);\r\n      } else {\r\n        if (selectedItemsModal.length === 0) {\r\n          erros.push('É necessário selecionar pelo menos 1 Plano de Conta.');\r\n        } else {\r\n          ids = selectedItemsModal.map(it => it.id);\r\n        }\r\n      }\r\n    } else {\r\n      erros.push('Campo Plano de Contas não pode estar em branco.');\r\n    }\r\n\r\n    if (!extraFormProps.getValues().planoContaReferencial && !extraFormProps.getValues().planoContaReferencialECF) {\r\n      erros.push('É necessário informar pelo menos 1 Plano de Conta referencial.');\r\n    }\r\n\r\n    if (erros.length > 0) {\r\n      alertManager.emit(ACTION_EVENTS.SHOW, {\r\n        message: <ErroList erros={erros} />,\r\n        type: AlertType.ERROR,\r\n      });\r\n    } else {\r\n      referenciarContas(\r\n        ids,\r\n        extraFormProps.getValues().planoContaReferencial && extraFormProps.getValues().planoContaReferencial.id,\r\n        extraFormProps.getValues().planoContaReferencialECF && extraFormProps.getValues().planoContaReferencialECF.id,\r\n        {\r\n          errorFunction: mensagem => {\r\n            showToast(mensagem, ERROR);\r\n          },\r\n          thenFunction: () => {\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: 'Contas referenciadas com sucesso!',\r\n              type: AlertType.INFORMATION,\r\n            });\r\n            searchRef.current.notifySearchExpressionChange();\r\n            handleCloseModal();\r\n          },\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const confirmarRemoverReferencia = () => {\r\n    alertManager.emit(ACTION_EVENTS.SHOW, {\r\n      message:\r\n        'Ao escolher \"Sim\", todas as contas selecionadas que possuem conta referência FCONT e/ou SPED ECD/ECF iguais às preenchidas nos campos correspondentes terão suas referências removidas.' +\r\n        'Deseja realmente remover as referências?',\r\n      onOkClick: () => removerReferencia(),\r\n      type: AlertType.WARNING_YES_NO,\r\n    });\r\n  };\r\n\r\n  const removerReferencia = () => {\r\n    let ids: number[] = [];\r\n\r\n    if (extraFormProps.getValues().isSubGrupo) {\r\n      if (extraFormProps.getValues().isSubGrupo.analitica) {\r\n        ids.push(extraFormProps.getValues().isSubGrupo.id);\r\n      } else {\r\n        ids = selectedItemsModal.map(it => it.id);\r\n      }\r\n    }\r\n\r\n    if (ids.length > 0) {\r\n      desvincularContas(\r\n        ids,\r\n        extraFormProps.getValues().planoContaReferencial && extraFormProps.getValues().planoContaReferencial.id,\r\n        extraFormProps.getValues().planoContaReferencialECF && extraFormProps.getValues().planoContaReferencialECF.id,\r\n        {\r\n          errorFunction: mensagem => {\r\n            showToast(mensagem, ERROR);\r\n          },\r\n          thenFunction: () => {\r\n            alertManager.emit(ACTION_EVENTS.SHOW, {\r\n              message: 'Referências removidas com sucesso!',\r\n              type: AlertType.INFORMATION,\r\n            });\r\n            searchRef.current.notifySearchExpressionChange();\r\n          },\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      globalReducer.globalParameter.usuario.empresaAtual = globalReducer.globalParameter.empresa;\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  function getExpressions() {\r\n    const expression: SearchExpression[] = [\r\n      {\r\n        expressions: props.filtroContaResultado ? props.filtroContaResultado : [],\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: formProps.getValues().grupoPlanoConta.id,\r\n      },\r\n    ];\r\n\r\n    return expression;\r\n  }\r\n\r\n  const onChangeGrupoPlanoConta = () => {\r\n    setSelectedItems([]);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      setSelectedItems([]);\r\n      if (formProps.getValues().grupoPlanoConta) {\r\n        setExpressions(getExpressions());\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [formProps.getValues().grupoPlanoConta]\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n        () => hasGrupoPlanoContas(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={1346}\r\n    >\r\n      {props.hideExtraFields || (\r\n        <Row>\r\n          <Col>\r\n            <GrupoPlanoContaIS id=\"grupoPlanoConta\" disabled={props.disableInputIS} formProps={formProps} onChange={onChangeGrupoPlanoConta} />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      <SearchDataGrid\r\n        {...(!props.hideExtraFields && { customHeaderContent: customHeader() })}\r\n        {...props}\r\n        {...props.searchDataGridProps}\r\n        dtoClassName={CLASS_NAME}\r\n        {...(!props.useDefaultSelectRow && { selectRow })}\r\n        columns={columns.concat(columnsSearchView)}\r\n        cellEditProps={cellEditProps}\r\n        defaultSorted={defaultSorted}\r\n        searchExpressions={getExpressions}\r\n        searchExpressionsProps={expressions}\r\n        extraData={{ ...getExtraData(props, 'PlanoContaEditView', CLASS_NAME), hideRemoveButton: true }}\r\n        ref={searchRef}\r\n      />\r\n\r\n      {\r\n        // ReferenciarPlanoContaProcessView\r\n      }\r\n\r\n      <Modal isOpen={showModalView} backdrop=\"static\" centered={true} toggle={handleCloseModal} size=\"xl\">\r\n        <ModalHeader toggle={handleCloseModal}>Referenciar Plano de Contas</ModalHeader>\r\n        <CardDeck>\r\n          <Card>\r\n            <CardBody>\r\n              <PlanoContaReferencialIS id=\"planoContaReferencial\" formProps={extraFormProps} label=\"Plano de Contas Referencial FCONT\" />\r\n              <PlanoContaReferencialIS\r\n                id=\"planoContaReferencialECF\"\r\n                formProps={extraFormProps}\r\n                label=\"Plano de Contas Referencial SPED ECD/ECF/EFD\"\r\n              />\r\n              <PlanoContaIS\r\n                id=\"isSubGrupo\"\r\n                formProps={extraFormProps}\r\n                label=\"Plano de Contas ou Grupo de Contas\"\r\n                placeholder=\"Informe a Conta\"\r\n                onChange={onChangeSubGrupo}\r\n              />\r\n              <div style={{ overflowY: 'scroll', height: 450 }}>\r\n                <BootstrapTable keyField=\"id\" data={listaContas} selectRow={selectRowModal} columns={columns} responsive={true} striped={true} />\r\n              </div>\r\n              <br />\r\n              <br />\r\n              <Form>\r\n                <Button onClick={confirmarRemoverReferencia} color=\"first\">\r\n                  <FontAwesomeIcon icon=\"trash\" /> Remover contas referenciadas\r\n                </Button>\r\n                <ProcessBar handleClose={handleCloseModal} handleSubmit={handleSubmit} />\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </CardDeck>\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default PlanoContaSearchView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  function getSearchExpression(): SearchExpression[] {\r\n    let expressions = [];\r\n    if (props.analitica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: true,\r\n        },\r\n      ];\r\n    }\r\n    if (props.sintetica) {\r\n      expressions = [\r\n        {\r\n          alias: 'c',\r\n          conditionalGroup: 'c_',\r\n          fieldName: 'analitica',\r\n          value: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    expressions.push({\r\n      alias: 'g',\r\n      conditionalGroup: 'g_',\r\n      fieldName: 'grupoPlanoConta.id',\r\n      value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n    });\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return expressions;\r\n  }\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoPlanoContas(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    ' O Grupo de Plano de Contas selecionado não está configurado. Para configuar acesse:' +\r\n    'Módulo Contábil > Manutenção > Grupos > Plano de Contas - \\n' +\r\n    'E configure os seguintes campos: Máscara, Dígito: Ativo, Passivo, Receita e Despesa.';\r\n\r\n  if (\r\n    !globalParameter.grupoEmpresaConfig &&\r\n    !globalParameter.grupoPlanoConta &&\r\n    !globalParameter.grupoPlanoConta.mascara &&\r\n    !globalParameter.grupoPlanoConta.digitoAtivo &&\r\n    !globalParameter.grupoPlanoConta.digitoPassivo &&\r\n    !globalParameter.grupoPlanoConta.digitoReceita &&\r\n    !globalParameter.grupoPlanoConta.digitoDespesa\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from './planoContaReferencialInstituicao';\r\n\r\nexport interface PlanoContaReferencial extends Basic {\r\n  conta?: string;\r\n  descricao?: string;\r\n  analitica?: boolean;\r\n  observacao?: string;\r\n  codigoInstituicao?: string;\r\n  instituicao?: PlanoContaReferencialInstituicao;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.mcg.model.dto.planocontareferencial';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardDeck = function CardDeck(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-deck'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardDeck.propTypes = propTypes;\nCardDeck.defaultProps = defaultProps;\nexport default CardDeck;"],"sourceRoot":""}