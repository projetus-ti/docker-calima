{"version":3,"sources":["views/pages/mcg/encerrarContasResultado/EncerrarContasResultadoProcessView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/CardTitle.js","../node_modules/reactstrap/es/Alert.js","models/dtos/ger/grupoPlanoConta.ts","views/components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS.tsx","views/pages/mcg/grupoPlanoConta/GrupoPlanoContaConfigEditView.tsx"],"names":["EncerrarContasResultadoProcessView","props","formProps","useForm","mode","formPropsLimparEncerramento","globalReducer","useSelector","state","dispatch","useDispatch","_useState","useState","_useState2","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","showModalView","setShowModalView","_useState3","undefined","_useState4","dataUltimoEncerramento","setDataUltimoEncerramento","_useState5","_useState6","lblUltimasContasEncerradas","setLblUltimasContasEncerradas","doClosure","formData","forceParam","encerrarContas","errorFunction","mensagem","progressActions","hideProgress","params","message","type","AlertType","ERROR","alertManager","emit","ACTION_EVENTS","SHOW","onOkClick","openGrupoPlanoConta","WARNING_YES_NO","showToast","thenFunction","result","INFORMATION","atualizarDataUltimoEncerramento","encerramentoContas","getDataUltimaContaEncerrada","globalParameter","empresa","id","formatDate","useEffect","empresaMCG","refAtual","setTimeout","setValue","parseLastDay","isEmpty","concat","handleCloseModal","componente","openViaDock","Page","pageProps","editItemProps","history","location","match","selectedItem","getValues","multiPageActions","showPage","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","openMultiPage","ConfigGrupoPlanoContaEditView","summer__WEBPACK_IMPORTED_MODULE_14__","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","wikiId","reactstrap__WEBPACK_IMPORTED_MODULE_5__","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","xs","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","label","placeholder","isPrependLabel","inputProps","autoFocus","InputType","DATE","reactstrap__WEBPACK_IMPORTED_MODULE_8__","color","onClick","reactstrap__WEBPACK_IMPORTED_MODULE_9__","className","btnSubmitIcon","btnSubmitLabel","handleSubmit","data","_globalReducer$global","_globalReducer$global2","grupoPlanoConta","digitoAtivo","digitoPassivo","idGerEmpresa","ativo","idGerGrupoPlanoConta","passivo","showProgress","animated","striped","value","handleClose","goBack","dispatchClose","onClose","reactstrap__WEBPACK_IMPORTED_MODULE_10__","isOpen","centered","toggle","size","reactstrap__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_12__","compare","dataBase","limparEncerramentoContaResultado","reactstrap__WEBPACK_IMPORTED_MODULE_13__","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","param","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","String","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","contaResultadoEncerramento","force","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","recuperarLancamentoConta","transferenciaLancamentoConta","transferirLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","erros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","dtInicial","dtFinal","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","refFinal","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","lancamentos","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado","PlanoContaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","columns","dataField","text","dtoClassName","CLASS_NAME","searchExpressions","expressions","analitica","push","alias","conditionalGroup","fieldName","sintetica","forEach","filtro","searchViewId","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","classnames__WEBPACK_IMPORTED_MODULE_4__","classnames__WEBPACK_IMPORTED_MODULE_4___default","_utils__WEBPACK_IMPORTED_MODULE_5__","propTypes","tag","string","cssModule","object","CardTitle","Tag","attributes","classes","defaultProps","_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_3___default","prop_types__WEBPACK_IMPORTED_MODULE_4__","prop_types__WEBPACK_IMPORTED_MODULE_4___default","classnames__WEBPACK_IMPORTED_MODULE_5__","classnames__WEBPACK_IMPORTED_MODULE_5___default","_utils__WEBPACK_IMPORTED_MODULE_6__","_Fade__WEBPACK_IMPORTED_MODULE_7__","children","node","closeClassName","closeAriaLabel","fade","bool","func","transition","shape","innerRef","oneOfType","unmountOnExit","Alert","alert-dismissible","closeClasses","alertTransition","baseClass","timeout","in","role","aria-label","aria-hidden","GrupoPlanoContaIS","summer__WEBPACK_IMPORTED_MODULE_2__","GrupoPlanoContaConfigEditView","getSelectedItem","defaultValues","editFormRef","useRef","reset","loadGrupoPlanoConta","onLoad","mapKey","values","showLoading","findById","res","keys","map","key","[object Object]","onCancel","current","close","submit","then","wizardFinishProps","confirmButton","onConfirm","getMainEditView","Fragment","reactstrap__WEBPACK_IMPORTED_MODULE_4__","style","marginBottom","borderWidth","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_16__","labelWidth","summer__WEBPACK_IMPORTED_MODULE_9__","wrapBody","ref","editViewProps","externalSubmit","validateExtras","planoContaFornecedor","planoContaFornecedorGrupo","planoContaCliente","planoContaClienteGrupo","planoContaTransportadora","planoContaTransportadoraGrupo","afterPersist","atualizarGlobalParameter","setGlobalParameter","onAfterPageChange","currentPageId","finishProps","_components_mcg_grupoPlanoContaIS_GrupoPlanoContaIS__WEBPACK_IMPORTED_MODULE_15__"],"mappings":"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","file":"static/js/58.5690595e.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Alert, Button, Col, Form, Modal, ModalBody, ModalFooter, ModalHeader, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  compare,\r\n  dispatchClose,\r\n  EditViewProps,\r\n  ERROR,\r\n  formatDate,\r\n  INFORMATION,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  parseLastDay,\r\n  ProcessBar,\r\n  progressActions,\r\n  showToast,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { ContaResultadoLimpeza } from '../../../../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../../../../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { encerrarContas, getDataUltimaContaEncerrada, limparEncerramentoContaResultado } from '../../../../services/mcg.service';\r\nimport { multiPageActions, Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport ConfigGrupoPlanoContaEditView from '../grupoPlanoConta/GrupoPlanoContaConfigEditView';\r\n\r\ninterface EncerrarContasResultadoProcessEditViewProps extends EditViewProps<ContaResultadoMCGEncerramento> {}\r\n\r\nconst EncerrarContasResultadoProcessView: FC<EncerrarContasResultadoProcessEditViewProps & RouteComponentProps> = props => {\r\n  const formProps = useForm<ContaResultadoMCGEncerramento>({ mode: 'onBlur' });\r\n  const formPropsLimparEncerramento = useForm<ContaResultadoLimpeza>({ mode: 'onBlur' });\r\n\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const MSG_LABEL_ULTIMA_REFERENCIA: string = 'Último Encerramento de Contas de Resultado';\r\n  const MSG_NENHUM_ENCERRAMENTO: string = 'Ainda não houve um Encerramento de Contas de Resultado.';\r\n\r\n  const [showModalView, setShowModalView] = useState(false);\r\n  const [dataUltimoEncerramento, setDataUltimoEncerramento] = useState(undefined);\r\n\r\n  const [lblUltimasContasEncerradas, setLblUltimasContasEncerradas] = useState(MSG_LABEL_ULTIMA_REFERENCIA);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (globalReducer.globalParameter.empresa !== null) {\r\n        atualizarDataUltimoEncerramento();\r\n\r\n        if (globalReducer.globalParameter.empresaMCG !== null) {\r\n          const { refAtual } = globalReducer.globalParameter.empresaMCG;\r\n          setTimeout(() => {\r\n            formProps.setValue('dataEncerramento', formatDate(parseLastDay(refAtual)), true);\r\n          }, 500);\r\n        }\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataUltimoEncerramento)) {\r\n      setLblUltimasContasEncerradas(MSG_NENHUM_ENCERRAMENTO);\r\n    } else {\r\n      setLblUltimasContasEncerradas(`${MSG_LABEL_ULTIMA_REFERENCIA} ${dataUltimoEncerramento}`);\r\n    }\r\n  }, [dataUltimoEncerramento]);\r\n\r\n  function handleClosure(data: ContaResultadoMCGEncerramento): void {\r\n    const {\r\n      grupoPlanoConta: { digitoAtivo, digitoPassivo, id },\r\n      empresa: { id: idGerEmpresa },\r\n    } = globalReducer.globalParameter;\r\n\r\n    data.ativo = digitoAtivo;\r\n    data.idGerEmpresa = idGerEmpresa;\r\n    data.idGerGrupoPlanoConta = id;\r\n    data.passivo = digitoPassivo;\r\n\r\n    dispatch(\r\n      progressActions.showProgress({\r\n        animated: true,\r\n        className: 'progress-bar-rounded progress-animated-alt',\r\n        color: 'first',\r\n        label: 'Aguarde processando...',\r\n        striped: true,\r\n        value: 100,\r\n      })\r\n    );\r\n    doClosure(data, null);\r\n  }\r\n\r\n  function doClosure(formData: ContaResultadoMCGEncerramento, forceParam: boolean): void {\r\n    encerrarContas(formData, forceParam, {\r\n      errorFunction: mensagem => {\r\n        dispatch(progressActions.hideProgress());\r\n        if (mensagem === 'Não existem contas à encerrar.' || mensagem === 'Nenhuma conta possui saldo para ser encerrada.') {\r\n          const params: AlertProps = {\r\n            message: mensagem,\r\n            type: AlertType.ERROR,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        } else if (mensagem === 'FALTA_CONFIG_CONTA') {\r\n          const params: AlertProps = {\r\n            message:\r\n              'As contas de resultado, prejuízo ou lucro não estão configuradas corretamente para este plano de contas. Deseja configurá-las agora?',\r\n            onOkClick: () => openGrupoPlanoConta(),\r\n            type: AlertType.WARNING_YES_NO,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        } else {\r\n          showToast(mensagem, ERROR);\r\n        }\r\n      },\r\n      thenFunction: result => {\r\n        dispatch(progressActions.hideProgress());\r\n        encerramentoContas(formData, result);\r\n      },\r\n    });\r\n  }\r\n\r\n  function encerramentoContas(formData: ContaResultadoMCGEncerramento, result: any): void {\r\n    if (result) {\r\n      const params: AlertProps = {\r\n        message: 'Contas de resultado encerradas com sucesso.',\r\n        type: AlertType.INFORMATION,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n      atualizarDataUltimoEncerramento();\r\n    } else {\r\n      const params: AlertProps = {\r\n        message: 'Existem contas de resultado encerradas no período informado. Deseja continuar?',\r\n        onOkClick: () => doClosure(formData, true),\r\n        type: AlertType.WARNING_YES_NO,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    }\r\n  }\r\n\r\n  function atualizarDataUltimoEncerramento(): void {\r\n    getDataUltimaContaEncerrada(globalReducer.globalParameter.empresa.id, {\r\n      errorFunction: mensagem => {\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: result => {\r\n        setDataUltimoEncerramento(formatDate(result));\r\n      },\r\n    });\r\n  }\r\n\r\n  function limparContaResultado(formData: ContaResultadoLimpeza): void {\r\n    if (compare(formData.dataBase, dataUltimoEncerramento) > 0) {\r\n      const mensagem: string = 'Não existem encerramentos de contas posteriores a data do último encerramento';\r\n      showToast(mensagem, INFORMATION);\r\n      return;\r\n    }\r\n\r\n    limparEncerramentoContaResultado(formData, {\r\n      errorFunction: mensagem => {\r\n        setShowModalView(false);\r\n        showToast(mensagem, ERROR);\r\n      },\r\n      thenFunction: result => {\r\n        setShowModalView(false);\r\n        if (result > 0) {\r\n          showToast(`Lançamentos de Encerramento de Contas de Resultado após ${formData.dataBase} apagadas com sucesso.`, INFORMATION);\r\n          atualizarDataUltimoEncerramento();\r\n        } else {\r\n          showToast(`Nenhum lançamento de encerramento de contas de resultado após ${formData.dataBase}`, INFORMATION);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  function handleClean(): void {\r\n    setShowModalView(true);\r\n    setTimeout(() => {\r\n      formPropsLimparEncerramento.setValue('idGerEmpresa', globalReducer.globalParameter.empresa.id, true);\r\n      formPropsLimparEncerramento.setValue('dataBase', dataUltimoEncerramento, true);\r\n    }, 1000);\r\n  }\r\n\r\n  function handleCloseModal(): void {\r\n    setShowModalView(false);\r\n    atualizarDataUltimoEncerramento();\r\n  }\r\n\r\n  const openMultiPage = (componente: any, openViaDock: boolean) => {\r\n    const Page = componente as FC<any>;\r\n    const pageProps = {\r\n      editItemProps: props.editItemProps,\r\n      history: props.history,\r\n      location: props.location,\r\n      match: props.match,\r\n      openViaDock,\r\n      selectedItem: formProps.getValues(),\r\n    };\r\n    dispatch(multiPageActions.showPage(<Page {...pageProps} />));\r\n  };\r\n\r\n  const openGrupoPlanoConta = () => openMultiPage(ConfigGrupoPlanoContaEditView, true);\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Contas de Resultado - Encerramento\"\r\n      useGlobalParameter={true}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={2235}\r\n    >\r\n      <Form>\r\n        <InputGroupInline formProps={formProps} id=\"ativo\" hidden={true} />\r\n        <InputGroupInline formProps={formProps} id=\"idGerEmpresa\" hidden={true} />\r\n        <InputGroupInline formProps={formProps} id=\"idGerGrupoPlanoConta\" hidden={true} />\r\n        <InputGroupInline formProps={formProps} id=\"passivo\" hidden={true} />\r\n        <Row>\r\n          <Col xs={9}>\r\n            <InputGroupInline\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              id=\"dataEncerramento\"\r\n              label=\"Data de Fechamento\"\r\n              placeholder=\"Informe a Data de Fechamento\"\r\n              isPrependLabel={true}\r\n              inputProps={{ autoFocus: true }}\r\n              type={InputType.DATE}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Button color=\"primary\" type=\"button\" onClick={handleClean}>\r\n              Limpar Contas de Resultado\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Alert color=\"primary\" className=\"text-center\">\r\n          {lblUltimasContasEncerradas}\r\n        </Alert>\r\n        <ProcessBar btnSubmitIcon=\"save\" btnSubmitLabel=\"Encerrar\" handleSubmit={formProps.handleSubmit(handleClosure)} handleClose={handleCancel} />\r\n      </Form>\r\n\r\n      <Modal isOpen={showModalView} centered={true} toggle={handleCloseModal} size=\"lg\">\r\n        <ModalHeader toggle={handleCloseModal}>Contas de Resultado - Encerramento</ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <Row>\r\n              <Col xs={9}>\r\n                <InputGroupInline formProps={formPropsLimparEncerramento} id=\"idGerEmpresa\" hidden={true} />\r\n                <InputGroupInline\r\n                  formProps={{ ...formPropsLimparEncerramento, validation: { required: true } }}\r\n                  id=\"dataBase\"\r\n                  isPrependLabel={true}\r\n                  label=\"Lançamento de Encerramento após a Data\"\r\n                  type={InputType.DATE}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <Button color=\"primary\" type=\"button\" onClick={formPropsLimparEncerramento.handleSubmit(limparContaResultado)}>\r\n                  Limpar\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Alert color=\"primary\" className=\"text-center\">\r\n                  {lblUltimasContasEncerradas}\r\n                </Alert>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter />\r\n      </Modal>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default EncerrarContasResultadoProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread2({}, Fade.defaultProps, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread2({}, Fade.defaultProps, {}, transition, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;","import { Basic } from 'summer';\r\nimport { PlanoContaReferencialInstituicao } from '../mcg/planoContaReferencialInstituicao';\r\nimport { PlanoConta } from './planoConta';\r\n\r\nexport interface GrupoPlanoConta extends Basic {\r\n  codigo?: number;\r\n  descricao?: string;\r\n  digitoAtivo?: string;\r\n  digitoDespesa?: string;\r\n  digitoPassivo?: string;\r\n  digitoPatrimonioLiquido?: string;\r\n  digitoReceita?: string;\r\n  idGerPlanoContaCliente?: number;\r\n  idGerPlanoContaClienteGrupo?: number;\r\n  idGerPlanoContaFornecedor?: number;\r\n  idGerPlanoContaFornecedorGrupo?: number;\r\n  idGerPlanoContaLucro?: number;\r\n  idGerPlanoContaPrejuizo?: number;\r\n  idGerPlanoContaResultado?: number;\r\n  idGerPlanoContaTransportadora?: number;\r\n  idGerPlanoContaTransportadoraGrupo?: number;\r\n  mascara?: string;\r\n  planoContaCliente?: PlanoConta;\r\n  planoContaClienteGrupo?: PlanoConta;\r\n  planoContaFornecedor?: PlanoConta;\r\n  planoContaFornecedorGrupo?: PlanoConta;\r\n  planoContaLucro?: PlanoConta;\r\n  planoContaPrejuizo?: PlanoConta;\r\n  planoContaReferencialInstituicao?: PlanoContaReferencialInstituicao;\r\n  planoContaResultado?: PlanoConta;\r\n  planoContaTransportadora?: PlanoConta;\r\n  planoContaTransportadoraGrupo?: PlanoConta;\r\n  /** tipoPlanoContaReferencialEnum */\r\n  tipoPlanoContaReferencial?: string;\r\n  utilizarContaSinteticaCompleta?: boolean;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.grupoplanoconta';\r\n","import React, { FC } from 'react';\r\nimport { InputGroupInline, InputProps, InputType } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/grupoPlanoConta';\r\n\r\nconst GrupoPlanoContaIS: FC<InputProps> = props => {\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'codigo',\r\n            text: 'Código',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchViewId: 'GrupoPlanoContaSearchView',\r\n      }} // TODO Implementar as regras do IS\r\n      label={props.label ? props.label : 'Grupo de Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Grupo de Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaIS;\r\n","import React, { FC, useEffect, useRef } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Card, CardBody, CardTitle, Col, Row } from 'reactstrap';\r\nimport {\r\n  EditForm,\r\n  EditFormRefProps,\r\n  EditViewProps,\r\n  findById,\r\n  getSelectedItem,\r\n  isEmpty,\r\n  ProcessBar,\r\n  progressActions,\r\n  WindowComponent,\r\n  Wizard,\r\n  WizardActionFinishProps,\r\n  WizardPage,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { CLASS_NAME, GrupoPlanoConta } from '../../../../models/dtos/ger/grupoPlanoConta';\r\nimport { atualizarGlobalParameter } from '../../../../services/ger.service';\r\nimport { GlobalState, setGlobalParameter } from '../../../../store/ducks/global.duck';\r\nimport { Reducers } from '../../../../store/ducks/index';\r\nimport GrupoPlanoContaIS from '../../../components/mcg/grupoPlanoContaIS/GrupoPlanoContaIS';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface ScreenFields {\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n}\r\n\r\ninterface GrupoPlanoContaConfigEditProps extends EditViewProps<GrupoPlanoConta> {\r\n  openViaDock?: boolean;\r\n}\r\n\r\nconst GrupoPlanoContaConfigEditView: FC<GrupoPlanoContaConfigEditProps & RouteComponentProps> = props => {\r\n  const selectedItem = getSelectedItem(props);\r\n  const formProps = useForm<GrupoPlanoConta & ScreenFields>({ defaultValues: selectedItem, mode: 'onBlur' });\r\n  const dispatch = useDispatch();\r\n\r\n  const editFormRef = useRef<EditFormRefProps>();\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (props.openViaDock) {\r\n        setTimeout(() => {\r\n          formProps.reset(selectedItem);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  const onPageChange = currentPageId => {\r\n    if (currentPageId === 'configuracao') {\r\n      loadGrupoPlanoConta();\r\n    }\r\n  };\r\n\r\n  const loadGrupoPlanoConta = (onLoad: (rawData?: any) => void = null, mapKey = null) => {\r\n    const values = formProps.getValues();\r\n    if (!isEmpty(values.grupoPlanoConta)) {\r\n      dispatch(showLoading());\r\n      findById(values.grupoPlanoConta, CLASS_NAME, {\r\n        thenFunction: res => {\r\n          dispatch(progressActions.hideProgress());\r\n          const data = mapKey ? res[mapKey] : res;\r\n          formProps.setValue(Object.keys(data).map(key => ({ [key]: data[key] })));\r\n          if (onLoad) {\r\n            onLoad(res);\r\n          }\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const showLoading = () =>\r\n    progressActions.showProgress({\r\n      animated: true,\r\n      className: 'progress-bar-rounded progress-animated-alt',\r\n      color: 'first',\r\n      striped: true,\r\n      value: 100,\r\n    });\r\n\r\n  const reset = () => {\r\n    formProps.setValue('grupoPlanoConta', null);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    editFormRef.current.close(true);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    editFormRef.current.submit().then(reset);\r\n  };\r\n\r\n  const wizardFinishProps: WizardActionFinishProps = {\r\n    confirmButton: {\r\n      label: 'Salvar',\r\n    },\r\n    onCancel: () => {\r\n      reset();\r\n      onCancel();\r\n    },\r\n    onConfirm: handleSubmit,\r\n  };\r\n\r\n  const validateExtras = () => {\r\n    const erros = [];\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaFornecedor) && !isEmpty(formProps.getValues().planoContaFornecedorGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Fornecedor');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaCliente) && !isEmpty(formProps.getValues().planoContaClienteGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para o Cliente');\r\n    }\r\n\r\n    if (!isEmpty(formProps.getValues().planoContaTransportadora) && !isEmpty(formProps.getValues().planoContaTransportadoraGrupo)) {\r\n      erros.push('Apenas a Conta ou o Grupo deve ser selecionado para a Transportadora');\r\n    }\r\n\r\n    return erros;\r\n  };\r\n\r\n  const defaultWidth = 200;\r\n\r\n  const afterPersist = (): void => {\r\n    atualizarGlobalParameter(\r\n      { id: globalReducer.globalParameter.usuario.id },\r\n      {\r\n        thenFunction: globalParameter => {\r\n          dispatch(setGlobalParameter(globalParameter));\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  const getMainEditView = () => (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Contas de Encerramento</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaLucro\"\r\n                    label=\"Lucro Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Lucro Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaPrejuizo\"\r\n                    label=\"Prejuízo Acumulado\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Prejuízo Acumulado\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaResultado\"\r\n                    label=\"Resultado do Exercício\"\r\n                    labelWidth={defaultWidth}\r\n                    placeholder=\"Informe a Conta de Resultado do Exercício\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Fornecedor</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedor\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os fornecedores.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaFornecedorGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os fornecedores.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Cliente</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaCliente\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todos os clientes.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaClienteGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para os clientes.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ marginBottom: '16px', borderWidth: 'thin' }}>\r\n            <CardBody>\r\n              <CardTitle>Transportadora</CardTitle>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadora\"\r\n                    label=\"Conta\"\r\n                    placeholder=\"Conta analítica fixa para todas as transportadoras.\"\r\n                    analitica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <PlanoContaIS\r\n                    formProps={formProps}\r\n                    id=\"planoContaTransportadoraGrupo\"\r\n                    label=\"Grupo\"\r\n                    placeholder=\"Conta sintética utilizada para geração das contas analíticas para as transportadoras.\"\r\n                    sintetica={true}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Manutenção de Configuração de Grupo de Plano de Conta\"\r\n      useGlobalParameter={true}\r\n      dependencies={[() => hasEmpresa(globalReducer.globalParameter), () => hasEmpresaMCG(globalReducer.globalParameter)]}\r\n      globalParameter={globalReducer.globalParameter}\r\n      wrapBody={props.openViaDock === true}\r\n      wikiId={1363}\r\n    >\r\n      <EditForm\r\n        ref={editFormRef}\r\n        formProps={formProps}\r\n        editViewProps={props}\r\n        dtoClassName={CLASS_NAME}\r\n        externalSubmit={true}\r\n        validateExtras={validateExtras}\r\n        afterPersist={afterPersist}\r\n      >\r\n        {props.openViaDock === true ? (\r\n          <div className=\"m-3\">\r\n            {getMainEditView()}\r\n            <ProcessBar handleSubmit={handleSubmit} handleClose={onCancel} btnSubmitIcon=\"save\" btnSubmitLabel=\"Salvar\" />\r\n          </div>\r\n        ) : (\r\n          <Wizard formProps={formProps} onAfterPageChange={onPageChange} finishProps={wizardFinishProps}>\r\n            <WizardPage id=\"grupoPlanoConta\" title=\"Seleção do Grupo de Plano de Contas\">\r\n              <Row>\r\n                <Col>\r\n                  <GrupoPlanoContaIS id=\"grupoPlanoConta\" formProps={{ ...formProps, validation: { required: true } }} />\r\n                </Col>\r\n              </Row>\r\n            </WizardPage>\r\n            <WizardPage id=\"configuracao\" title=\"Configurações\">\r\n              {getMainEditView()}\r\n            </WizardPage>\r\n          </Wizard>\r\n        )}\r\n      </EditForm>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default GrupoPlanoContaConfigEditView;\r\n"],"sourceRoot":""}