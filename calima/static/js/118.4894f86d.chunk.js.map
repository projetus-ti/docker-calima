{"version":3,"sources":["views/pages/mcg/transferenciaLancamentoConta/TransferenciaLancamentoContaProcessView.tsx","dependencies/empresaDependency.ts","dependencies/grupoEmpresaConfigDependency.ts","dependencies/empresaMCGDependency.ts","services/mcg.service.ts","views/components/mcg/planoContaIS/PlanoContaIS.tsx","models/dtos/ger/planoConta.ts","../node_modules/reactstrap/es/Alert.js","dependencies/grupoPlanoContasDependency.ts"],"names":["TransferenciaLancamentoContaProcessView","props","formProps","useForm","mode","globalReducer","useSelector","state","dispatch","useDispatch","_useState","useState","_useState2","Object","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","showLancamentoResult","setShowLancamentoResult","_useState3","_useState4","selectedItems","setSelectedItems","_useState5","_useState6","resultLancamento","setResultLancamento","onClose","goBack","dispatchClose","history","handleCancel","useEffect","isEmpty","globalParameter","empresaMCG","empresa","_globalReducer$global","_globalReducer$global2","refAtual","refFinal","setTimeout","setValue","id","formatDate","parseRefToDate","dataInicial","getValues","dtInicial","dataDoFormulario","toDate","String","dataFinal","parseLastDay","parseDateToRef","validateExtras","param","errors","compare","dtFinal","push","debito","credito","contaOrigem","contaDestino","initProcessBar","progressActions","showProgress","animated","className","color","label","striped","value","closeProcessBar","hideProgress","selectRow","clickToSelect","SelectModeEnum","CHECKBOX","onSelect","row","isSelect","filter","it","onSelectAll","rows","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","summer__WEBPACK_IMPORTED_MODULE_12__","title","useGlobalParameter","dependencies","hasEmpresa","hasEmpresaMCG","hasGrupoEmpresaConfig","hasGrupoPlanoContas","wikiId","reactstrap__WEBPACK_IMPORTED_MODULE_6__","Fragment","hidden","reactstrap__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap_table_next__WEBPACK_IMPORTED_MODULE_3___default","keyField","data","columns","dataField","text","editable","sort","formatter","cell","planoContaDebito","conta","descricao","planoContaCredito","responsive","handleSubmit","length","lancamentos","transferirLancamentoConta","errorFunction","mensagem","showToast","ERROR","thenFunction","result","params","message","type","AlertType","INFORMATION","alertManager","emit","ACTION_EVENTS","SHOW","doTransfer","WARNING","handleClose","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","validation","required","isPrependLabel","labelWidth","placeholder","InputType","DATE","_components_mcg_planoContaIS_PlanoContaIS__WEBPACK_IMPORTED_MODULE_18__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","tag","Row","reactstrap__WEBPACK_IMPORTED_MODULE_11__","name","innerRef","register","inline","erros","React","ErroList","recuperarLancamentoConta","getConta","__webpack_require__","d","__webpack_exports__","grupoEmpresaRaiz","grupoEmpresaConfig","grupoEmpresa","getService","create","gerarLancamentosFolhaPagamento","integracaoFolhaParam","send","post","integrarFolhaPagamento","lancamentoIntegracaoFolha","integrarMCP","importarParam","importarLancamentoCSV","formDataSend","FormData","append","importarDuplicados","importarLancamentosCardinal","_step","_iterator","C_Program_Files_x86_Jenkins_workspace_Calima_react_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_0__","arquivos","s","n","done","arquivo","file","nomeArquivo","err","e","f","importarLancamentoPadraoCSV","_step2","_iterator2","importarHistoricoCSV","grupoHistoricoDestino","_step3","_iterator3","importarPlanoContaCSV","idEmpresa","grupoPlanoContaDestino","_step4","_iterator4","importarHistorico","importacaoHistorico","importarPlanoConta","importacaoPlanoContaParam","buscarConfigLivroFolhaMCG","get","integracaoFiscalContabil","encerrarContas","contaResultadoEncerramento","force","getDataUltimaContaEncerrada","idGerEmpresa","limparEncerramentoContaResultado","contaResultadoLimpeza","validarReferenciaSPEDECFIrpjCsll","configECFIrpjCsll","validarReferenciaSPEDECFImuneIsenta","configECFImuneIsenta","validarRefRemuneracaoSocio","configECFRemuneracaoSocio","validarQuadroSocietario","configQuadro","obterLucroPrejuizoClassificacao","idGrupoPlanoConta","getSaldo","saldo","validarDadosSpedECF","ecfExportacaoParam","gerarSpedECF","usuario","getArquivoDigitalService","transferenciaLancamentoConta","obterBancoPlanoConta","bancoPlanoContaDTO","validarConfigLivroFolha","changeLivroFolha","fecharRestaurar","fechamentoRestauracao","forceFecharRestaurar","verificarErros","gerarSpedContabil","selecaoSped","arquivoRTFEscrituracaoSubstituida","_step5","_iterator5","atributoSelecaoSped","salvarLucroPrejuizoClassificacao","lucroPrejuizoClassificacao","consultarMovimentacao","saldoCriteria","totalizadorLancamento","consulta","getSaldoAnterior","isDataEncerrada","parametros","abrirContas","removeLancamentoPeriodo","obterContasClassificacaoIndireto","salvarClassificacaoIndireto","contaFluxoCaixaIndireto","obterMutacaoPatrimonioLiquido","salvarMutacaoPatrimonioLiquido","mutacaoPatrimonioLiquido","salvarContaResultado","contaResultado","excluirContaResultado","obterContasClassificacaoDireto","salvarClassificacaoDireto","contaFluxoCaixa","findSubGrupo","planoContaSubGrupoParam","removerTodosPlanosConta","removeList","listaPlanoConta","apagarFilha","listSubGrupo","planoConta","referenciarContas","idsPlanoConta","idPlanoContaReferencial","idPlanoContaReferencialECF","desvincularContas","existeLancamentoEmContaAnalitica","idPlanoConta","importarLancamentoMCG","tipoImportacao","sobescrever","versaoSuperiorA2","importarSpedContabil","_step6","_iterator6","gerarManadContabil","refInicial","arquivoSFP","evolucaoContaContabilGraf","evolucaoContaContabilGrafParam","composicaoReceitaDespesasGraf","compReceitaDespesasGrafParam","gerarFCONTContabil","fContContabilCrit","obterDadosArquivoExtrato","arquivoSelecionado","idBancoMCG","obterDadosConciliacaoBancariaPeriodo","obterBancoListPlanoConta","conciliarLancamentosExtrato","listConciliacaoBancaria","removerConciliarLancamentosExtrato","listaRemover","removerLancamentosExtratoBancario","obterLancamentosSaldoPeriodo","historico","valor","operacaoConsultaValor","conciliarLancamentosConta","listaConciliacao","removerConciliarLancamentosConta","listaConciliarRemover","eLalurAContas","eLacsAContas","getSaldoDebito","getSaldoCredito","removerLancamentoLote","atualizaCalculoIrpjCsll","buscarLancamentosHonorarios","integracaoHonorariosParam","integrarHonorarios","isAlteraCalculoIRPJorCSLL","alterarPlanoContaNaturezaConfig","enumPlanoContaNaturezaConta","prepararContaResultado","PlanoContaIS","react__WEBPACK_IMPORTED_MODULE_1___default","summer__WEBPACK_IMPORTED_MODULE_3__","assign","searchViewProps","filtroContaResultado","hideExtraFields","useDefaultSelectRow","inputSearchProps","dtoClassName","CLASS_NAME","searchExpressions","expressions","analitica","alias","conditionalGroup","fieldName","sintetica","forEach","filtro","grupoPlanoConta","searchViewId","INPUT_SEARCH","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_3___default","prop_types__WEBPACK_IMPORTED_MODULE_4__","prop_types__WEBPACK_IMPORTED_MODULE_4___default","classnames__WEBPACK_IMPORTED_MODULE_5__","classnames__WEBPACK_IMPORTED_MODULE_5___default","_utils__WEBPACK_IMPORTED_MODULE_6__","_Fade__WEBPACK_IMPORTED_MODULE_7__","propTypes","children","node","string","closeClassName","closeAriaLabel","cssModule","object","fade","bool","isOpen","toggle","func","transition","shape","oneOfType","defaultProps","unmountOnExit","Alert","Tag","attributes","classes","alert-dismissible","closeClasses","alertTransition","baseClass","timeout","in","role","aria-label","onClick","aria-hidden","mascara","digitoAtivo","digitoPassivo","digitoReceita","digitoDespesa"],"mappings":"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","file":"static/js/118.4894f86d.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Alert, Col, CustomInput, Form, FormGroup, Row } from 'reactstrap';\r\nimport {\r\n  ACTION_EVENTS,\r\n  alertManager,\r\n  AlertProps,\r\n  AlertType,\r\n  ColumnsProps,\r\n  compare,\r\n  dispatchClose,\r\n  EditViewProps,\r\n  ErroList,\r\n  ERROR,\r\n  formatDate,\r\n  InputGroupInline,\r\n  InputType,\r\n  isEmpty,\r\n  parseDateToRef,\r\n  parseLastDay,\r\n  parseRefToDate,\r\n  ProcessBar,\r\n  progressActions,\r\n  SelectModeEnum,\r\n  showToast,\r\n  toDate,\r\n  WindowComponent,\r\n} from 'summer';\r\nimport { hasEmpresa } from '../../../../dependencies/empresaDependency';\r\nimport { hasEmpresaMCG } from '../../../../dependencies/empresaMCGDependency';\r\nimport { hasGrupoEmpresaConfig } from '../../../../dependencies/grupoEmpresaConfigDependency';\r\nimport { hasGrupoPlanoContas } from '../../../../dependencies/grupoPlanoContasDependency';\r\nimport { Lancamento } from '../../../../models/dtos/mcg/lancamento';\r\nimport { TransferenciaLancamentoConta } from '../../../../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { recuperarLancamentoConta, transferirLancamentoConta } from '../../../../services/mcg.service';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\nimport PlanoContaIS from '../../../components/mcg/planoContaIS/PlanoContaIS';\r\n\r\ninterface TransferenciaLancamentoContaProcessViewProps extends EditViewProps<TransferenciaLancamentoConta> {}\r\n\r\nconst TransferenciaLancamentoContaProcessView: FC<TransferenciaLancamentoContaProcessViewProps & RouteComponentProps> = props => {\r\n  const formProps = useForm<TransferenciaLancamentoConta>({ mode: 'onBlur' });\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const [showLancamentoResult, setShowLancamentoResult] = useState(null);\r\n  const [selectedItems, setSelectedItems] = useState<TransferenciaLancamentoConta[]>([]);\r\n  const [resultLancamento, setResultLancamento] = useState([]);\r\n\r\n  const onClose = (goBack: boolean = true) => {\r\n    dispatchClose(props, props.history, goBack);\r\n  };\r\n\r\n  const handleCancel = () => onClose();\r\n\r\n  const defaultWidth: number = 120;\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!isEmpty(globalReducer.globalParameter.empresaMCG) && !isEmpty(globalReducer.globalParameter.empresa)) {\r\n        const {\r\n          empresaMCG: { refAtual, refFinal },\r\n          empresa,\r\n        } = globalReducer.globalParameter;\r\n\r\n        setTimeout(() => {\r\n          // @ts-ignore\r\n          formProps.setValue('empresa.id', empresa.id);\r\n          formProps.setValue('dtInicial', formatDate(parseRefToDate(refAtual, 1)), true);\r\n          formProps.setValue('dtFinal', formatDate(parseRefToDate(refFinal, 0)), true);\r\n          formProps.setValue('debito', true);\r\n          formProps.setValue('credito', true);\r\n        }, 800);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n\r\n  /** Ajusta a data final de acordo com a data inicial jogando sempre para o ultimo dia do mês. */\r\n  const dataInicial = formProps.getValues().dtInicial;\r\n\r\n  useEffect(\r\n    () => {\r\n      if (dataInicial) {\r\n        const dataDoFormulario = toDate(String(formProps.getValues().dtInicial));\r\n        const dataFinal = parseLastDay(parseDateToRef(dataDoFormulario));\r\n        formProps.setValue('dtFinal', formatDate(dataFinal), true);\r\n      } else {\r\n        formProps.setValue('dtFinal', null);\r\n      }\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [dataInicial]\r\n  );\r\n\r\n  const validateExtras = (param: TransferenciaLancamentoConta): string[] => {\r\n    const errors = [];\r\n    if (compare(String(param.dtInicial), String(param.dtFinal)) > 0) {\r\n      errors.push(' A Data Final não pode ser menor que a Data Inicial');\r\n    }\r\n\r\n    /** Verifica se ao menos uma opção entre débito e crédito está marcada */\r\n    if (!param.debito && !param.credito) {\r\n      errors.push(' Pelo menos uma das opções débito e crédito deve estar selecionada');\r\n    }\r\n\r\n    if (param.contaOrigem.id === param.contaDestino.id) {\r\n      errors.push(' Conta de origem e destino devem ser diferentes');\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  function initProcessBar(): void {\r\n    dispatch(\r\n      progressActions.showProgress({\r\n        animated: true,\r\n        className: 'progress-bar-rounded progress-animated-alt',\r\n        color: 'first',\r\n        label: 'Aguarde processando...',\r\n        striped: true,\r\n        value: 100,\r\n      })\r\n    );\r\n  }\r\n\r\n  function closeProcessBar(): void {\r\n    dispatch(progressActions.hideProgress());\r\n  }\r\n\r\n  function handleGetConta(param: TransferenciaLancamentoConta): void {\r\n    const erros = validateExtras(param);\r\n    if (erros && erros.length) {\r\n      const params = {\r\n        message: React.createElement(ErroList, {\r\n          erros,\r\n        }),\r\n        type: AlertType.ERROR,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n      return;\r\n    }\r\n    initProcessBar();\r\n    getConta(param);\r\n  }\r\n\r\n  function getConta(param: TransferenciaLancamentoConta): void {\r\n    recuperarLancamentoConta(param, {\r\n      errorFunction: mensagem => {\r\n        showToast(mensagem, ERROR);\r\n        closeProcessBar();\r\n      },\r\n      thenFunction: (result: Lancamento[]) => {\r\n        closeProcessBar();\r\n        if (result.length > 0) {\r\n          setResultLancamento(result);\r\n          setShowLancamentoResult(true);\r\n        } else {\r\n          const params: AlertProps = {\r\n            message: 'Nenhum lançamento encontrado.',\r\n            type: AlertType.INFORMATION,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  function handleTransfer(param: TransferenciaLancamentoConta): void {\r\n    if (selectedItems.length > 0) {\r\n      initProcessBar();\r\n      param.lancamentos = selectedItems;\r\n      doTransfer(param);\r\n    } else {\r\n      const params: AlertProps = {\r\n        message: 'Ao menos 1 lançamento deve ser selecionado para fazer a transferência de contas.',\r\n        type: AlertType.WARNING,\r\n      };\r\n      alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n    }\r\n  }\r\n\r\n  function doTransfer(param: TransferenciaLancamentoConta): void {\r\n    transferirLancamentoConta(param, {\r\n      errorFunction: mensagem => {\r\n        showToast(mensagem, ERROR);\r\n        closeProcessBar();\r\n      },\r\n      thenFunction: (result: boolean) => {\r\n        closeProcessBar();\r\n        if (result) {\r\n          const params: AlertProps = {\r\n            message: 'Lançamentos transferidos com sucesso.',\r\n            type: AlertType.INFORMATION,\r\n          };\r\n          alertManager.emit(ACTION_EVENTS.SHOW, params);\r\n        }\r\n        onClose();\r\n      },\r\n    });\r\n  }\r\n\r\n  const columns: ColumnsProps[] = [\r\n    {\r\n      dataField: 'rowNumber',\r\n      hidden: true,\r\n      text: 'Row Number',\r\n    },\r\n    {\r\n      dataField: 'numero',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Número',\r\n    },\r\n    {\r\n      dataField: 'data',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Data',\r\n    },\r\n    {\r\n      dataField: 'planoContaDebito.conta',\r\n      editable: false,\r\n      formatter: (cell, row) => {\r\n        return row.planoContaDebito.conta + ' - ' + row.planoContaDebito.descricao;\r\n      },\r\n      sort: true,\r\n      text: 'Débito',\r\n    },\r\n    {\r\n      dataField: 'planoContaCredito.conta',\r\n      editable: false,\r\n      formatter: (cell, row) => {\r\n        return row.planoContaCredito.conta + ' - ' + row.planoContaCredito.descricao;\r\n      },\r\n      sort: true,\r\n      text: 'Crédito',\r\n    },\r\n    {\r\n      dataField: 'valor',\r\n      editable: false,\r\n      sort: true,\r\n      text: 'Valor',\r\n    },\r\n  ];\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    setSelectedItems(isSelect ? [...selectedItems, row] : selectedItems.filter(it => it.id !== row.id));\r\n  };\r\n\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    setSelectedItems(isSelect ? rows : []);\r\n  };\r\n\r\n  const selectRow = {\r\n    clickToSelect: true,\r\n    mode: SelectModeEnum.CHECKBOX,\r\n    onSelect: handleOnSelect,\r\n    onSelectAll: handleOnSelectAll,\r\n  };\r\n\r\n  return (\r\n    <WindowComponent\r\n      title=\"Transferência de Lançamentos entre Contas\"\r\n      useGlobalParameter={false}\r\n      globalParameter={globalReducer.globalParameter}\r\n      dependencies={[\r\n        () => hasEmpresa(globalReducer.globalParameter),\r\n        () => hasEmpresaMCG(globalReducer.globalParameter),\r\n        () => hasGrupoEmpresaConfig(globalReducer.globalParameter),\r\n        () => hasGrupoPlanoContas(globalReducer.globalParameter),\r\n      ]}\r\n      wikiId={2214}\r\n    >\r\n      <Form>\r\n        {showLancamentoResult ? (\r\n          <>\r\n            <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n            <InputGroupInline formProps={formProps} id=\"debito\" hidden={true} />\r\n            <InputGroupInline formProps={formProps} id=\"credito\" hidden={true} />\r\n            <InputGroupInline formProps={formProps} id=\"dtInicial\" hidden={true} />\r\n            <InputGroupInline formProps={formProps} id=\"dtFinal\" hidden={true} />\r\n            <Alert color=\"primary\" className=\"text-center\">\r\n              Selecione os lançamentos que deseja fazer a transferência de contas.\r\n            </Alert>\r\n            <BootstrapTable keyField=\"id\" data={resultLancamento || []} columns={columns} selectRow={selectRow} responsive={true} striped={true} />\r\n            <ProcessBar handleSubmit={formProps.handleSubmit(handleTransfer)} handleClose={handleCancel} />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <InputGroupInline formProps={formProps} id=\"empresa.id\" hidden={true} />\r\n            <Row>\r\n              <Col>\r\n                <InputGroupInline\r\n                  formProps={{ ...formProps, validation: { required: true } }}\r\n                  id=\"dtInicial\"\r\n                  isPrependLabel={true}\r\n                  label=\"Data Inicial\"\r\n                  labelWidth={defaultWidth}\r\n                  placeholder=\"Informe a Data Inicial\"\r\n                  type={InputType.DATE}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <InputGroupInline\r\n                  formProps={{ ...formProps, validation: { required: true } }}\r\n                  id=\"dtFinal\"\r\n                  isPrependLabel={true}\r\n                  label=\"Data Final\"\r\n                  labelWidth={defaultWidth}\r\n                  placeholder=\"Informe a Data Final\"\r\n                  type={InputType.DATE}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <PlanoContaIS\r\n              id=\"contaOrigem\"\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              label=\"Conta de Origem\"\r\n              placeholder=\"Informe a Conta de Origem\"\r\n            />\r\n            <PlanoContaIS\r\n              id=\"contaDestino\"\r\n              formProps={{ ...formProps, validation: { required: true } }}\r\n              label=\"Conta de Destino\"\r\n              placeholder=\"Informe a Conta de Destino\"\r\n            />\r\n            <FormGroup tag={Row}>\r\n              <Col>\r\n                <CustomInput type=\"switch\" id=\"debito\" name=\"debito\" label=\"Débito\" innerRef={formProps.register} inline={true} />\r\n                <CustomInput type=\"switch\" id=\"credito\" name=\"credito\" label=\"Crédito\" innerRef={formProps.register} inline={true} />\r\n              </Col>\r\n            </FormGroup>\r\n            <ProcessBar handleSubmit={formProps.handleSubmit(handleGetConta)} handleClose={handleCancel} />\r\n          </>\r\n        )}\r\n      </Form>\r\n    </WindowComponent>\r\n  );\r\n};\r\n\r\nexport default TransferenciaLancamentoContaProcessView;\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresa(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresa) {\r\n    result = 'Pelo menos uma empresa deve estar selecionada.';\r\n  }\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoEmpresaConfig(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    'O Grupo de empresas não está configurado para a empresa selecionada. Para configurar acesse:\\n' +\r\n    'Modulo Principal > Manutenção > Configurações > Grupo de Empresa';\r\n\r\n  if (\r\n    !globalParameter.empresa ||\r\n    !globalParameter.empresa.grupoEmpresaRaiz.grupoEmpresaConfig ||\r\n    !globalParameter.empresa.grupoEmpresa.grupoEmpresaConfig\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasEmpresaMCG(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n  if (!globalParameter.empresaMCG) {\r\n    result =\r\n      'A empresa selecionada não está configurada para o módulo Contábil. Para configurá-la acesse:\\n' +\r\n      'Módulo Contábil > Manutenção > Configurações > Empresa.';\r\n  }\r\n  return result;\r\n}\r\n","import { AxiosInstance } from 'axios';\r\nimport { ArquivoSelecionado, AxiosParam, create, isEmpty, send } from 'summer';\r\nimport { PlanoConta } from '../models/dtos/ger/planoConta';\r\nimport { PlanoContaSubGrupoParam } from '../models/dtos/ger/planoContaSubGrupoParam';\r\nimport { RuleMessage } from '../models/dtos/ger/ruleMessage';\r\nimport { Usuario } from '../models/dtos/ger/usuario';\r\nimport { BancoExtrato } from '../models/dtos/mcg/bancoExtrato';\r\nimport { BancoMCG } from '../models/dtos/mcg/bancoMCG';\r\nimport { BancoPlanoConta } from '../models/dtos/mcg/bancoPlanoConta';\r\nimport { CalculoIrpjCsll } from '../models/dtos/mcg/calculoIrpjCsll';\r\nimport { ComposicaoReceitaDespesasGrafParam } from '../models/dtos/mcg/composicaoReceitaDespesasGrafParam';\r\nimport { ComposicaoReceitaDespesasGrafReturn } from '../models/dtos/mcg/composicaoReceitaDespesasGrafReturn';\r\nimport { ConciliacaoBancaria } from '../models/dtos/mcg/conciliacaoBancaria';\r\nimport { ConciliacaoConta } from '../models/dtos/mcg/conciliacaoConta';\r\nimport { ConfigECFImuneIsenta } from '../models/dtos/mcg/configECFImuneIsenta';\r\nimport { ConfigECFIrpjCsll } from '../models/dtos/mcg/configECFIrpjCsll';\r\nimport { ConfigECFRemuneracaoSocio } from '../models/dtos/mcg/configECFRemuneracaoSocio';\r\nimport { ConsultaTotalLancamento } from '../models/dtos/mcg/consultaTotalLancamento';\r\nimport { ContaFluxoCaixa } from '../models/dtos/mcg/contaFluxoCaixa';\r\nimport { ContaFluxoCaixaIndireto } from '../models/dtos/mcg/contaFluxoCaixaIndireto';\r\nimport { ContaResultado } from '../models/dtos/mcg/contaResultado';\r\nimport { ContaResultadoLimpeza } from '../models/dtos/mcg/contaResultadoLimpeza';\r\nimport { ContaResultadoMCGEncerramento } from '../models/dtos/mcg/contaResultadoMCGEncerramento';\r\nimport { DataEncerradaParam } from '../models/dtos/mcg/dataEncerradaParam';\r\nimport { ECFExportacaoParam } from '../models/dtos/mcg/ecfExportacaoParam';\r\nimport { Erros } from '../models/dtos/mcg/erros';\r\nimport { EvolucaoContaContabilGrafParam } from '../models/dtos/mcg/evolucaoContaContabilGrafParam';\r\nimport { EvolucaoContaContabilGrafReturn } from '../models/dtos/mcg/evolucaoContaContabilGrafReturn';\r\nimport { FCONTContabilCrit } from '../models/dtos/mcg/fContContabilCrit';\r\nimport { FechamentoRestauracaoMCG } from '../models/dtos/mcg/fechamentoRestauracaoMCG';\r\nimport { ImportacaoFiscalContabil, ImportacaoFiscalContabilResult } from '../models/dtos/mcg/importacaoFiscalContabil';\r\nimport { ImportacaoHistorico } from '../models/dtos/mcg/importacaoHistorico';\r\nimport { ImportacaoHistoricoCSVParam } from '../models/dtos/mcg/importacaoHistoricoCSVParam';\r\nimport { ImportacaoLancamentoCSVParam } from '../models/dtos/mcg/importacaoLancamentoCSVParam';\r\nimport { ImportacaoLancamentoMCGRetornoValidacao } from '../models/dtos/mcg/importacaoLancamentoMCGRetornoValidacao';\r\nimport { ImportacaoLancamentoMCGSelecao } from '../models/dtos/mcg/importacaoLancamentoMCGSelecao';\r\nimport { ImportacaoLancamentoPadraoCSVParam } from '../models/dtos/mcg/importacaoLancamentoPadraoCSVParam';\r\nimport { ImportacaoPlanoConta } from '../models/dtos/mcg/importacaoPlanoConta';\r\nimport { ImportacaoPlanoContaCSVParam } from '../models/dtos/mcg/importacaoPlanoContaCSVParam';\r\nimport { ImportacaoSpedContabil } from '../models/dtos/mcg/importacaoSpedContabil';\r\nimport { ImportacaoResult, ImportarMCP } from '../models/dtos/mcg/importarMCP';\r\nimport { InfoConciliacaoBancaria } from '../models/dtos/mcg/infoConciliacaoBancaria';\r\nimport { IntegracaoFolhaParam } from '../models/dtos/mcg/integracaoFolhaParam';\r\nimport { IntegracaoHonorariosParam } from '../models/dtos/mcg/integracaoHonorariosParam';\r\nimport { Lancamento } from '../models/dtos/mcg/lancamento';\r\nimport { LancamentoConciliacao } from '../models/dtos/mcg/lancamentoConciliacao';\r\nimport { LancamentoIntegracaoFolha } from '../models/dtos/mcg/lancamentoIntegracaoFolha';\r\nimport { LancamentoIntegracaoHonorarios } from '../models/dtos/mcg/lancamentoIntegracaoHonorarios';\r\nimport { LancamentoSaldo } from '../models/dtos/mcg/lancamentoSaldo';\r\nimport { LivroFolha } from '../models/dtos/mcg/livroFolha';\r\nimport { LucroPrejuizoClassificacao } from '../models/dtos/mcg/lucroPrejuizoClassificacao';\r\nimport { MANADContabilCrit } from '../models/dtos/mcg/manadContabilCrit';\r\nimport { MutacaoPatrimonioLiquido } from '../models/dtos/mcg/mutacaoPatrimonioLiquido';\r\nimport { QuadroSocietario } from '../models/dtos/mcg/quadroSocietario';\r\nimport { RemoveLancamentoLote } from '../models/dtos/mcg/removeLancamentoLote';\r\nimport { RemoveLancamentoPeriodo } from '../models/dtos/mcg/removeLancamentoPeriodo';\r\nimport { Saldo } from '../models/dtos/mcg/saldo';\r\nimport { SaldoCriteria } from '../models/dtos/mcg/saldoCriteria';\r\nimport { SelecaoSpedContabil } from '../models/dtos/mcg/selecaoSpedContabil';\r\nimport { SomaSaldo } from '../models/dtos/mcg/somaSaldo';\r\nimport { TotalizadorLancamento } from '../models/dtos/mcg/totalizadorLancamento';\r\nimport { TransferenciaLancamentoConta } from '../models/dtos/mcg/transferenciaLancamentoConta';\r\nimport { VerificarErros } from '../models/dtos/mcg/verificarErros';\r\nimport { getArquivoDigitalService } from './ger.service';\r\n\r\nfunction getService(): AxiosInstance {\r\n  return create('/mcg');\r\n}\r\n\r\nexport function gerarLancamentosFolhaPagamento(integracaoFolhaParam: IntegracaoFolhaParam, param: AxiosParam<LancamentoIntegracaoFolha[]>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/gerarLancamentosFolhaPagamento', integracaoFolhaParam), param);\r\n}\r\n\r\nexport function integrarFolhaPagamento(lancamentoIntegracaoFolha: LancamentoIntegracaoFolha[], param: AxiosParam<any>) {\r\n  send(getService().post<LancamentoIntegracaoFolha[]>('/integrarFolhaPagamento', lancamentoIntegracaoFolha), param);\r\n}\r\n\r\nexport function integrarMCP(importarParam: ImportarMCP, param: AxiosParam<ImportacaoResult>) {\r\n  send(getService().post<ImportacaoResult>('/importar', importarParam), param);\r\n}\r\n\r\nexport function importarLancamentoCSV(data: ImportacaoLancamentoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('importarDuplicados', String(data.importarDuplicados));\r\n  formDataSend.append('importarLancamentosCardinal', String(data.importarLancamentosCardinal));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarLancamentoPadraoCSV(data: ImportacaoLancamentoPadraoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarLancamentoPadraoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistoricoCSV(data: ImportacaoHistoricoCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('grupoHistoricoDestino.id', String(data.grupoHistoricoDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarHistoricoCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarPlanoContaCSV(data: ImportacaoPlanoContaCSVParam, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idEmpresa', String(data.idEmpresa));\r\n  formDataSend.append('grupoPlanoContaDestino.id', String(data.grupoPlanoContaDestino.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n  send(getService().post<RuleMessage[]>('/importarPlanoContaCSV', formDataSend), param);\r\n}\r\n\r\nexport function importarHistorico(importacaoHistorico: ImportacaoHistorico, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarHistorico', importacaoHistorico), param);\r\n}\r\n\r\nexport function importarPlanoConta(importacaoPlanoContaParam: ImportacaoPlanoConta, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/importarPlanoConta', importacaoPlanoContaParam), param);\r\n}\r\n\r\nexport function buscarConfigLivroFolhaMCG(idEmpresa: number, param: AxiosParam<LivroFolha>) {\r\n  send(getService().get<LivroFolha>('/buscarConfigLivroFolhaMCG/' + idEmpresa), param);\r\n}\r\n\r\nexport function integracaoFiscalContabil(importarParam: ImportacaoFiscalContabil, param: AxiosParam<ImportacaoFiscalContabilResult>) {\r\n  send(getService().post<ImportacaoFiscalContabilResult>('/integracaoFiscalContabil', importarParam), param);\r\n}\r\n\r\nexport function encerrarContas(\r\n  contaResultadoEncerramento: ContaResultadoMCGEncerramento,\r\n  force: boolean,\r\n  param: AxiosParam<ContaResultadoMCGEncerramento>\r\n) {\r\n  send(\r\n    getService().post<ContaResultadoMCGEncerramento>('/encerrarContas', { contaResultadoEncerramento, force }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function getDataUltimaContaEncerrada(idGerEmpresa: number, param: AxiosParam<Date>) {\r\n  send(getService().get<Date>('/getDataUltimaContaEncerrada/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function limparEncerramentoContaResultado(contaResultadoLimpeza: ContaResultadoLimpeza, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/limparEncerramentoContaResultadoApos', contaResultadoLimpeza), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFIrpjCsll(configECFIrpjCsll: ConfigECFIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFIrpjCsll', configECFIrpjCsll), param);\r\n}\r\n\r\nexport function validarReferenciaSPEDECFImuneIsenta(configECFImuneIsenta: ConfigECFImuneIsenta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarReferenciaSPEDECFImuneIsenta', configECFImuneIsenta), param);\r\n}\r\n\r\nexport function validarRefRemuneracaoSocio(configECFRemuneracaoSocio: ConfigECFRemuneracaoSocio, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/validarRefRemuneracaoSocio', configECFRemuneracaoSocio), param);\r\n}\r\n\r\nexport function validarQuadroSocietario(configQuadro: QuadroSocietario, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/validarQuadroSocietario', configQuadro), param);\r\n}\r\n\r\nexport function obterLucroPrejuizoClassificacao(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterLucroPrejuizoClassificacao/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function getSaldo(saldo: Saldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldo', saldo), param);\r\n}\r\n\r\nexport function validarDadosSpedECF(ecfExportacaoParam: ECFExportacaoParam, param: AxiosParam<RuleMessage[]>) {\r\n  send(getService().post<RuleMessage[]>('/validarDadosSpedECF', ecfExportacaoParam), param);\r\n}\r\n\r\nexport function gerarSpedECF(usuario: Usuario, ecfExportacaoParam: ECFExportacaoParam, param?: AxiosParam<string>) {\r\n  send(\r\n    getArquivoDigitalService().post<string>('/gerarSpedECF', { usuario, ecfExportacaoParam }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function recuperarLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<Lancamento[]>) {\r\n  send(getService().post<Lancamento[]>('/recuperarLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function transferirLancamentoConta(transferenciaLancamentoConta: TransferenciaLancamentoConta, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/transferirLancamentoConta', transferenciaLancamentoConta), param);\r\n}\r\n\r\nexport function obterBancoPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG>) {\r\n  send(getService().post<BancoMCG>('/obterBancoPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function validarConfigLivroFolha(idGerEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(getService().get<boolean>('/validarConfigLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function changeLivroFolha(idGerEmpresa: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/changeLivroFolha/' + idGerEmpresa), param);\r\n}\r\n\r\nexport function fecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<RuleMessage>) {\r\n  send(getService().post<RuleMessage>('/fecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function forceFecharRestaurar(fechamentoRestauracao: FechamentoRestauracaoMCG, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/forceFecharRestaurar', fechamentoRestauracao), param);\r\n}\r\n\r\nexport function verificarErros(erros: VerificarErros, param: AxiosParam<Erros[]>) {\r\n  send(getService().post<Erros[]>('/verificarErros', erros), param);\r\n}\r\n\r\nexport function gerarSpedContabil(selecaoSped: SelecaoSpedContabil, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('usuario.id', String(selecaoSped.usuario.id));\r\n\r\n  if (selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n    for (const arquivo of selecaoSped.arquivoRTFEscrituracaoSubstituida) {\r\n      formDataSend.append('arquivoRTFEscrituracaoSubstituida', arquivo.file, arquivo.nomeArquivo);\r\n    }\r\n  }\r\n\r\n  for (const atributoSelecaoSped in selecaoSped) {\r\n    if (\r\n      atributoSelecaoSped !== 'arquivoRTFEscrituracaoSubstituida' &&\r\n      atributoSelecaoSped !== 'usuario' &&\r\n      selecaoSped[atributoSelecaoSped] !== null\r\n    ) {\r\n      formDataSend.append(atributoSelecaoSped, selecaoSped[atributoSelecaoSped]);\r\n    }\r\n  }\r\n  send(getService().post<string>('/gerarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function salvarLucroPrejuizoClassificacao(\r\n  lucroPrejuizoClassificacao: LucroPrejuizoClassificacao,\r\n  param: AxiosParam<LucroPrejuizoClassificacao>\r\n) {\r\n  send(getService().post<LucroPrejuizoClassificacao>('/salvarLucroPrejuizoClassificacao', lucroPrejuizoClassificacao), param);\r\n}\r\n\r\nexport function consultarMovimentacao(saldoCriteria: SaldoCriteria, param: AxiosParam<LancamentoSaldo[]>) {\r\n  send(getService().post<LancamentoSaldo[]>('/consultarMovimentacao', saldoCriteria), param);\r\n}\r\n\r\nexport function totalizadorLancamento(consulta: ConsultaTotalLancamento, param: AxiosParam<TotalizadorLancamento>) {\r\n  send(getService().post<TotalizadorLancamento>('/totalizadorLancamento', consulta), param);\r\n}\r\n\r\nexport function getSaldoAnterior(saldoCriteria: SaldoCriteria, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoAnterior', saldoCriteria), param);\r\n}\r\n\r\nexport function isDataEncerrada(parametros: DataEncerradaParam, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isDataEncerrada', parametros), param);\r\n}\r\n\r\nexport function abrirContas(parametros: DataEncerradaParam, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/abrirContas', parametros), param);\r\n}\r\n\r\nexport function removeLancamentoPeriodo(parametros: RemoveLancamentoPeriodo, param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removeLancamentoPeriodo', parametros), param);\r\n}\r\n\r\nexport function obterContasClassificacaoIndireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixaIndireto[]>) {\r\n  send(getService().get<ContaFluxoCaixaIndireto[]>('/obterContasClassificacaoIndireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoIndireto(contaFluxoCaixaIndireto: ContaFluxoCaixaIndireto, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoIndireto', contaFluxoCaixaIndireto), param);\r\n}\r\n\r\nexport function obterMutacaoPatrimonioLiquido(idGrupoPlanoConta: number, param: AxiosParam<[]>) {\r\n  send(getService().get<[]>('/obterMutacaoPatrimonioLiquido/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarMutacaoPatrimonioLiquido(mutacaoPatrimonioLiquido: MutacaoPatrimonioLiquido, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarMutacaoPatrimonioLiquido', mutacaoPatrimonioLiquido), param);\r\n}\r\n\r\nexport function salvarContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/salvarContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function excluirContaResultado(contaResultado: ContaResultado, param?: AxiosParam<void>) {\r\n  send(getService().post<void>('/excluirContaResultado', contaResultado), param);\r\n}\r\n\r\nexport function obterContasClassificacaoDireto(idGrupoPlanoConta: number, param: AxiosParam<ContaFluxoCaixa[]>) {\r\n  send(getService().get<ContaFluxoCaixa[]>('/obterContasClassificacaoDireto/' + idGrupoPlanoConta), param);\r\n}\r\n\r\nexport function salvarClassificacaoDireto(contaFluxoCaixa: ContaFluxoCaixa, param?: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/salvarClassificacaoDireto', contaFluxoCaixa), param);\r\n}\r\n\r\nexport function findSubGrupo(planoContaSubGrupoParam: PlanoContaSubGrupoParam, param: AxiosParam<any>) {\r\n  send(getService().post<any>('/findSubGrupo', planoContaSubGrupoParam), param);\r\n}\r\n\r\nexport function removerTodosPlanosConta(idGrupoPlanoConta: number, usuario: Usuario, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/removerTodosPlanosConta', { idGrupoPlanoConta, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function removeList(listaPlanoConta: PlanoConta[], apagarFilha: boolean, usuario: Usuario, param: AxiosParam<any>) {\r\n  send(\r\n    getService().post<any>('/removeList', { listaPlanoConta, apagarFilha, usuario }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function listSubGrupo(planoConta: PlanoConta, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().post<PlanoConta[]>('/listSubGrupo', planoConta), param);\r\n}\r\n\r\nexport function referenciarContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<void>\r\n) {\r\n  send(\r\n    getService().post<void>('/referenciarContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function desvincularContas(\r\n  idsPlanoConta: number[],\r\n  idPlanoContaReferencial: number,\r\n  idPlanoContaReferencialECF: number,\r\n  param: AxiosParam<any>\r\n) {\r\n  send(\r\n    getService().post<void>('/desvincularContas', { idsPlanoConta, idPlanoContaReferencial, idPlanoContaReferencialECF }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function existeLancamentoEmContaAnalitica(idPlanoConta: number, idEmpresa: number, param: AxiosParam<boolean>) {\r\n  send(\r\n    getService().post<boolean>('/existeLancamentoEmContaAnalitica', { idPlanoConta, idEmpresa }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function importarLancamentoMCG(data: ImportacaoLancamentoMCGSelecao, param: AxiosParam<ImportacaoLancamentoMCGRetornoValidacao>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('tipoImportacao', String(data.tipoImportacao));\r\n  formDataSend.append('sobescrever', String(data.sobescrever));\r\n  formDataSend.append('versaoSuperiorA2', String(data.versaoSuperiorA2));\r\n  formDataSend.append('arquivo', data.arquivo[0].file, data.arquivo[0].nomeArquivo);\r\n\r\n  if (data.versaoSuperiorA2 === false && !isEmpty(data.dtInicial) && !isEmpty(data.dtFinal)) {\r\n    formDataSend.append('dtInicial', data.dtInicial);\r\n    formDataSend.append('dtFinal', data.dtFinal);\r\n  }\r\n\r\n  send(getService().post<ImportacaoLancamentoMCGRetornoValidacao>('/importarLancamentoMCG', formDataSend), param);\r\n}\r\n\r\nexport function importarSpedContabil(data: ImportacaoSpedContabil, param: AxiosParam<RuleMessage[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('empresa.id', String(data.empresa.id));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  for (const arquivo of data.arquivos) {\r\n    formDataSend.append('arquivos', arquivo.file, arquivo.nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<RuleMessage[]>('/importarSpedContabil', formDataSend), param);\r\n}\r\n\r\nexport function gerarManadContabil(data: MANADContabilCrit, param: AxiosParam<string>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('refInicial', data.refInicial);\r\n  formDataSend.append('refFinal', data.refFinal);\r\n  formDataSend.append('idGerEmpresa', String(data.idGerEmpresa));\r\n  formDataSend.append('usuario.id', String(data.usuario.id));\r\n\r\n  if (!isEmpty(data.arquivoSFP)) {\r\n    formDataSend.append('arquivoSFP', data.arquivoSFP[0].file, data.arquivoSFP[0].nomeArquivo);\r\n  }\r\n\r\n  send(getService().post<string>('/gerarManadContabil', formDataSend), param);\r\n}\r\n\r\nexport function evolucaoContaContabilGraf(\r\n  evolucaoContaContabilGrafParam: EvolucaoContaContabilGrafParam,\r\n  param: AxiosParam<EvolucaoContaContabilGrafReturn>\r\n) {\r\n  send(getService().post<EvolucaoContaContabilGrafReturn>('/evolucaoContaContabilGraf', evolucaoContaContabilGrafParam), param);\r\n}\r\n\r\nexport function composicaoReceitaDespesasGraf(\r\n  compReceitaDespesasGrafParam: ComposicaoReceitaDespesasGrafParam,\r\n  param: AxiosParam<ComposicaoReceitaDespesasGrafReturn>\r\n) {\r\n  send(getService().post<ComposicaoReceitaDespesasGrafReturn>('/composicaoReceitaDespesasGraf', compReceitaDespesasGrafParam), param);\r\n}\r\n\r\nexport function gerarFCONTContabil(fContContabilCrit: FCONTContabilCrit, param: AxiosParam<void>) {\r\n  send(getService().post<void>('/gerarFCONTContabil', fContContabilCrit), param);\r\n}\r\n\r\nexport function obterDadosArquivoExtrato(arquivoSelecionado: ArquivoSelecionado, idBancoMCG, param: AxiosParam<BancoExtrato[]>) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idBancoMCG', idBancoMCG);\r\n\r\n  formDataSend.append('arquivoSelecionado', arquivoSelecionado[0].file, arquivoSelecionado[0].nomeArquivo);\r\n\r\n  send(getService().post<BancoExtrato[]>('/obterDadosArquivoExtrato', formDataSend), param);\r\n}\r\n\r\nexport function obterDadosConciliacaoBancariaPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  idBancoMCG,\r\n  dtInicial,\r\n  dtFinal,\r\n  param: AxiosParam<InfoConciliacaoBancaria>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('idBancoMCG', String(idBancoMCG));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n\r\n  send(getService().post<InfoConciliacaoBancaria>('/obterDadosConciliacaoBancariaPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function obterBancoListPlanoConta(bancoPlanoContaDTO: BancoPlanoConta, param: AxiosParam<BancoMCG[]>) {\r\n  send(getService().post<BancoMCG[]>('/obterBancoListPlanoConta', bancoPlanoContaDTO), param);\r\n}\r\n\r\nexport function conciliarLancamentosExtrato(listConciliacaoBancaria: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/conciliarLancamentosExtrato', listConciliacaoBancaria), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosExtrato(listaRemover: ConciliacaoBancaria[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerConciliarLancamentosExtrato', listaRemover), param);\r\n}\r\n\r\nexport function removerLancamentosExtratoBancario(listaRemover: BancoExtrato[], param: AxiosParam<string>) {\r\n  send(getService().post<string>('/removerLancamentosExtratoBancario', listaRemover), param);\r\n}\r\nexport function obterLancamentosSaldoPeriodo(\r\n  idGrupoPlanoConta,\r\n  idEmpresa,\r\n  dtInicial,\r\n  dtFinal,\r\n  historico,\r\n  valor,\r\n  operacaoConsultaValor,\r\n  param: AxiosParam<LancamentoConciliacao[]>\r\n) {\r\n  const formDataSend = new FormData();\r\n  formDataSend.append('idGrupoPlanoConta', String(idGrupoPlanoConta));\r\n  formDataSend.append('idEmpresa', String(idEmpresa));\r\n  formDataSend.append('dtInicial', String(dtInicial));\r\n  formDataSend.append('dtFinal', String(dtFinal));\r\n  formDataSend.append('historico', String(historico));\r\n  formDataSend.append('valor', String(valor));\r\n  formDataSend.append('operacaoConsultaValor', String(operacaoConsultaValor));\r\n\r\n  send(getService().post<LancamentoConciliacao[]>('/obterLancamentosSaldoPeriodo', formDataSend), param);\r\n}\r\n\r\nexport function conciliarLancamentosConta(listaConciliacao: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/conciliarLancamentosConta', listaConciliacao), param);\r\n}\r\n\r\nexport function removerConciliarLancamentosConta(listaConciliarRemover: ConciliacaoConta[], param: AxiosParam<void>) {\r\n  send(getService().post<void>('/removerConciliarLancamentosConta', listaConciliarRemover), param);\r\n}\r\n\r\nexport function eLalurAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLalurAContas/' + id), param);\r\n}\r\n\r\nexport function eLacsAContas(id: number, param: AxiosParam<PlanoConta[]>) {\r\n  send(getService().get<PlanoConta[]>('/eLacsAContas/' + id), param);\r\n}\r\n\r\nexport function getSaldoDebito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoDebito', parametros), param);\r\n}\r\n\r\nexport function getSaldoCredito(parametros: SomaSaldo, param: AxiosParam<number>) {\r\n  send(getService().post<number>('/getSaldoCredito', parametros), param);\r\n}\r\n\r\nexport function removerLancamentoLote(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/removerLancamentoLote', parametros), param);\r\n}\r\n\r\nexport function atualizaCalculoIrpjCsll(parametros: RemoveLancamentoLote, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/atualizaCalculoIrpjCsll', parametros), param);\r\n}\r\n\r\nexport function buscarLancamentosHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  param: AxiosParam<LancamentoIntegracaoHonorarios[]>\r\n) {\r\n  send(getService().post<LancamentoIntegracaoHonorarios[]>('/buscarLancamentosHonorarios', integracaoHonorariosParam), param);\r\n}\r\n\r\nexport function integrarHonorarios(\r\n  integracaoHonorariosParam: IntegracaoHonorariosParam,\r\n  lancamentos: LancamentoIntegracaoHonorarios[],\r\n  param: AxiosParam<number>\r\n) {\r\n  send(\r\n    getService().post<number>('/integrarHonorarios', { integracaoHonorariosParam, lancamentos }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function isAlteraCalculoIRPJorCSLL(parametros: CalculoIrpjCsll, param: AxiosParam<boolean>) {\r\n  send(getService().post<boolean>('/isAlteraCalculoIRPJorCSLL', parametros), param);\r\n}\r\n\r\nexport function alterarPlanoContaNaturezaConfig(idsPlanoConta: number[], enumPlanoContaNaturezaConta: number, param: AxiosParam<void>) {\r\n  send(\r\n    getService().post<void>('/alterarPlanoContaNaturezaConfig', { idsPlanoConta, enumPlanoContaNaturezaConta }),\r\n    param\r\n  );\r\n}\r\n\r\nexport function prepararContaResultado(idGrupoPlanoConta: number, param: AxiosParam<void>) {\r\n  send(getService().get<void>('/prepararContaResultado/' + idGrupoPlanoConta), param);\r\n}\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { InputGroupInline, InputProps, InputType, SearchExpression } from 'summer';\r\nimport { CLASS_NAME } from '../../../../models/dtos/ger/planoConta';\r\nimport { Reducers } from '../../../../store/ducks';\r\nimport { GlobalState } from '../../../../store/ducks/global.duck';\r\n\r\nexport interface PlanoContaInputSearchProps extends InputProps {\r\n  analitica?: boolean;\r\n  sintetica?: boolean;\r\n  idGrupoPlanoConta?: number;\r\n  filtroContaResultado?: SearchExpression[];\r\n}\r\n\r\nconst PlanoContaIS: FC<PlanoContaInputSearchProps> = props => {\r\n  const globalReducer = useSelector<Reducers, GlobalState>(state => state.globalReducer);\r\n\r\n  const getSearchExpression = (): SearchExpression[] => {\r\n    const expressions: SearchExpression[] = [];\r\n    if (props.analitica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: true,\r\n      });\r\n    }\r\n    if (props.sintetica) {\r\n      expressions.push({\r\n        alias: 'c',\r\n        conditionalGroup: 'c_',\r\n        fieldName: 'analitica',\r\n        value: false,\r\n      });\r\n    }\r\n\r\n    if (props.filtroContaResultado) {\r\n      props.filtroContaResultado.forEach(filtro => {\r\n        expressions.push(filtro);\r\n      });\r\n    }\r\n\r\n    return [\r\n      {\r\n        conditionalGroup: 'g_',\r\n        expressions,\r\n        fieldName: 'grupoPlanoConta.id',\r\n        value: props.idGrupoPlanoConta || globalReducer.globalParameter.grupoPlanoConta.id,\r\n      },\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <InputGroupInline\r\n      {...props}\r\n      isPrependLabel={true}\r\n      searchViewProps={{\r\n        ...props.searchViewProps,\r\n        filtroContaResultado: props.filtroContaResultado,\r\n        hideExtraFields: true,\r\n        useDefaultSelectRow: true,\r\n      }}\r\n      inputSearchProps={{\r\n        ...props.inputSearchProps,\r\n        columns: [\r\n          {\r\n            dataField: 'conta',\r\n            text: 'Conta',\r\n          },\r\n          {\r\n            dataField: 'analitica',\r\n            text: 'Analítica',\r\n          },\r\n          {\r\n            dataField: 'codigoReduzido',\r\n            text: 'C.R.',\r\n          },\r\n          {\r\n            dataField: 'descricao',\r\n            text: 'Descrição',\r\n          },\r\n        ],\r\n        dtoClassName: CLASS_NAME,\r\n        searchExpressions: getSearchExpression,\r\n        searchViewId: 'PlanoContaSearchView',\r\n      }}\r\n      label={props.label ? props.label : 'Plano de Contas'}\r\n      placeholder={props.placeholder ? props.placeholder : 'Informe o Plano de Contas'}\r\n      type={InputType.INPUT_SEARCH}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PlanoContaIS;\r\n","import { Basic } from 'summer';\r\nimport { PlanoContaMCG } from '../mcg/planoContaMCG';\r\nimport { SaldoAnterior } from '../mcg/saldoAnterior';\r\nimport { PlanoContaMCP } from '../mcp/planoContaMCP';\r\nimport { GrupoPlanoConta } from './grupoPlanoConta';\r\n\r\nexport interface PlanoConta extends Basic {\r\n  analitica?: boolean;\r\n  conta?: string;\r\n  codigoReduzido?: number;\r\n  descricao?: string;\r\n  grupoPlanoConta?: GrupoPlanoConta;\r\n  mcgPlanoConta?: PlanoContaMCG;\r\n  mcpPlanoConta?: PlanoContaMCP;\r\n  saldoAnterior?: SaldoAnterior;\r\n}\r\n\r\nexport const CLASS_NAME = 'br.com.projetusinformatica.calima.ger.model.dto.planoconta';\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _objectSpread2 from \"@babel/runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread2({}, Fade.defaultProps, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread2({}, Fade.defaultProps, {}, transition, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;","import { GlobalParameter } from '../models/dtos/ger/globalParameter';\r\n\r\nexport function hasGrupoPlanoContas(globalParameter: GlobalParameter): string | undefined {\r\n  let result = null;\r\n\r\n  const msg: string =\r\n    ' O Grupo de Plano de Contas selecionado não está configurado. Para configuar acesse:' +\r\n    'Módulo Contábil > Manutenção > Grupos > Plano de Contas - \\n' +\r\n    'E configure os seguintes campos: Máscara, Dígito: Ativo, Passivo, Receita e Despesa.';\r\n\r\n  if (\r\n    !globalParameter.grupoEmpresaConfig &&\r\n    !globalParameter.grupoPlanoConta &&\r\n    !globalParameter.grupoPlanoConta.mascara &&\r\n    !globalParameter.grupoPlanoConta.digitoAtivo &&\r\n    !globalParameter.grupoPlanoConta.digitoPassivo &&\r\n    !globalParameter.grupoPlanoConta.digitoReceita &&\r\n    !globalParameter.grupoPlanoConta.digitoDespesa\r\n  ) {\r\n    result = msg;\r\n  }\r\n\r\n  return result;\r\n}\r\n"],"sourceRoot":""}